
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003760  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ce  00800060  00003760  000037f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  0080012e  0080012e  000038c2  2**0
                  ALLOC
  3 .stab         00003108  00000000  00000000  000038c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001385  00000000  00000000  000069cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007d51  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007e91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008001  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ab35  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b8e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ba44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bcd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c49f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 9a 17 	jmp	0x2f34	; 0x2f34 <__vector_4>
      14:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <__vector_9>
      28:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__vector_10>
      2c:	0c 94 9b 16 	jmp	0x2d36	; 0x2d36 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 32       	cpi	r26, 0x2E	; 46
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e2       	ldi	r26, 0x2E	; 46
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 34       	cpi	r26, 0x4B	; 75
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1b 09 	call	0x1236	; 0x1236 <main>
      8a:	0c 94 ae 1b 	jmp	0x375c	; 0x375c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e1       	ldi	r26, 0x15	; 21
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4e 1b 	jmp	0x369c	; 0x369c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3e 1b 	jmp	0x367c	; 0x367c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5a 1b 	jmp	0x36b4	; 0x36b4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3e 1b 	jmp	0x367c	; 0x367c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5a 1b 	jmp	0x36b4	; 0x36b4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e1       	ldi	r24, 0x15	; 21
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4e 1b 	jmp	0x369c	; 0x369c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3e 1b 	jmp	0x367c	; 0x367c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5a 1b 	jmp	0x36b4	; 0x36b4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3e 1b 	jmp	0x367c	; 0x367c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5a 1b 	jmp	0x36b4	; 0x36b4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3e 1b 	jmp	0x367c	; 0x367c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5a 1b 	jmp	0x36b4	; 0x36b4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 42 1b 	jmp	0x3684	; 0x3684 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5e 1b 	jmp	0x36bc	; 0x36bc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Set up the DDR of a certain pin (A, B, C or D) to either become an output or an input
 * if an wrong value is given, the function will ignore
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Ignore */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Description :
 * Change the value of the following pin to either be 1 or 0
 * if an wrong value is given, the function will ignore
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Ignore */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the current of value of the specified pin, which will be either LOGIC_HIGH or LOGIC_LOW
 * if wrong value given, the fucntion will return LOGIC_LOW
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	88 30       	cpi	r24, 0x08	; 8
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
		/* Ignore */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * Description :
 * Set up the DDR of a certain port (A, B, C or D) to either become an output or an input
 * if an wrong value is given, the function will ignore
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		/* Ignore */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * Description :
 * Change the value of the following port to either be 1 or 0
 * if an wrong value is given, the function will ignore
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
		/* Ignore */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the current of value of the specified PORT
 * if wrong value given, the fucntion will return LOGIC_LOW
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Ignore */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <timer_callBack>:
void changePass(void);
/*
 * This is the call-back function for the timer driver
 */
void timer_callBack(void)
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    11ca:	80 91 30 01 	lds	r24, 0x0130
    11ce:	90 91 31 01 	lds	r25, 0x0131
    11d2:	a0 91 32 01 	lds	r26, 0x0132
    11d6:	b0 91 33 01 	lds	r27, 0x0133
    11da:	01 96       	adiw	r24, 0x01	; 1
    11dc:	a1 1d       	adc	r26, r1
    11de:	b1 1d       	adc	r27, r1
    11e0:	80 93 30 01 	sts	0x0130, r24
    11e4:	90 93 31 01 	sts	0x0131, r25
    11e8:	a0 93 32 01 	sts	0x0132, r26
    11ec:	b0 93 33 01 	sts	0x0133, r27
	if(g_tick == calc)
    11f0:	20 91 30 01 	lds	r18, 0x0130
    11f4:	30 91 31 01 	lds	r19, 0x0131
    11f8:	40 91 32 01 	lds	r20, 0x0132
    11fc:	50 91 33 01 	lds	r21, 0x0133
    1200:	80 91 41 01 	lds	r24, 0x0141
    1204:	90 91 42 01 	lds	r25, 0x0142
    1208:	a0 91 43 01 	lds	r26, 0x0143
    120c:	b0 91 44 01 	lds	r27, 0x0144
    1210:	28 17       	cp	r18, r24
    1212:	39 07       	cpc	r19, r25
    1214:	4a 07       	cpc	r20, r26
    1216:	5b 07       	cpc	r21, r27
    1218:	59 f4       	brne	.+22     	; 0x1230 <timer_callBack+0x6e>
	{
		g_tick = 0;
    121a:	10 92 30 01 	sts	0x0130, r1
    121e:	10 92 31 01 	sts	0x0131, r1
    1222:	10 92 32 01 	sts	0x0132, r1
    1226:	10 92 33 01 	sts	0x0133, r1
		g_flag = 1;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	80 93 2f 01 	sts	0x012F, r24
	}
}
    1230:	cf 91       	pop	r28
    1232:	df 91       	pop	r29
    1234:	08 95       	ret

00001236 <main>:
/*------------------------------------------------------------------------------
 *  						Application Code
 *----------------------------------------------------------------------------*/

int main()
{
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	6c 97       	sbiw	r28, 0x1c	; 28
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Global Interrupt Flag
	 */
	SREG = 1 << 7;
    124a:	ef e5       	ldi	r30, 0x5F	; 95
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 e8       	ldi	r24, 0x80	; 128
    1250:	80 83       	st	Z, r24

	/*
	 * Driver Initializations
	 */
	UART_init(&UART_Configurations);
    1252:	8d e1       	ldi	r24, 0x1D	; 29
    1254:	91 e0       	ldi	r25, 0x01	; 1
    1256:	0e 94 81 19 	call	0x3302	; 0x3302 <UART_init>
	LCD_init();
    125a:	0e 94 70 11 	call	0x22e0	; 0x22e0 <LCD_init>
	/*
	 * Start by Presenting on the screen the Project name
	 */
	LCD_displayString("Door System Lock");
    125e:	80 e6       	ldi	r24, 0x60	; 96
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <LCD_displayString>
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	aa ef       	ldi	r26, 0xFA	; 250
    126c:	b4 e4       	ldi	r27, 0x44	; 68
    126e:	89 8f       	std	Y+25, r24	; 0x19
    1270:	9a 8f       	std	Y+26, r25	; 0x1a
    1272:	ab 8f       	std	Y+27, r26	; 0x1b
    1274:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1276:	69 8d       	ldd	r22, Y+25	; 0x19
    1278:	7a 8d       	ldd	r23, Y+26	; 0x1a
    127a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    127c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	4a ef       	ldi	r20, 0xFA	; 250
    1284:	54 e4       	ldi	r21, 0x44	; 68
    1286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	8d 8b       	std	Y+21, r24	; 0x15
    1290:	9e 8b       	std	Y+22, r25	; 0x16
    1292:	af 8b       	std	Y+23, r26	; 0x17
    1294:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1296:	6d 89       	ldd	r22, Y+21	; 0x15
    1298:	7e 89       	ldd	r23, Y+22	; 0x16
    129a:	8f 89       	ldd	r24, Y+23	; 0x17
    129c:	98 8d       	ldd	r25, Y+24	; 0x18
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	40 e8       	ldi	r20, 0x80	; 128
    12a4:	5f e3       	ldi	r21, 0x3F	; 63
    12a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12aa:	88 23       	and	r24, r24
    12ac:	2c f4       	brge	.+10     	; 0x12b8 <main+0x82>
		__ticks = 1;
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	9c 8b       	std	Y+20, r25	; 0x14
    12b4:	8b 8b       	std	Y+19, r24	; 0x13
    12b6:	3f c0       	rjmp	.+126    	; 0x1336 <main+0x100>
	else if (__tmp > 65535)
    12b8:	6d 89       	ldd	r22, Y+21	; 0x15
    12ba:	7e 89       	ldd	r23, Y+22	; 0x16
    12bc:	8f 89       	ldd	r24, Y+23	; 0x17
    12be:	98 8d       	ldd	r25, Y+24	; 0x18
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	3f ef       	ldi	r19, 0xFF	; 255
    12c4:	4f e7       	ldi	r20, 0x7F	; 127
    12c6:	57 e4       	ldi	r21, 0x47	; 71
    12c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12cc:	18 16       	cp	r1, r24
    12ce:	4c f5       	brge	.+82     	; 0x1322 <main+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d0:	69 8d       	ldd	r22, Y+25	; 0x19
    12d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	40 e2       	ldi	r20, 0x20	; 32
    12de:	51 e4       	ldi	r21, 0x41	; 65
    12e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	bc 01       	movw	r22, r24
    12ea:	cd 01       	movw	r24, r26
    12ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	9c 8b       	std	Y+20, r25	; 0x14
    12f6:	8b 8b       	std	Y+19, r24	; 0x13
    12f8:	0f c0       	rjmp	.+30     	; 0x1318 <main+0xe2>
    12fa:	88 ec       	ldi	r24, 0xC8	; 200
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	9a 8b       	std	Y+18, r25	; 0x12
    1300:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1302:	89 89       	ldd	r24, Y+17	; 0x11
    1304:	9a 89       	ldd	r25, Y+18	; 0x12
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	f1 f7       	brne	.-4      	; 0x1306 <main+0xd0>
    130a:	9a 8b       	std	Y+18, r25	; 0x12
    130c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    130e:	8b 89       	ldd	r24, Y+19	; 0x13
    1310:	9c 89       	ldd	r25, Y+20	; 0x14
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	9c 8b       	std	Y+20, r25	; 0x14
    1316:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1318:	8b 89       	ldd	r24, Y+19	; 0x13
    131a:	9c 89       	ldd	r25, Y+20	; 0x14
    131c:	00 97       	sbiw	r24, 0x00	; 0
    131e:	69 f7       	brne	.-38     	; 0x12fa <main+0xc4>
    1320:	14 c0       	rjmp	.+40     	; 0x134a <main+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1322:	6d 89       	ldd	r22, Y+21	; 0x15
    1324:	7e 89       	ldd	r23, Y+22	; 0x16
    1326:	8f 89       	ldd	r24, Y+23	; 0x17
    1328:	98 8d       	ldd	r25, Y+24	; 0x18
    132a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	9c 8b       	std	Y+20, r25	; 0x14
    1334:	8b 8b       	std	Y+19, r24	; 0x13
    1336:	8b 89       	ldd	r24, Y+19	; 0x13
    1338:	9c 89       	ldd	r25, Y+20	; 0x14
    133a:	98 8b       	std	Y+16, r25	; 0x10
    133c:	8f 87       	std	Y+15, r24	; 0x0f
    133e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1340:	98 89       	ldd	r25, Y+16	; 0x10
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	f1 f7       	brne	.-4      	; 0x1342 <main+0x10c>
    1346:	98 8b       	std	Y+16, r25	; 0x10
    1348:	8f 87       	std	Y+15, r24	; 0x0f
	 * This infinite loop exists to allow the user to enter first system password as much as needed with no errors
	 */
	for(;;)
	{

		if(firstPass())
    134a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <firstPass>
    134e:	88 23       	and	r24, r24
    1350:	e1 f7       	brne	.-8      	; 0x134a <main+0x114>
	for(;;)
	{
		/*
		 * Always display these 2 options after every
		 */
		LCD_clearScreen();
    1352:	0e 94 91 16 	call	0x2d22	; 0x2d22 <LCD_clearScreen>
		LCD_moveCursor(0,0);
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	0e 94 13 16 	call	0x2c26	; 0x2c26 <LCD_moveCursor>
		LCD_displayString("+ : OPEN DOOR");
    135e:	81 e7       	ldi	r24, 0x71	; 113
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <LCD_displayString>
		LCD_moveCursor(1,0);
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	0e 94 13 16 	call	0x2c26	; 0x2c26 <LCD_moveCursor>
		LCD_displayString("- : Change Pass");
    136e:	8f e7       	ldi	r24, 0x7F	; 127
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <LCD_displayString>

		g_key = 100;
    1376:	84 e6       	ldi	r24, 0x64	; 100
    1378:	80 93 2d 01 	sts	0x012D, r24
    137c:	76 c0       	rjmp	.+236    	; 0x146a <main+0x234>

		/*
		 * While the keys + and - are not pressed, stay here
		 */
		while(g_key != '+' && g_key != '-')
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	af ea       	ldi	r26, 0xAF	; 175
    1384:	b3 e4       	ldi	r27, 0x43	; 67
    1386:	8b 87       	std	Y+11, r24	; 0x0b
    1388:	9c 87       	std	Y+12, r25	; 0x0c
    138a:	ad 87       	std	Y+13, r26	; 0x0d
    138c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    138e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1390:	7c 85       	ldd	r23, Y+12	; 0x0c
    1392:	8d 85       	ldd	r24, Y+13	; 0x0d
    1394:	9e 85       	ldd	r25, Y+14	; 0x0e
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	4a ef       	ldi	r20, 0xFA	; 250
    139c:	54 e4       	ldi	r21, 0x44	; 68
    139e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	8f 83       	std	Y+7, r24	; 0x07
    13a8:	98 87       	std	Y+8, r25	; 0x08
    13aa:	a9 87       	std	Y+9, r26	; 0x09
    13ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13ae:	6f 81       	ldd	r22, Y+7	; 0x07
    13b0:	78 85       	ldd	r23, Y+8	; 0x08
    13b2:	89 85       	ldd	r24, Y+9	; 0x09
    13b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e8       	ldi	r20, 0x80	; 128
    13bc:	5f e3       	ldi	r21, 0x3F	; 63
    13be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13c2:	88 23       	and	r24, r24
    13c4:	2c f4       	brge	.+10     	; 0x13d0 <main+0x19a>
		__ticks = 1;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	9e 83       	std	Y+6, r25	; 0x06
    13cc:	8d 83       	std	Y+5, r24	; 0x05
    13ce:	3f c0       	rjmp	.+126    	; 0x144e <main+0x218>
	else if (__tmp > 65535)
    13d0:	6f 81       	ldd	r22, Y+7	; 0x07
    13d2:	78 85       	ldd	r23, Y+8	; 0x08
    13d4:	89 85       	ldd	r24, Y+9	; 0x09
    13d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	3f ef       	ldi	r19, 0xFF	; 255
    13dc:	4f e7       	ldi	r20, 0x7F	; 127
    13de:	57 e4       	ldi	r21, 0x47	; 71
    13e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e4:	18 16       	cp	r1, r24
    13e6:	4c f5       	brge	.+82     	; 0x143a <main+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e2       	ldi	r20, 0x20	; 32
    13f6:	51 e4       	ldi	r21, 0x41	; 65
    13f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	bc 01       	movw	r22, r24
    1402:	cd 01       	movw	r24, r26
    1404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	9e 83       	std	Y+6, r25	; 0x06
    140e:	8d 83       	std	Y+5, r24	; 0x05
    1410:	0f c0       	rjmp	.+30     	; 0x1430 <main+0x1fa>
    1412:	88 ec       	ldi	r24, 0xC8	; 200
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	9c 83       	std	Y+4, r25	; 0x04
    1418:	8b 83       	std	Y+3, r24	; 0x03
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	9c 81       	ldd	r25, Y+4	; 0x04
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	f1 f7       	brne	.-4      	; 0x141e <main+0x1e8>
    1422:	9c 83       	std	Y+4, r25	; 0x04
    1424:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1426:	8d 81       	ldd	r24, Y+5	; 0x05
    1428:	9e 81       	ldd	r25, Y+6	; 0x06
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	9e 83       	std	Y+6, r25	; 0x06
    142e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1430:	8d 81       	ldd	r24, Y+5	; 0x05
    1432:	9e 81       	ldd	r25, Y+6	; 0x06
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	69 f7       	brne	.-38     	; 0x1412 <main+0x1dc>
    1438:	14 c0       	rjmp	.+40     	; 0x1462 <main+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    143a:	6f 81       	ldd	r22, Y+7	; 0x07
    143c:	78 85       	ldd	r23, Y+8	; 0x08
    143e:	89 85       	ldd	r24, Y+9	; 0x09
    1440:	9a 85       	ldd	r25, Y+10	; 0x0a
    1442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	9e 83       	std	Y+6, r25	; 0x06
    144c:	8d 83       	std	Y+5, r24	; 0x05
    144e:	8d 81       	ldd	r24, Y+5	; 0x05
    1450:	9e 81       	ldd	r25, Y+6	; 0x06
    1452:	9a 83       	std	Y+2, r25	; 0x02
    1454:	89 83       	std	Y+1, r24	; 0x01
    1456:	89 81       	ldd	r24, Y+1	; 0x01
    1458:	9a 81       	ldd	r25, Y+2	; 0x02
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	f1 f7       	brne	.-4      	; 0x145a <main+0x224>
    145e:	9a 83       	std	Y+2, r25	; 0x02
    1460:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(350);
			g_key = KEYPAD_getPressedKey();
    1462:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <KEYPAD_getPressedKey>
    1466:	80 93 2d 01 	sts	0x012D, r24
		g_key = 100;

		/*
		 * While the keys + and - are not pressed, stay here
		 */
		while(g_key != '+' && g_key != '-')
    146a:	80 91 2d 01 	lds	r24, 0x012D
    146e:	8b 32       	cpi	r24, 0x2B	; 43
    1470:	29 f0       	breq	.+10     	; 0x147c <main+0x246>
    1472:	80 91 2d 01 	lds	r24, 0x012D
    1476:	8d 32       	cpi	r24, 0x2D	; 45
    1478:	09 f0       	breq	.+2      	; 0x147c <main+0x246>
    147a:	81 cf       	rjmp	.-254    	; 0x137e <main+0x148>
		}

		/*
		 * Code for opening door
		 */
		if(g_key == '+')
    147c:	80 91 2d 01 	lds	r24, 0x012D
    1480:	8b 32       	cpi	r24, 0x2B	; 43
    1482:	69 f5       	brne	.+90     	; 0x14de <main+0x2a8>
		{
			/*
			 * Send to control that the open door function has been chosen
			 */
			UART_sendByte(OPENDOOR);
    1484:	83 e0       	ldi	r24, 0x03	; 3
    1486:	0e 94 5f 1a 	call	0x34be	; 0x34be <UART_sendByte>
			/*
			 * Enter password and send it over to make sure it is correct
			 */
			for(fail_counter = 0; fail_counter < 3; fail_counter++)
    148a:	10 92 2e 01 	sts	0x012E, r1
    148e:	19 c0       	rjmp	.+50     	; 0x14c2 <main+0x28c>
			{
				LCD_clearScreen();
    1490:	0e 94 91 16 	call	0x2d22	; 0x2d22 <LCD_clearScreen>
				LCD_displayString("Enter Old Pass:");
    1494:	8f e8       	ldi	r24, 0x8F	; 143
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <LCD_displayString>
				LCD_moveCursor(1,0);
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	0e 94 13 16 	call	0x2c26	; 0x2c26 <LCD_moveCursor>
				sendPass();
    14a4:	0e 94 a1 0a 	call	0x1542	; 0x1542 <sendPass>

				while(UART_recieveByte() != READY);
    14a8:	0e 94 76 1a 	call	0x34ec	; 0x34ec <UART_recieveByte>
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	e1 f7       	brne	.-8      	; 0x14a8 <main+0x272>

				if(UART_recieveByte())
    14b0:	0e 94 76 1a 	call	0x34ec	; 0x34ec <UART_recieveByte>
    14b4:	88 23       	and	r24, r24
    14b6:	49 f0       	breq	.+18     	; 0x14ca <main+0x294>
			 */
			UART_sendByte(OPENDOOR);
			/*
			 * Enter password and send it over to make sure it is correct
			 */
			for(fail_counter = 0; fail_counter < 3; fail_counter++)
    14b8:	80 91 2e 01 	lds	r24, 0x012E
    14bc:	8f 5f       	subi	r24, 0xFF	; 255
    14be:	80 93 2e 01 	sts	0x012E, r24
    14c2:	80 91 2e 01 	lds	r24, 0x012E
    14c6:	83 30       	cpi	r24, 0x03	; 3
    14c8:	18 f3       	brcs	.-58     	; 0x1490 <main+0x25a>
				{
					break;
				}
			}

			if(fail_counter == 3)
    14ca:	80 91 2e 01 	lds	r24, 0x012E
    14ce:	83 30       	cpi	r24, 0x03	; 3
    14d0:	19 f4       	brne	.+6      	; 0x14d8 <main+0x2a2>
			{
				/*
				 * Function to lock system
				 */
				lockSystem();
    14d2:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <lockSystem>
    14d6:	3d cf       	rjmp	.-390    	; 0x1352 <main+0x11c>
			else
			{
				/*
				 * Function to open door
				 */
				openDoor();
    14d8:	0e 94 4b 0c 	call	0x1896	; 0x1896 <openDoor>
    14dc:	3a cf       	rjmp	.-396    	; 0x1352 <main+0x11c>
			}
		}
		/*
		 * Code for changing password
		 */
		else if(g_key == '-')
    14de:	80 91 2d 01 	lds	r24, 0x012D
    14e2:	8d 32       	cpi	r24, 0x2D	; 45
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <main+0x2b2>
    14e6:	35 cf       	rjmp	.-406    	; 0x1352 <main+0x11c>
		{
			/*
			 * Send to control that the change password function has been chosen
			 */
			UART_sendByte(CHANGEPASS);
    14e8:	84 e0       	ldi	r24, 0x04	; 4
    14ea:	0e 94 5f 1a 	call	0x34be	; 0x34be <UART_sendByte>
			/*
			 * Enter password and send it over to make sure it is correct
			 */
			for(fail_counter = 0; fail_counter < 3; fail_counter++)
    14ee:	10 92 2e 01 	sts	0x012E, r1
    14f2:	19 c0       	rjmp	.+50     	; 0x1526 <main+0x2f0>
			{
				LCD_clearScreen();
    14f4:	0e 94 91 16 	call	0x2d22	; 0x2d22 <LCD_clearScreen>
				LCD_displayString("Enter Old Pass:");
    14f8:	8f e8       	ldi	r24, 0x8F	; 143
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <LCD_displayString>
				LCD_moveCursor(1,0);
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	0e 94 13 16 	call	0x2c26	; 0x2c26 <LCD_moveCursor>
				sendPass();
    1508:	0e 94 a1 0a 	call	0x1542	; 0x1542 <sendPass>

				while(UART_recieveByte() != READY);
    150c:	0e 94 76 1a 	call	0x34ec	; 0x34ec <UART_recieveByte>
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	e1 f7       	brne	.-8      	; 0x150c <main+0x2d6>

				if(UART_recieveByte())
    1514:	0e 94 76 1a 	call	0x34ec	; 0x34ec <UART_recieveByte>
    1518:	88 23       	and	r24, r24
    151a:	49 f0       	breq	.+18     	; 0x152e <main+0x2f8>
			 */
			UART_sendByte(CHANGEPASS);
			/*
			 * Enter password and send it over to make sure it is correct
			 */
			for(fail_counter = 0; fail_counter < 3; fail_counter++)
    151c:	80 91 2e 01 	lds	r24, 0x012E
    1520:	8f 5f       	subi	r24, 0xFF	; 255
    1522:	80 93 2e 01 	sts	0x012E, r24
    1526:	80 91 2e 01 	lds	r24, 0x012E
    152a:	83 30       	cpi	r24, 0x03	; 3
    152c:	18 f3       	brcs	.-58     	; 0x14f4 <main+0x2be>
				{
					break;
				}
			}

			if(fail_counter == 3)
    152e:	80 91 2e 01 	lds	r24, 0x012E
    1532:	83 30       	cpi	r24, 0x03	; 3
    1534:	19 f4       	brne	.+6      	; 0x153c <main+0x306>
			{
				/*
				 * Function to lock system
				 */
				lockSystem();
    1536:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <lockSystem>
    153a:	0b cf       	rjmp	.-490    	; 0x1352 <main+0x11c>
			else
			{
				/*
				 * Function to change password
				 */
				changePass();
    153c:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <changePass>
    1540:	08 cf       	rjmp	.-496    	; 0x1352 <main+0x11c>

00001542 <sendPass>:
/*------------------------------------------------------------------------------
 *  							Function Definitions
 *----------------------------------------------------------------------------*/

void sendPass()
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	ac 97       	sbiw	r28, 0x2c	; 44
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
	/*
	 * This for loop is for entering a Password of 5 integers and storing them in an array
	 */
	for(uint8 count = 0; count < 5; count++)
    1556:	1c a6       	std	Y+44, r1	; 0x2c
    1558:	8e c0       	rjmp	.+284    	; 0x1676 <sendPass+0x134>
	{
		g_key = 100;
    155a:	84 e6       	ldi	r24, 0x64	; 100
    155c:	80 93 2d 01 	sts	0x012D, r24
    1560:	76 c0       	rjmp	.+236    	; 0x164e <sendPass+0x10c>
		while((g_key > 9) || (g_key < 0))
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	af ea       	ldi	r26, 0xAF	; 175
    1568:	b3 e4       	ldi	r27, 0x43	; 67
    156a:	8f a3       	std	Y+39, r24	; 0x27
    156c:	98 a7       	std	Y+40, r25	; 0x28
    156e:	a9 a7       	std	Y+41, r26	; 0x29
    1570:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1572:	6f a1       	ldd	r22, Y+39	; 0x27
    1574:	78 a5       	ldd	r23, Y+40	; 0x28
    1576:	89 a5       	ldd	r24, Y+41	; 0x29
    1578:	9a a5       	ldd	r25, Y+42	; 0x2a
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	4a ef       	ldi	r20, 0xFA	; 250
    1580:	54 e4       	ldi	r21, 0x44	; 68
    1582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	8b a3       	std	Y+35, r24	; 0x23
    158c:	9c a3       	std	Y+36, r25	; 0x24
    158e:	ad a3       	std	Y+37, r26	; 0x25
    1590:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1592:	6b a1       	ldd	r22, Y+35	; 0x23
    1594:	7c a1       	ldd	r23, Y+36	; 0x24
    1596:	8d a1       	ldd	r24, Y+37	; 0x25
    1598:	9e a1       	ldd	r25, Y+38	; 0x26
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e8       	ldi	r20, 0x80	; 128
    15a0:	5f e3       	ldi	r21, 0x3F	; 63
    15a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15a6:	88 23       	and	r24, r24
    15a8:	2c f4       	brge	.+10     	; 0x15b4 <sendPass+0x72>
		__ticks = 1;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	9a a3       	std	Y+34, r25	; 0x22
    15b0:	89 a3       	std	Y+33, r24	; 0x21
    15b2:	3f c0       	rjmp	.+126    	; 0x1632 <sendPass+0xf0>
	else if (__tmp > 65535)
    15b4:	6b a1       	ldd	r22, Y+35	; 0x23
    15b6:	7c a1       	ldd	r23, Y+36	; 0x24
    15b8:	8d a1       	ldd	r24, Y+37	; 0x25
    15ba:	9e a1       	ldd	r25, Y+38	; 0x26
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	3f ef       	ldi	r19, 0xFF	; 255
    15c0:	4f e7       	ldi	r20, 0x7F	; 127
    15c2:	57 e4       	ldi	r21, 0x47	; 71
    15c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15c8:	18 16       	cp	r1, r24
    15ca:	4c f5       	brge	.+82     	; 0x161e <sendPass+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15cc:	6f a1       	ldd	r22, Y+39	; 0x27
    15ce:	78 a5       	ldd	r23, Y+40	; 0x28
    15d0:	89 a5       	ldd	r24, Y+41	; 0x29
    15d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	40 e2       	ldi	r20, 0x20	; 32
    15da:	51 e4       	ldi	r21, 0x41	; 65
    15dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	bc 01       	movw	r22, r24
    15e6:	cd 01       	movw	r24, r26
    15e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ec:	dc 01       	movw	r26, r24
    15ee:	cb 01       	movw	r24, r22
    15f0:	9a a3       	std	Y+34, r25	; 0x22
    15f2:	89 a3       	std	Y+33, r24	; 0x21
    15f4:	0f c0       	rjmp	.+30     	; 0x1614 <sendPass+0xd2>
    15f6:	88 ec       	ldi	r24, 0xC8	; 200
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	98 a3       	std	Y+32, r25	; 0x20
    15fc:	8f 8f       	std	Y+31, r24	; 0x1f
    15fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1600:	98 a1       	ldd	r25, Y+32	; 0x20
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <sendPass+0xc0>
    1606:	98 a3       	std	Y+32, r25	; 0x20
    1608:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160a:	89 a1       	ldd	r24, Y+33	; 0x21
    160c:	9a a1       	ldd	r25, Y+34	; 0x22
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	9a a3       	std	Y+34, r25	; 0x22
    1612:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1614:	89 a1       	ldd	r24, Y+33	; 0x21
    1616:	9a a1       	ldd	r25, Y+34	; 0x22
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	69 f7       	brne	.-38     	; 0x15f6 <sendPass+0xb4>
    161c:	14 c0       	rjmp	.+40     	; 0x1646 <sendPass+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    161e:	6b a1       	ldd	r22, Y+35	; 0x23
    1620:	7c a1       	ldd	r23, Y+36	; 0x24
    1622:	8d a1       	ldd	r24, Y+37	; 0x25
    1624:	9e a1       	ldd	r25, Y+38	; 0x26
    1626:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	9a a3       	std	Y+34, r25	; 0x22
    1630:	89 a3       	std	Y+33, r24	; 0x21
    1632:	89 a1       	ldd	r24, Y+33	; 0x21
    1634:	9a a1       	ldd	r25, Y+34	; 0x22
    1636:	9e 8f       	std	Y+30, r25	; 0x1e
    1638:	8d 8f       	std	Y+29, r24	; 0x1d
    163a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    163c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	f1 f7       	brne	.-4      	; 0x163e <sendPass+0xfc>
    1642:	9e 8f       	std	Y+30, r25	; 0x1e
    1644:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(350);
			g_key = KEYPAD_getPressedKey();
    1646:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <KEYPAD_getPressedKey>
    164a:	80 93 2d 01 	sts	0x012D, r24
	 * This for loop is for entering a Password of 5 integers and storing them in an array
	 */
	for(uint8 count = 0; count < 5; count++)
	{
		g_key = 100;
		while((g_key > 9) || (g_key < 0))
    164e:	80 91 2d 01 	lds	r24, 0x012D
    1652:	8a 30       	cpi	r24, 0x0A	; 10
    1654:	08 f0       	brcs	.+2      	; 0x1658 <sendPass+0x116>
    1656:	85 cf       	rjmp	.-246    	; 0x1562 <sendPass+0x20>
		{
			_delay_ms(350);
			g_key = KEYPAD_getPressedKey();
		}

		LCD_displayCharacter('*');   /* display the pressed keypad switch */
    1658:	8a e2       	ldi	r24, 0x2A	; 42
    165a:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <LCD_displayCharacter>

		g_arrKey[count] = g_key;
    165e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1660:	88 2f       	mov	r24, r24
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	20 91 2d 01 	lds	r18, 0x012D
    1668:	fc 01       	movw	r30, r24
    166a:	ec 5c       	subi	r30, 0xCC	; 204
    166c:	fe 4f       	sbci	r31, 0xFE	; 254
    166e:	20 83       	st	Z, r18
void sendPass()
{
	/*
	 * This for loop is for entering a Password of 5 integers and storing them in an array
	 */
	for(uint8 count = 0; count < 5; count++)
    1670:	8c a5       	ldd	r24, Y+44	; 0x2c
    1672:	8f 5f       	subi	r24, 0xFF	; 255
    1674:	8c a7       	std	Y+44, r24	; 0x2c
    1676:	8c a5       	ldd	r24, Y+44	; 0x2c
    1678:	85 30       	cpi	r24, 0x05	; 5
    167a:	08 f4       	brcc	.+2      	; 0x167e <sendPass+0x13c>
    167c:	6e cf       	rjmp	.-292    	; 0x155a <sendPass+0x18>
    167e:	76 c0       	rjmp	.+236    	; 0x176c <sendPass+0x22a>
	}

	/*
	 * Wait for the user to press the enter key then start the transmission using UART
	 */
	while(g_key != KEYPAD_ENTER_KEY)
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	af ea       	ldi	r26, 0xAF	; 175
    1686:	b3 e4       	ldi	r27, 0x43	; 67
    1688:	89 8f       	std	Y+25, r24	; 0x19
    168a:	9a 8f       	std	Y+26, r25	; 0x1a
    168c:	ab 8f       	std	Y+27, r26	; 0x1b
    168e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1690:	69 8d       	ldd	r22, Y+25	; 0x19
    1692:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1694:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1696:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	4a ef       	ldi	r20, 0xFA	; 250
    169e:	54 e4       	ldi	r21, 0x44	; 68
    16a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	8d 8b       	std	Y+21, r24	; 0x15
    16aa:	9e 8b       	std	Y+22, r25	; 0x16
    16ac:	af 8b       	std	Y+23, r26	; 0x17
    16ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16b0:	6d 89       	ldd	r22, Y+21	; 0x15
    16b2:	7e 89       	ldd	r23, Y+22	; 0x16
    16b4:	8f 89       	ldd	r24, Y+23	; 0x17
    16b6:	98 8d       	ldd	r25, Y+24	; 0x18
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e8       	ldi	r20, 0x80	; 128
    16be:	5f e3       	ldi	r21, 0x3F	; 63
    16c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c4:	88 23       	and	r24, r24
    16c6:	2c f4       	brge	.+10     	; 0x16d2 <sendPass+0x190>
		__ticks = 1;
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	9c 8b       	std	Y+20, r25	; 0x14
    16ce:	8b 8b       	std	Y+19, r24	; 0x13
    16d0:	3f c0       	rjmp	.+126    	; 0x1750 <sendPass+0x20e>
	else if (__tmp > 65535)
    16d2:	6d 89       	ldd	r22, Y+21	; 0x15
    16d4:	7e 89       	ldd	r23, Y+22	; 0x16
    16d6:	8f 89       	ldd	r24, Y+23	; 0x17
    16d8:	98 8d       	ldd	r25, Y+24	; 0x18
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	3f ef       	ldi	r19, 0xFF	; 255
    16de:	4f e7       	ldi	r20, 0x7F	; 127
    16e0:	57 e4       	ldi	r21, 0x47	; 71
    16e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16e6:	18 16       	cp	r1, r24
    16e8:	4c f5       	brge	.+82     	; 0x173c <sendPass+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ea:	69 8d       	ldd	r22, Y+25	; 0x19
    16ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e2       	ldi	r20, 0x20	; 32
    16f8:	51 e4       	ldi	r21, 0x41	; 65
    16fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	bc 01       	movw	r22, r24
    1704:	cd 01       	movw	r24, r26
    1706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	9c 8b       	std	Y+20, r25	; 0x14
    1710:	8b 8b       	std	Y+19, r24	; 0x13
    1712:	0f c0       	rjmp	.+30     	; 0x1732 <sendPass+0x1f0>
    1714:	88 ec       	ldi	r24, 0xC8	; 200
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	9a 8b       	std	Y+18, r25	; 0x12
    171a:	89 8b       	std	Y+17, r24	; 0x11
    171c:	89 89       	ldd	r24, Y+17	; 0x11
    171e:	9a 89       	ldd	r25, Y+18	; 0x12
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <sendPass+0x1de>
    1724:	9a 8b       	std	Y+18, r25	; 0x12
    1726:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1728:	8b 89       	ldd	r24, Y+19	; 0x13
    172a:	9c 89       	ldd	r25, Y+20	; 0x14
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	9c 8b       	std	Y+20, r25	; 0x14
    1730:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1732:	8b 89       	ldd	r24, Y+19	; 0x13
    1734:	9c 89       	ldd	r25, Y+20	; 0x14
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	69 f7       	brne	.-38     	; 0x1714 <sendPass+0x1d2>
    173a:	14 c0       	rjmp	.+40     	; 0x1764 <sendPass+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173c:	6d 89       	ldd	r22, Y+21	; 0x15
    173e:	7e 89       	ldd	r23, Y+22	; 0x16
    1740:	8f 89       	ldd	r24, Y+23	; 0x17
    1742:	98 8d       	ldd	r25, Y+24	; 0x18
    1744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	9c 8b       	std	Y+20, r25	; 0x14
    174e:	8b 8b       	std	Y+19, r24	; 0x13
    1750:	8b 89       	ldd	r24, Y+19	; 0x13
    1752:	9c 89       	ldd	r25, Y+20	; 0x14
    1754:	98 8b       	std	Y+16, r25	; 0x10
    1756:	8f 87       	std	Y+15, r24	; 0x0f
    1758:	8f 85       	ldd	r24, Y+15	; 0x0f
    175a:	98 89       	ldd	r25, Y+16	; 0x10
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	f1 f7       	brne	.-4      	; 0x175c <sendPass+0x21a>
    1760:	98 8b       	std	Y+16, r25	; 0x10
    1762:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(350);
		g_key = KEYPAD_getPressedKey();
    1764:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <KEYPAD_getPressedKey>
    1768:	80 93 2d 01 	sts	0x012D, r24
	}

	/*
	 * Wait for the user to press the enter key then start the transmission using UART
	 */
	while(g_key != KEYPAD_ENTER_KEY)
    176c:	80 91 2d 01 	lds	r24, 0x012D
    1770:	8d 30       	cpi	r24, 0x0D	; 13
    1772:	09 f0       	breq	.+2      	; 0x1776 <sendPass+0x234>
    1774:	85 cf       	rjmp	.-246    	; 0x1680 <sendPass+0x13e>
	{
		_delay_ms(350);
		g_key = KEYPAD_getPressedKey();
	}

	UART_sendByte(READY);
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	0e 94 5f 1a 	call	0x34be	; 0x34be <UART_sendByte>

	for(uint8 i = 0; i < 5; i++)
    177c:	1b a6       	std	Y+43, r1	; 0x2b
    177e:	7e c0       	rjmp	.+252    	; 0x187c <sendPass+0x33a>
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	a8 e4       	ldi	r26, 0x48	; 72
    1786:	b2 e4       	ldi	r27, 0x42	; 66
    1788:	8b 87       	std	Y+11, r24	; 0x0b
    178a:	9c 87       	std	Y+12, r25	; 0x0c
    178c:	ad 87       	std	Y+13, r26	; 0x0d
    178e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1790:	6b 85       	ldd	r22, Y+11	; 0x0b
    1792:	7c 85       	ldd	r23, Y+12	; 0x0c
    1794:	8d 85       	ldd	r24, Y+13	; 0x0d
    1796:	9e 85       	ldd	r25, Y+14	; 0x0e
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	4a ef       	ldi	r20, 0xFA	; 250
    179e:	54 e4       	ldi	r21, 0x44	; 68
    17a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	8f 83       	std	Y+7, r24	; 0x07
    17aa:	98 87       	std	Y+8, r25	; 0x08
    17ac:	a9 87       	std	Y+9, r26	; 0x09
    17ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17b0:	6f 81       	ldd	r22, Y+7	; 0x07
    17b2:	78 85       	ldd	r23, Y+8	; 0x08
    17b4:	89 85       	ldd	r24, Y+9	; 0x09
    17b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e8       	ldi	r20, 0x80	; 128
    17be:	5f e3       	ldi	r21, 0x3F	; 63
    17c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c4:	88 23       	and	r24, r24
    17c6:	2c f4       	brge	.+10     	; 0x17d2 <sendPass+0x290>
		__ticks = 1;
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	9e 83       	std	Y+6, r25	; 0x06
    17ce:	8d 83       	std	Y+5, r24	; 0x05
    17d0:	3f c0       	rjmp	.+126    	; 0x1850 <sendPass+0x30e>
	else if (__tmp > 65535)
    17d2:	6f 81       	ldd	r22, Y+7	; 0x07
    17d4:	78 85       	ldd	r23, Y+8	; 0x08
    17d6:	89 85       	ldd	r24, Y+9	; 0x09
    17d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	3f ef       	ldi	r19, 0xFF	; 255
    17de:	4f e7       	ldi	r20, 0x7F	; 127
    17e0:	57 e4       	ldi	r21, 0x47	; 71
    17e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e6:	18 16       	cp	r1, r24
    17e8:	4c f5       	brge	.+82     	; 0x183c <sendPass+0x2fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e2       	ldi	r20, 0x20	; 32
    17f8:	51 e4       	ldi	r21, 0x41	; 65
    17fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	bc 01       	movw	r22, r24
    1804:	cd 01       	movw	r24, r26
    1806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	9e 83       	std	Y+6, r25	; 0x06
    1810:	8d 83       	std	Y+5, r24	; 0x05
    1812:	0f c0       	rjmp	.+30     	; 0x1832 <sendPass+0x2f0>
    1814:	88 ec       	ldi	r24, 0xC8	; 200
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	9c 83       	std	Y+4, r25	; 0x04
    181a:	8b 83       	std	Y+3, r24	; 0x03
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	9c 81       	ldd	r25, Y+4	; 0x04
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	f1 f7       	brne	.-4      	; 0x1820 <sendPass+0x2de>
    1824:	9c 83       	std	Y+4, r25	; 0x04
    1826:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1828:	8d 81       	ldd	r24, Y+5	; 0x05
    182a:	9e 81       	ldd	r25, Y+6	; 0x06
    182c:	01 97       	sbiw	r24, 0x01	; 1
    182e:	9e 83       	std	Y+6, r25	; 0x06
    1830:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1832:	8d 81       	ldd	r24, Y+5	; 0x05
    1834:	9e 81       	ldd	r25, Y+6	; 0x06
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	69 f7       	brne	.-38     	; 0x1814 <sendPass+0x2d2>
    183a:	14 c0       	rjmp	.+40     	; 0x1864 <sendPass+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183c:	6f 81       	ldd	r22, Y+7	; 0x07
    183e:	78 85       	ldd	r23, Y+8	; 0x08
    1840:	89 85       	ldd	r24, Y+9	; 0x09
    1842:	9a 85       	ldd	r25, Y+10	; 0x0a
    1844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	9e 83       	std	Y+6, r25	; 0x06
    184e:	8d 83       	std	Y+5, r24	; 0x05
    1850:	8d 81       	ldd	r24, Y+5	; 0x05
    1852:	9e 81       	ldd	r25, Y+6	; 0x06
    1854:	9a 83       	std	Y+2, r25	; 0x02
    1856:	89 83       	std	Y+1, r24	; 0x01
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	9a 81       	ldd	r25, Y+2	; 0x02
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	f1 f7       	brne	.-4      	; 0x185c <sendPass+0x31a>
    1860:	9a 83       	std	Y+2, r25	; 0x02
    1862:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(50);
		UART_sendByte(g_arrKey[i]);
    1864:	8b a5       	ldd	r24, Y+43	; 0x2b
    1866:	88 2f       	mov	r24, r24
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	fc 01       	movw	r30, r24
    186c:	ec 5c       	subi	r30, 0xCC	; 204
    186e:	fe 4f       	sbci	r31, 0xFE	; 254
    1870:	80 81       	ld	r24, Z
    1872:	0e 94 5f 1a 	call	0x34be	; 0x34be <UART_sendByte>
		g_key = KEYPAD_getPressedKey();
	}

	UART_sendByte(READY);

	for(uint8 i = 0; i < 5; i++)
    1876:	8b a5       	ldd	r24, Y+43	; 0x2b
    1878:	8f 5f       	subi	r24, 0xFF	; 255
    187a:	8b a7       	std	Y+43, r24	; 0x2b
    187c:	8b a5       	ldd	r24, Y+43	; 0x2b
    187e:	85 30       	cpi	r24, 0x05	; 5
    1880:	08 f4       	brcc	.+2      	; 0x1884 <sendPass+0x342>
    1882:	7e cf       	rjmp	.-260    	; 0x1780 <sendPass+0x23e>
	{
		_delay_ms(50);
		UART_sendByte(g_arrKey[i]);
	}
}
    1884:	ac 96       	adiw	r28, 0x2c	; 44
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <openDoor>:

void openDoor()
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	2e 97       	sbiw	r28, 0x0e	; 14
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
	timerCalculations();
    18aa:	0e 94 77 0e 	call	0x1cee	; 0x1cee <timerCalculations>
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	a8 ec       	ldi	r26, 0xC8	; 200
    18b4:	b2 e4       	ldi	r27, 0x42	; 66
    18b6:	8b 87       	std	Y+11, r24	; 0x0b
    18b8:	9c 87       	std	Y+12, r25	; 0x0c
    18ba:	ad 87       	std	Y+13, r26	; 0x0d
    18bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18be:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	4a ef       	ldi	r20, 0xFA	; 250
    18cc:	54 e4       	ldi	r21, 0x44	; 68
    18ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	8f 83       	std	Y+7, r24	; 0x07
    18d8:	98 87       	std	Y+8, r25	; 0x08
    18da:	a9 87       	std	Y+9, r26	; 0x09
    18dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18de:	6f 81       	ldd	r22, Y+7	; 0x07
    18e0:	78 85       	ldd	r23, Y+8	; 0x08
    18e2:	89 85       	ldd	r24, Y+9	; 0x09
    18e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e8       	ldi	r20, 0x80	; 128
    18ec:	5f e3       	ldi	r21, 0x3F	; 63
    18ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18f2:	88 23       	and	r24, r24
    18f4:	2c f4       	brge	.+10     	; 0x1900 <openDoor+0x6a>
		__ticks = 1;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	9e 83       	std	Y+6, r25	; 0x06
    18fc:	8d 83       	std	Y+5, r24	; 0x05
    18fe:	3f c0       	rjmp	.+126    	; 0x197e <openDoor+0xe8>
	else if (__tmp > 65535)
    1900:	6f 81       	ldd	r22, Y+7	; 0x07
    1902:	78 85       	ldd	r23, Y+8	; 0x08
    1904:	89 85       	ldd	r24, Y+9	; 0x09
    1906:	9a 85       	ldd	r25, Y+10	; 0x0a
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	3f ef       	ldi	r19, 0xFF	; 255
    190c:	4f e7       	ldi	r20, 0x7F	; 127
    190e:	57 e4       	ldi	r21, 0x47	; 71
    1910:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1914:	18 16       	cp	r1, r24
    1916:	4c f5       	brge	.+82     	; 0x196a <openDoor+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1918:	6b 85       	ldd	r22, Y+11	; 0x0b
    191a:	7c 85       	ldd	r23, Y+12	; 0x0c
    191c:	8d 85       	ldd	r24, Y+13	; 0x0d
    191e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e2       	ldi	r20, 0x20	; 32
    1926:	51 e4       	ldi	r21, 0x41	; 65
    1928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	bc 01       	movw	r22, r24
    1932:	cd 01       	movw	r24, r26
    1934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	9e 83       	std	Y+6, r25	; 0x06
    193e:	8d 83       	std	Y+5, r24	; 0x05
    1940:	0f c0       	rjmp	.+30     	; 0x1960 <openDoor+0xca>
    1942:	88 ec       	ldi	r24, 0xC8	; 200
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	9c 83       	std	Y+4, r25	; 0x04
    1948:	8b 83       	std	Y+3, r24	; 0x03
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	9c 81       	ldd	r25, Y+4	; 0x04
    194e:	01 97       	sbiw	r24, 0x01	; 1
    1950:	f1 f7       	brne	.-4      	; 0x194e <openDoor+0xb8>
    1952:	9c 83       	std	Y+4, r25	; 0x04
    1954:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1956:	8d 81       	ldd	r24, Y+5	; 0x05
    1958:	9e 81       	ldd	r25, Y+6	; 0x06
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	9e 83       	std	Y+6, r25	; 0x06
    195e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1960:	8d 81       	ldd	r24, Y+5	; 0x05
    1962:	9e 81       	ldd	r25, Y+6	; 0x06
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	69 f7       	brne	.-38     	; 0x1942 <openDoor+0xac>
    1968:	14 c0       	rjmp	.+40     	; 0x1992 <openDoor+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    196a:	6f 81       	ldd	r22, Y+7	; 0x07
    196c:	78 85       	ldd	r23, Y+8	; 0x08
    196e:	89 85       	ldd	r24, Y+9	; 0x09
    1970:	9a 85       	ldd	r25, Y+10	; 0x0a
    1972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	9e 83       	std	Y+6, r25	; 0x06
    197c:	8d 83       	std	Y+5, r24	; 0x05
    197e:	8d 81       	ldd	r24, Y+5	; 0x05
    1980:	9e 81       	ldd	r25, Y+6	; 0x06
    1982:	9a 83       	std	Y+2, r25	; 0x02
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	9a 81       	ldd	r25, Y+2	; 0x02
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <openDoor+0xf4>
    198e:	9a 83       	std	Y+2, r25	; 0x02
    1990:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(100);
	calc = (DOORTIME*CPU_FREQ)/(timerMode_num * timerClock_num);
    1992:	80 91 39 01 	lds	r24, 0x0139
    1996:	90 91 3a 01 	lds	r25, 0x013A
    199a:	a0 91 3b 01 	lds	r26, 0x013B
    199e:	b0 91 3c 01 	lds	r27, 0x013C
    19a2:	20 91 3d 01 	lds	r18, 0x013D
    19a6:	30 91 3e 01 	lds	r19, 0x013E
    19aa:	40 91 3f 01 	lds	r20, 0x013F
    19ae:	50 91 40 01 	lds	r21, 0x0140
    19b2:	bc 01       	movw	r22, r24
    19b4:	cd 01       	movw	r24, r26
    19b6:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__mulsi3>
    19ba:	9b 01       	movw	r18, r22
    19bc:	ac 01       	movw	r20, r24
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	9e e0       	ldi	r25, 0x0E	; 14
    19c2:	a7 e2       	ldi	r26, 0x27	; 39
    19c4:	b7 e0       	ldi	r27, 0x07	; 7
    19c6:	bc 01       	movw	r22, r24
    19c8:	cd 01       	movw	r24, r26
    19ca:	0e 94 10 1b 	call	0x3620	; 0x3620 <__udivmodsi4>
    19ce:	da 01       	movw	r26, r20
    19d0:	c9 01       	movw	r24, r18
    19d2:	80 93 41 01 	sts	0x0141, r24
    19d6:	90 93 42 01 	sts	0x0142, r25
    19da:	a0 93 43 01 	sts	0x0143, r26
    19de:	b0 93 44 01 	sts	0x0144, r27

	/*
	 * Start the timer and set callback function
	 */

	g_tick = 0;
    19e2:	10 92 30 01 	sts	0x0130, r1
    19e6:	10 92 31 01 	sts	0x0131, r1
    19ea:	10 92 32 01 	sts	0x0132, r1
    19ee:	10 92 33 01 	sts	0x0133, r1
	g_flag = 0;
    19f2:	10 92 2f 01 	sts	0x012F, r1
	Timer_setCallBack(timer_callBack, Timer_Configurations.timer_ID);
    19f6:	20 91 2a 01 	lds	r18, 0x012A
    19fa:	81 ee       	ldi	r24, 0xE1	; 225
    19fc:	98 e0       	ldi	r25, 0x08	; 8
    19fe:	62 2f       	mov	r22, r18
    1a00:	0e 94 66 19 	call	0x32cc	; 0x32cc <Timer_setCallBack>
	Timer_init(&Timer_Configurations);
    1a04:	84 e2       	ldi	r24, 0x24	; 36
    1a06:	91 e0       	ldi	r25, 0x01	; 1
    1a08:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <Timer_init>



	LCD_clearScreen();
    1a0c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <LCD_clearScreen>
	LCD_moveCursor(0,3);
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	63 e0       	ldi	r22, 0x03	; 3
    1a14:	0e 94 13 16 	call	0x2c26	; 0x2c26 <LCD_moveCursor>
	LCD_displayString("Door Opening");
    1a18:	8f e9       	ldi	r24, 0x9F	; 159
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <LCD_displayString>
	LCD_moveCursor(1,4);
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	64 e0       	ldi	r22, 0x04	; 4
    1a24:	0e 94 13 16 	call	0x2c26	; 0x2c26 <LCD_moveCursor>
	LCD_displayString("Please Wait");
    1a28:	8c ea       	ldi	r24, 0xAC	; 172
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <LCD_displayString>

	/*
	 * Display until the timer activates flag, which is in 15 seconds
	 */
	while(!g_flag);
    1a30:	80 91 2f 01 	lds	r24, 0x012F
    1a34:	88 23       	and	r24, r24
    1a36:	e1 f3       	breq	.-8      	; 0x1a30 <openDoor+0x19a>

	LCD_clearScreen();
    1a38:	0e 94 91 16 	call	0x2d22	; 0x2d22 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	60 e0       	ldi	r22, 0x00	; 0
    1a40:	0e 94 13 16 	call	0x2c26	; 0x2c26 <LCD_moveCursor>
	LCD_displayString("Wait for people");
    1a44:	88 eb       	ldi	r24, 0xB8	; 184
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <LCD_displayString>
	LCD_moveCursor(1,3);
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	63 e0       	ldi	r22, 0x03	; 3
    1a50:	0e 94 13 16 	call	0x2c26	; 0x2c26 <LCD_moveCursor>
	LCD_displayString("to enter");
    1a54:	88 ec       	ldi	r24, 0xC8	; 200
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <LCD_displayString>

	while(UART_recieveByte() != READY);
    1a5c:	0e 94 76 1a 	call	0x34ec	; 0x34ec <UART_recieveByte>
    1a60:	81 30       	cpi	r24, 0x01	; 1
    1a62:	e1 f7       	brne	.-8      	; 0x1a5c <openDoor+0x1c6>

	/*
	 * Wait till people pass
	 */
	while(UART_recieveByte() != NO_PEOPLE);
    1a64:	0e 94 76 1a 	call	0x34ec	; 0x34ec <UART_recieveByte>
    1a68:	86 30       	cpi	r24, 0x06	; 6
    1a6a:	e1 f7       	brne	.-8      	; 0x1a64 <openDoor+0x1ce>

	g_flag = 0;
    1a6c:	10 92 2f 01 	sts	0x012F, r1
	g_tick = 0;
    1a70:	10 92 30 01 	sts	0x0130, r1
    1a74:	10 92 31 01 	sts	0x0131, r1
    1a78:	10 92 32 01 	sts	0x0132, r1
    1a7c:	10 92 33 01 	sts	0x0133, r1

	LCD_clearScreen();
    1a80:	0e 94 91 16 	call	0x2d22	; 0x2d22 <LCD_clearScreen>
	LCD_moveCursor(0,2);
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	62 e0       	ldi	r22, 0x02	; 2
    1a88:	0e 94 13 16 	call	0x2c26	; 0x2c26 <LCD_moveCursor>
	LCD_displayString("Door Closing");
    1a8c:	81 ed       	ldi	r24, 0xD1	; 209
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <LCD_displayString>
	LCD_moveCursor(1,4);
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	64 e0       	ldi	r22, 0x04	; 4
    1a98:	0e 94 13 16 	call	0x2c26	; 0x2c26 <LCD_moveCursor>
	LCD_displayString("Please Wait");
    1a9c:	8c ea       	ldi	r24, 0xAC	; 172
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <LCD_displayString>

	/*
	 * Display until the timer activates flag, which is in 15 seconds
	 */
	while(!g_flag);
    1aa4:	80 91 2f 01 	lds	r24, 0x012F
    1aa8:	88 23       	and	r24, r24
    1aaa:	e1 f3       	breq	.-8      	; 0x1aa4 <openDoor+0x20e>

	Timer_deinit(Timer_Configurations.timer_ID);
    1aac:	80 91 2a 01 	lds	r24, 0x012A
    1ab0:	0e 94 07 19 	call	0x320e	; 0x320e <Timer_deinit>
}
    1ab4:	2e 96       	adiw	r28, 0x0e	; 14
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <lockSystem>:

void lockSystem()
{
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	2e 97       	sbiw	r28, 0x0e	; 14
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
	timerCalculations();
    1ada:	0e 94 77 0e 	call	0x1cee	; 0x1cee <timerCalculations>
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	a8 ec       	ldi	r26, 0xC8	; 200
    1ae4:	b2 e4       	ldi	r27, 0x42	; 66
    1ae6:	8b 87       	std	Y+11, r24	; 0x0b
    1ae8:	9c 87       	std	Y+12, r25	; 0x0c
    1aea:	ad 87       	std	Y+13, r26	; 0x0d
    1aec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1af2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1af4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	4a ef       	ldi	r20, 0xFA	; 250
    1afc:	54 e4       	ldi	r21, 0x44	; 68
    1afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	8f 83       	std	Y+7, r24	; 0x07
    1b08:	98 87       	std	Y+8, r25	; 0x08
    1b0a:	a9 87       	std	Y+9, r26	; 0x09
    1b0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b10:	78 85       	ldd	r23, Y+8	; 0x08
    1b12:	89 85       	ldd	r24, Y+9	; 0x09
    1b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e8       	ldi	r20, 0x80	; 128
    1b1c:	5f e3       	ldi	r21, 0x3F	; 63
    1b1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b22:	88 23       	and	r24, r24
    1b24:	2c f4       	brge	.+10     	; 0x1b30 <lockSystem+0x6a>
		__ticks = 1;
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	9e 83       	std	Y+6, r25	; 0x06
    1b2c:	8d 83       	std	Y+5, r24	; 0x05
    1b2e:	3f c0       	rjmp	.+126    	; 0x1bae <lockSystem+0xe8>
	else if (__tmp > 65535)
    1b30:	6f 81       	ldd	r22, Y+7	; 0x07
    1b32:	78 85       	ldd	r23, Y+8	; 0x08
    1b34:	89 85       	ldd	r24, Y+9	; 0x09
    1b36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	3f ef       	ldi	r19, 0xFF	; 255
    1b3c:	4f e7       	ldi	r20, 0x7F	; 127
    1b3e:	57 e4       	ldi	r21, 0x47	; 71
    1b40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b44:	18 16       	cp	r1, r24
    1b46:	4c f5       	brge	.+82     	; 0x1b9a <lockSystem+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	40 e2       	ldi	r20, 0x20	; 32
    1b56:	51 e4       	ldi	r21, 0x41	; 65
    1b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	bc 01       	movw	r22, r24
    1b62:	cd 01       	movw	r24, r26
    1b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	9e 83       	std	Y+6, r25	; 0x06
    1b6e:	8d 83       	std	Y+5, r24	; 0x05
    1b70:	0f c0       	rjmp	.+30     	; 0x1b90 <lockSystem+0xca>
    1b72:	88 ec       	ldi	r24, 0xC8	; 200
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	9c 83       	std	Y+4, r25	; 0x04
    1b78:	8b 83       	std	Y+3, r24	; 0x03
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <lockSystem+0xb8>
    1b82:	9c 83       	std	Y+4, r25	; 0x04
    1b84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b86:	8d 81       	ldd	r24, Y+5	; 0x05
    1b88:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	9e 83       	std	Y+6, r25	; 0x06
    1b8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b90:	8d 81       	ldd	r24, Y+5	; 0x05
    1b92:	9e 81       	ldd	r25, Y+6	; 0x06
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	69 f7       	brne	.-38     	; 0x1b72 <lockSystem+0xac>
    1b98:	14 c0       	rjmp	.+40     	; 0x1bc2 <lockSystem+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b9c:	78 85       	ldd	r23, Y+8	; 0x08
    1b9e:	89 85       	ldd	r24, Y+9	; 0x09
    1ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	9e 83       	std	Y+6, r25	; 0x06
    1bac:	8d 83       	std	Y+5, r24	; 0x05
    1bae:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb2:	9a 83       	std	Y+2, r25	; 0x02
    1bb4:	89 83       	std	Y+1, r24	; 0x01
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	f1 f7       	brne	.-4      	; 0x1bba <lockSystem+0xf4>
    1bbe:	9a 83       	std	Y+2, r25	; 0x02
    1bc0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(100);
	calc = (LOCKTIME*CPU_FREQ)/(timerMode_num * timerClock_num);
    1bc2:	80 91 39 01 	lds	r24, 0x0139
    1bc6:	90 91 3a 01 	lds	r25, 0x013A
    1bca:	a0 91 3b 01 	lds	r26, 0x013B
    1bce:	b0 91 3c 01 	lds	r27, 0x013C
    1bd2:	20 91 3d 01 	lds	r18, 0x013D
    1bd6:	30 91 3e 01 	lds	r19, 0x013E
    1bda:	40 91 3f 01 	lds	r20, 0x013F
    1bde:	50 91 40 01 	lds	r21, 0x0140
    1be2:	bc 01       	movw	r22, r24
    1be4:	cd 01       	movw	r24, r26
    1be6:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__mulsi3>
    1bea:	9b 01       	movw	r18, r22
    1bec:	ac 01       	movw	r20, r24
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	98 e3       	ldi	r25, 0x38	; 56
    1bf2:	ac e9       	ldi	r26, 0x9C	; 156
    1bf4:	bc e1       	ldi	r27, 0x1C	; 28
    1bf6:	bc 01       	movw	r22, r24
    1bf8:	cd 01       	movw	r24, r26
    1bfa:	0e 94 10 1b 	call	0x3620	; 0x3620 <__udivmodsi4>
    1bfe:	da 01       	movw	r26, r20
    1c00:	c9 01       	movw	r24, r18
    1c02:	80 93 41 01 	sts	0x0141, r24
    1c06:	90 93 42 01 	sts	0x0142, r25
    1c0a:	a0 93 43 01 	sts	0x0143, r26
    1c0e:	b0 93 44 01 	sts	0x0144, r27
	/*
	 * Start the timer and set callback function
	 */

	Timer_setCallBack(timer_callBack, Timer_Configurations.timer_ID);
    1c12:	20 91 2a 01 	lds	r18, 0x012A
    1c16:	81 ee       	ldi	r24, 0xE1	; 225
    1c18:	98 e0       	ldi	r25, 0x08	; 8
    1c1a:	62 2f       	mov	r22, r18
    1c1c:	0e 94 66 19 	call	0x32cc	; 0x32cc <Timer_setCallBack>
	Timer_init(&Timer_Configurations);
    1c20:	84 e2       	ldi	r24, 0x24	; 36
    1c22:	91 e0       	ldi	r25, 0x01	; 1
    1c24:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <Timer_init>
	g_tick = 0;
    1c28:	10 92 30 01 	sts	0x0130, r1
    1c2c:	10 92 31 01 	sts	0x0131, r1
    1c30:	10 92 32 01 	sts	0x0132, r1
    1c34:	10 92 33 01 	sts	0x0133, r1
	g_flag = 0;
    1c38:	10 92 2f 01 	sts	0x012F, r1

	LCD_clearScreen();
    1c3c:	0e 94 91 16 	call	0x2d22	; 0x2d22 <LCD_clearScreen>
	LCD_moveCursor(0,2);
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	62 e0       	ldi	r22, 0x02	; 2
    1c44:	0e 94 13 16 	call	0x2c26	; 0x2c26 <LCD_moveCursor>
	LCD_displayString("SYSTEM LOCKED");
    1c48:	8e ed       	ldi	r24, 0xDE	; 222
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <LCD_displayString>
	LCD_moveCursor(1,0);
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	60 e0       	ldi	r22, 0x00	; 0
    1c54:	0e 94 13 16 	call	0x2c26	; 0x2c26 <LCD_moveCursor>
	LCD_displayString("Wait 1 minute");
    1c58:	8c ee       	ldi	r24, 0xEC	; 236
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <LCD_displayString>

	/*
	 * Wait for timer to raise flag, 60 seconds
	 */
	while(!g_flag);
    1c60:	80 91 2f 01 	lds	r24, 0x012F
    1c64:	88 23       	and	r24, r24
    1c66:	e1 f3       	breq	.-8      	; 0x1c60 <lockSystem+0x19a>

	Timer_deinit(Timer_Configurations.timer_ID);
    1c68:	80 91 2a 01 	lds	r24, 0x012A
    1c6c:	0e 94 07 19 	call	0x320e	; 0x320e <Timer_deinit>
}
    1c70:	2e 96       	adiw	r28, 0x0e	; 14
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	cd bf       	out	0x3d, r28	; 61
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <firstPass>:

uint8 firstPass(void)
{
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1c8a:	0e 94 91 16 	call	0x2d22	; 0x2d22 <LCD_clearScreen>
	LCD_displayString("Enter Pass:");
    1c8e:	8a ef       	ldi	r24, 0xFA	; 250
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <LCD_displayString>
	LCD_moveCursor(1,0);
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	60 e0       	ldi	r22, 0x00	; 0
    1c9a:	0e 94 13 16 	call	0x2c26	; 0x2c26 <LCD_moveCursor>

	sendPass();
    1c9e:	0e 94 a1 0a 	call	0x1542	; 0x1542 <sendPass>

	LCD_clearScreen();
    1ca2:	0e 94 91 16 	call	0x2d22	; 0x2d22 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	60 e0       	ldi	r22, 0x00	; 0
    1caa:	0e 94 13 16 	call	0x2c26	; 0x2c26 <LCD_moveCursor>
	LCD_displayString("Re-Enter Pass:");
    1cae:	86 e0       	ldi	r24, 0x06	; 6
    1cb0:	91 e0       	ldi	r25, 0x01	; 1
    1cb2:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <LCD_displayString>
	LCD_moveCursor(1,0);
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	60 e0       	ldi	r22, 0x00	; 0
    1cba:	0e 94 13 16 	call	0x2c26	; 0x2c26 <LCD_moveCursor>

	sendPass();
    1cbe:	0e 94 a1 0a 	call	0x1542	; 0x1542 <sendPass>

	LCD_clearScreen();
    1cc2:	0e 94 91 16 	call	0x2d22	; 0x2d22 <LCD_clearScreen>

	/*
	 * Wait for signal which indicates whether the passwords match or don't
	 * if yes, exit the for loop, which in this case is the function of else
	 */
	while(UART_recieveByte() != READY);
    1cc6:	0e 94 76 1a 	call	0x34ec	; 0x34ec <UART_recieveByte>
    1cca:	81 30       	cpi	r24, 0x01	; 1
    1ccc:	e1 f7       	brne	.-8      	; 0x1cc6 <firstPass+0x44>

	return UART_recieveByte();
    1cce:	0e 94 76 1a 	call	0x34ec	; 0x34ec <UART_recieveByte>
}
    1cd2:	cf 91       	pop	r28
    1cd4:	df 91       	pop	r29
    1cd6:	08 95       	ret

00001cd8 <changePass>:


void changePass()
{
    1cd8:	df 93       	push	r29
    1cda:	cf 93       	push	r28
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
	for(;;)
	{
		if(firstPass())
    1ce0:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <firstPass>
    1ce4:	88 23       	and	r24, r24
    1ce6:	e1 f7       	brne	.-8      	; 0x1ce0 <changePass+0x8>
		else
		{
			break;
		}
	}
}
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <timerCalculations>:


void timerCalculations()
{
    1cee:	ef 92       	push	r14
    1cf0:	ff 92       	push	r15
    1cf2:	0f 93       	push	r16
    1cf4:	1f 93       	push	r17
    1cf6:	df 93       	push	r29
    1cf8:	cf 93       	push	r28
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	60 97       	sbiw	r28, 0x10	; 16
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
	timerMode_num = Timer_Configurations.timer_compare_MatchValue - Timer_Configurations.timer_InitialValue;
    1d0a:	20 91 26 01 	lds	r18, 0x0126
    1d0e:	30 91 27 01 	lds	r19, 0x0127
    1d12:	40 91 28 01 	lds	r20, 0x0128
    1d16:	50 91 29 01 	lds	r21, 0x0129
    1d1a:	80 91 24 01 	lds	r24, 0x0124
    1d1e:	90 91 25 01 	lds	r25, 0x0125
    1d22:	cc 01       	movw	r24, r24
    1d24:	a0 e0       	ldi	r26, 0x00	; 0
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	79 01       	movw	r14, r18
    1d2a:	8a 01       	movw	r16, r20
    1d2c:	e8 1a       	sub	r14, r24
    1d2e:	f9 0a       	sbc	r15, r25
    1d30:	0a 0b       	sbc	r16, r26
    1d32:	1b 0b       	sbc	r17, r27
    1d34:	d8 01       	movw	r26, r16
    1d36:	c7 01       	movw	r24, r14
    1d38:	80 93 39 01 	sts	0x0139, r24
    1d3c:	90 93 3a 01 	sts	0x013A, r25
    1d40:	a0 93 3b 01 	sts	0x013B, r26
    1d44:	b0 93 3c 01 	sts	0x013C, r27

	if(Timer_Configurations.timer_mode == MODE_normal)
    1d48:	80 91 2c 01 	lds	r24, 0x012C
    1d4c:	88 23       	and	r24, r24
    1d4e:	79 f5       	brne	.+94     	; 0x1dae <timerCalculations+0xc0>
	{
		if(Timer_Configurations.timer_ID == TIMER_timer1)
    1d50:	80 91 2a 01 	lds	r24, 0x012A
    1d54:	81 30       	cpi	r24, 0x01	; 1
    1d56:	c1 f4       	brne	.+48     	; 0x1d88 <timerCalculations+0x9a>
		{
			timerMode_num = 65535 - Timer_Configurations.timer_InitialValue;
    1d58:	80 91 24 01 	lds	r24, 0x0124
    1d5c:	90 91 25 01 	lds	r25, 0x0125
    1d60:	9c 01       	movw	r18, r24
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	50 e0       	ldi	r21, 0x00	; 0
    1d66:	8f ef       	ldi	r24, 0xFF	; 255
    1d68:	9f ef       	ldi	r25, 0xFF	; 255
    1d6a:	a0 e0       	ldi	r26, 0x00	; 0
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	82 1b       	sub	r24, r18
    1d70:	93 0b       	sbc	r25, r19
    1d72:	a4 0b       	sbc	r26, r20
    1d74:	b5 0b       	sbc	r27, r21
    1d76:	80 93 39 01 	sts	0x0139, r24
    1d7a:	90 93 3a 01 	sts	0x013A, r25
    1d7e:	a0 93 3b 01 	sts	0x013B, r26
    1d82:	b0 93 3c 01 	sts	0x013C, r27
    1d86:	13 c0       	rjmp	.+38     	; 0x1dae <timerCalculations+0xc0>
		}
		else
		{
			timerMode_num = 255 - Timer_Configurations.timer_InitialValue;
    1d88:	20 91 24 01 	lds	r18, 0x0124
    1d8c:	30 91 25 01 	lds	r19, 0x0125
    1d90:	8f ef       	ldi	r24, 0xFF	; 255
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	82 1b       	sub	r24, r18
    1d96:	93 0b       	sbc	r25, r19
    1d98:	cc 01       	movw	r24, r24
    1d9a:	a0 e0       	ldi	r26, 0x00	; 0
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	80 93 39 01 	sts	0x0139, r24
    1da2:	90 93 3a 01 	sts	0x013A, r25
    1da6:	a0 93 3b 01 	sts	0x013B, r26
    1daa:	b0 93 3c 01 	sts	0x013C, r27
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	a8 ec       	ldi	r26, 0xC8	; 200
    1db4:	b2 e4       	ldi	r27, 0x42	; 66
    1db6:	8b 87       	std	Y+11, r24	; 0x0b
    1db8:	9c 87       	std	Y+12, r25	; 0x0c
    1dba:	ad 87       	std	Y+13, r26	; 0x0d
    1dbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	4a ef       	ldi	r20, 0xFA	; 250
    1dcc:	54 e4       	ldi	r21, 0x44	; 68
    1dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	8f 83       	std	Y+7, r24	; 0x07
    1dd8:	98 87       	std	Y+8, r25	; 0x08
    1dda:	a9 87       	std	Y+9, r26	; 0x09
    1ddc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dde:	6f 81       	ldd	r22, Y+7	; 0x07
    1de0:	78 85       	ldd	r23, Y+8	; 0x08
    1de2:	89 85       	ldd	r24, Y+9	; 0x09
    1de4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	40 e8       	ldi	r20, 0x80	; 128
    1dec:	5f e3       	ldi	r21, 0x3F	; 63
    1dee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1df2:	88 23       	and	r24, r24
    1df4:	2c f4       	brge	.+10     	; 0x1e00 <timerCalculations+0x112>
		__ticks = 1;
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	9e 83       	std	Y+6, r25	; 0x06
    1dfc:	8d 83       	std	Y+5, r24	; 0x05
    1dfe:	3f c0       	rjmp	.+126    	; 0x1e7e <timerCalculations+0x190>
	else if (__tmp > 65535)
    1e00:	6f 81       	ldd	r22, Y+7	; 0x07
    1e02:	78 85       	ldd	r23, Y+8	; 0x08
    1e04:	89 85       	ldd	r24, Y+9	; 0x09
    1e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	3f ef       	ldi	r19, 0xFF	; 255
    1e0c:	4f e7       	ldi	r20, 0x7F	; 127
    1e0e:	57 e4       	ldi	r21, 0x47	; 71
    1e10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e14:	18 16       	cp	r1, r24
    1e16:	4c f5       	brge	.+82     	; 0x1e6a <timerCalculations+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	40 e2       	ldi	r20, 0x20	; 32
    1e26:	51 e4       	ldi	r21, 0x41	; 65
    1e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	bc 01       	movw	r22, r24
    1e32:	cd 01       	movw	r24, r26
    1e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	9e 83       	std	Y+6, r25	; 0x06
    1e3e:	8d 83       	std	Y+5, r24	; 0x05
    1e40:	0f c0       	rjmp	.+30     	; 0x1e60 <timerCalculations+0x172>
    1e42:	88 ec       	ldi	r24, 0xC8	; 200
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	9c 83       	std	Y+4, r25	; 0x04
    1e48:	8b 83       	std	Y+3, r24	; 0x03
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <timerCalculations+0x160>
    1e52:	9c 83       	std	Y+4, r25	; 0x04
    1e54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e56:	8d 81       	ldd	r24, Y+5	; 0x05
    1e58:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	9e 83       	std	Y+6, r25	; 0x06
    1e5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e60:	8d 81       	ldd	r24, Y+5	; 0x05
    1e62:	9e 81       	ldd	r25, Y+6	; 0x06
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	69 f7       	brne	.-38     	; 0x1e42 <timerCalculations+0x154>
    1e68:	14 c0       	rjmp	.+40     	; 0x1e92 <timerCalculations+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6c:	78 85       	ldd	r23, Y+8	; 0x08
    1e6e:	89 85       	ldd	r24, Y+9	; 0x09
    1e70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	9e 83       	std	Y+6, r25	; 0x06
    1e7c:	8d 83       	std	Y+5, r24	; 0x05
    1e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e80:	9e 81       	ldd	r25, Y+6	; 0x06
    1e82:	9a 83       	std	Y+2, r25	; 0x02
    1e84:	89 83       	std	Y+1, r24	; 0x01
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	f1 f7       	brne	.-4      	; 0x1e8a <timerCalculations+0x19c>
    1e8e:	9a 83       	std	Y+2, r25	; 0x02
    1e90:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	_delay_ms(100);

	switch(Timer_Configurations.timer_clock)
    1e92:	80 91 2b 01 	lds	r24, 0x012B
    1e96:	08 2f       	mov	r16, r24
    1e98:	10 e0       	ldi	r17, 0x00	; 0
    1e9a:	18 8b       	std	Y+16, r17	; 0x10
    1e9c:	0f 87       	std	Y+15, r16	; 0x0f
    1e9e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1ea0:	38 89       	ldd	r19, Y+16	; 0x10
    1ea2:	23 30       	cpi	r18, 0x03	; 3
    1ea4:	31 05       	cpc	r19, r1
    1ea6:	09 f4       	brne	.+2      	; 0x1eaa <timerCalculations+0x1bc>
    1ea8:	4f c0       	rjmp	.+158    	; 0x1f48 <timerCalculations+0x25a>
    1eaa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eac:	98 89       	ldd	r25, Y+16	; 0x10
    1eae:	84 30       	cpi	r24, 0x04	; 4
    1eb0:	91 05       	cpc	r25, r1
    1eb2:	7c f4       	brge	.+30     	; 0x1ed2 <timerCalculations+0x1e4>
    1eb4:	0f 85       	ldd	r16, Y+15	; 0x0f
    1eb6:	18 89       	ldd	r17, Y+16	; 0x10
    1eb8:	01 30       	cpi	r16, 0x01	; 1
    1eba:	11 05       	cpc	r17, r1
    1ebc:	59 f1       	breq	.+86     	; 0x1f14 <timerCalculations+0x226>
    1ebe:	2f 85       	ldd	r18, Y+15	; 0x0f
    1ec0:	38 89       	ldd	r19, Y+16	; 0x10
    1ec2:	22 30       	cpi	r18, 0x02	; 2
    1ec4:	31 05       	cpc	r19, r1
    1ec6:	9c f5       	brge	.+102    	; 0x1f2e <timerCalculations+0x240>
    1ec8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eca:	98 89       	ldd	r25, Y+16	; 0x10
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	c9 f0       	breq	.+50     	; 0x1f02 <timerCalculations+0x214>
    1ed0:	7b c0       	rjmp	.+246    	; 0x1fc8 <timerCalculations+0x2da>
    1ed2:	0f 85       	ldd	r16, Y+15	; 0x0f
    1ed4:	18 89       	ldd	r17, Y+16	; 0x10
    1ed6:	05 30       	cpi	r16, 0x05	; 5
    1ed8:	11 05       	cpc	r17, r1
    1eda:	09 f4       	brne	.+2      	; 0x1ede <timerCalculations+0x1f0>
    1edc:	4f c0       	rjmp	.+158    	; 0x1f7c <timerCalculations+0x28e>
    1ede:	2f 85       	ldd	r18, Y+15	; 0x0f
    1ee0:	38 89       	ldd	r19, Y+16	; 0x10
    1ee2:	25 30       	cpi	r18, 0x05	; 5
    1ee4:	31 05       	cpc	r19, r1
    1ee6:	ec f1       	brlt	.+122    	; 0x1f62 <timerCalculations+0x274>
    1ee8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eea:	98 89       	ldd	r25, Y+16	; 0x10
    1eec:	86 30       	cpi	r24, 0x06	; 6
    1eee:	91 05       	cpc	r25, r1
    1ef0:	09 f4       	brne	.+2      	; 0x1ef4 <timerCalculations+0x206>
    1ef2:	51 c0       	rjmp	.+162    	; 0x1f96 <timerCalculations+0x2a8>
    1ef4:	0f 85       	ldd	r16, Y+15	; 0x0f
    1ef6:	18 89       	ldd	r17, Y+16	; 0x10
    1ef8:	07 30       	cpi	r16, 0x07	; 7
    1efa:	11 05       	cpc	r17, r1
    1efc:	09 f4       	brne	.+2      	; 0x1f00 <timerCalculations+0x212>
    1efe:	58 c0       	rjmp	.+176    	; 0x1fb0 <timerCalculations+0x2c2>
    1f00:	63 c0       	rjmp	.+198    	; 0x1fc8 <timerCalculations+0x2da>
	{
		case NO_CLOCK:
			timerClock_num = 0;
    1f02:	10 92 3d 01 	sts	0x013D, r1
    1f06:	10 92 3e 01 	sts	0x013E, r1
    1f0a:	10 92 3f 01 	sts	0x013F, r1
    1f0e:	10 92 40 01 	sts	0x0140, r1
    1f12:	5a c0       	rjmp	.+180    	; 0x1fc8 <timerCalculations+0x2da>
			break;
		case F_CPU_CLOCK:
			timerClock_num = 1;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	a0 e0       	ldi	r26, 0x00	; 0
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	80 93 3d 01 	sts	0x013D, r24
    1f20:	90 93 3e 01 	sts	0x013E, r25
    1f24:	a0 93 3f 01 	sts	0x013F, r26
    1f28:	b0 93 40 01 	sts	0x0140, r27
    1f2c:	4d c0       	rjmp	.+154    	; 0x1fc8 <timerCalculations+0x2da>
			break;
		case F_CPU_8:
			timerClock_num = 8;
    1f2e:	88 e0       	ldi	r24, 0x08	; 8
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	a0 e0       	ldi	r26, 0x00	; 0
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	80 93 3d 01 	sts	0x013D, r24
    1f3a:	90 93 3e 01 	sts	0x013E, r25
    1f3e:	a0 93 3f 01 	sts	0x013F, r26
    1f42:	b0 93 40 01 	sts	0x0140, r27
    1f46:	40 c0       	rjmp	.+128    	; 0x1fc8 <timerCalculations+0x2da>
			break;
		case F_CPU_32_T2:
			timerClock_num = 32;
    1f48:	80 e2       	ldi	r24, 0x20	; 32
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	a0 e0       	ldi	r26, 0x00	; 0
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	80 93 3d 01 	sts	0x013D, r24
    1f54:	90 93 3e 01 	sts	0x013E, r25
    1f58:	a0 93 3f 01 	sts	0x013F, r26
    1f5c:	b0 93 40 01 	sts	0x0140, r27
    1f60:	33 c0       	rjmp	.+102    	; 0x1fc8 <timerCalculations+0x2da>
			break;
		case F_CPU_64:
			timerClock_num = 64;
    1f62:	80 e4       	ldi	r24, 0x40	; 64
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	a0 e0       	ldi	r26, 0x00	; 0
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	80 93 3d 01 	sts	0x013D, r24
    1f6e:	90 93 3e 01 	sts	0x013E, r25
    1f72:	a0 93 3f 01 	sts	0x013F, r26
    1f76:	b0 93 40 01 	sts	0x0140, r27
    1f7a:	26 c0       	rjmp	.+76     	; 0x1fc8 <timerCalculations+0x2da>
			break;
		case F_CPU_128_T2:
			timerClock_num = 128;
    1f7c:	80 e8       	ldi	r24, 0x80	; 128
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	a0 e0       	ldi	r26, 0x00	; 0
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	80 93 3d 01 	sts	0x013D, r24
    1f88:	90 93 3e 01 	sts	0x013E, r25
    1f8c:	a0 93 3f 01 	sts	0x013F, r26
    1f90:	b0 93 40 01 	sts	0x0140, r27
    1f94:	19 c0       	rjmp	.+50     	; 0x1fc8 <timerCalculations+0x2da>
			break;
		case F_CPU_256:
			timerClock_num = 256;
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	91 e0       	ldi	r25, 0x01	; 1
    1f9a:	a0 e0       	ldi	r26, 0x00	; 0
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	80 93 3d 01 	sts	0x013D, r24
    1fa2:	90 93 3e 01 	sts	0x013E, r25
    1fa6:	a0 93 3f 01 	sts	0x013F, r26
    1faa:	b0 93 40 01 	sts	0x0140, r27
    1fae:	0c c0       	rjmp	.+24     	; 0x1fc8 <timerCalculations+0x2da>
			break;
		case F_CPU_1024:
			timerClock_num = 1024;
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	94 e0       	ldi	r25, 0x04	; 4
    1fb4:	a0 e0       	ldi	r26, 0x00	; 0
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	80 93 3d 01 	sts	0x013D, r24
    1fbc:	90 93 3e 01 	sts	0x013E, r25
    1fc0:	a0 93 3f 01 	sts	0x013F, r26
    1fc4:	b0 93 40 01 	sts	0x0140, r27
			break;
	}
}
    1fc8:	60 96       	adiw	r28, 0x10	; 16
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	f8 94       	cli
    1fce:	de bf       	out	0x3e, r29	; 62
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	cd bf       	out	0x3d, r28	; 61
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	1f 91       	pop	r17
    1fda:	0f 91       	pop	r16
    1fdc:	ff 90       	pop	r15
    1fde:	ef 90       	pop	r14
    1fe0:	08 95       	ret

00001fe2 <KEYPAD_getPressedKey>:
/*------------------------------------------------------------------------------
 *  							Function Definitions
 *----------------------------------------------------------------------------*/

uint8 KEYPAD_getPressedKey(void)
{
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	60 97       	sbiw	r28, 0x10	; 16
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	60 e0       	ldi	r22, 0x00	; 0
    1ffa:	40 e0       	ldi	r20, 0x00	; 0
    1ffc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	61 e0       	ldi	r22, 0x01	; 1
    2004:	40 e0       	ldi	r20, 0x00	; 0
    2006:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	62 e0       	ldi	r22, 0x02	; 2
    200e:	40 e0       	ldi	r20, 0x00	; 0
    2010:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	63 e0       	ldi	r22, 0x03	; 3
    2018:	40 e0       	ldi	r20, 0x00	; 0
    201a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	64 e0       	ldi	r22, 0x04	; 4
    2022:	40 e0       	ldi	r20, 0x00	; 0
    2024:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	65 e0       	ldi	r22, 0x05	; 5
    202c:	40 e0       	ldi	r20, 0x00	; 0
    202e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	66 e0       	ldi	r22, 0x06	; 6
    2036:	40 e0       	ldi	r20, 0x00	; 0
    2038:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	67 e0       	ldi	r22, 0x07	; 7
    2040:	40 e0       	ldi	r20, 0x00	; 0
    2042:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2046:	1f 86       	std	Y+15, r1	; 0x0f
    2048:	ab c0       	rjmp	.+342    	; 0x21a0 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	6f 85       	ldd	r22, Y+15	; 0x0f
    204e:	41 e0       	ldi	r20, 0x01	; 1
    2050:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	6f 85       	ldd	r22, Y+15	; 0x0f
    2058:	40 e0       	ldi	r20, 0x00	; 0
    205a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    205e:	18 8a       	std	Y+16, r1	; 0x10
    2060:	22 c0       	rjmp	.+68     	; 0x20a6 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2062:	88 89       	ldd	r24, Y+16	; 0x10
    2064:	98 2f       	mov	r25, r24
    2066:	9c 5f       	subi	r25, 0xFC	; 252
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	69 2f       	mov	r22, r25
    206c:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    2070:	88 23       	and	r24, r24
    2072:	b1 f4       	brne	.+44     	; 0x20a0 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2074:	8f 85       	ldd	r24, Y+15	; 0x0f
    2076:	88 2f       	mov	r24, r24
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	88 0f       	add	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	88 0f       	add	r24, r24
    2080:	99 1f       	adc	r25, r25
    2082:	98 2f       	mov	r25, r24
    2084:	88 89       	ldd	r24, Y+16	; 0x10
    2086:	89 0f       	add	r24, r25
    2088:	8f 5f       	subi	r24, 0xFF	; 255
    208a:	0e 94 d5 10 	call	0x21aa	; 0x21aa <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    208e:	60 96       	adiw	r28, 0x10	; 16
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	cd bf       	out	0x3d, r28	; 61
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    20a0:	88 89       	ldd	r24, Y+16	; 0x10
    20a2:	8f 5f       	subi	r24, 0xFF	; 255
    20a4:	88 8b       	std	Y+16, r24	; 0x10
    20a6:	88 89       	ldd	r24, Y+16	; 0x10
    20a8:	84 30       	cpi	r24, 0x04	; 4
    20aa:	d8 f2       	brcs	.-74     	; 0x2062 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	6f 85       	ldd	r22, Y+15	; 0x0f
    20b0:	40 e0       	ldi	r20, 0x00	; 0
    20b2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	a0 ea       	ldi	r26, 0xA0	; 160
    20bc:	b0 e4       	ldi	r27, 0x40	; 64
    20be:	8b 87       	std	Y+11, r24	; 0x0b
    20c0:	9c 87       	std	Y+12, r25	; 0x0c
    20c2:	ad 87       	std	Y+13, r26	; 0x0d
    20c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    20cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	4a ef       	ldi	r20, 0xFA	; 250
    20d4:	54 e4       	ldi	r21, 0x44	; 68
    20d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	8f 83       	std	Y+7, r24	; 0x07
    20e0:	98 87       	std	Y+8, r25	; 0x08
    20e2:	a9 87       	std	Y+9, r26	; 0x09
    20e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20e6:	6f 81       	ldd	r22, Y+7	; 0x07
    20e8:	78 85       	ldd	r23, Y+8	; 0x08
    20ea:	89 85       	ldd	r24, Y+9	; 0x09
    20ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e8       	ldi	r20, 0x80	; 128
    20f4:	5f e3       	ldi	r21, 0x3F	; 63
    20f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20fa:	88 23       	and	r24, r24
    20fc:	2c f4       	brge	.+10     	; 0x2108 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	9e 83       	std	Y+6, r25	; 0x06
    2104:	8d 83       	std	Y+5, r24	; 0x05
    2106:	3f c0       	rjmp	.+126    	; 0x2186 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    2108:	6f 81       	ldd	r22, Y+7	; 0x07
    210a:	78 85       	ldd	r23, Y+8	; 0x08
    210c:	89 85       	ldd	r24, Y+9	; 0x09
    210e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	3f ef       	ldi	r19, 0xFF	; 255
    2114:	4f e7       	ldi	r20, 0x7F	; 127
    2116:	57 e4       	ldi	r21, 0x47	; 71
    2118:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    211c:	18 16       	cp	r1, r24
    211e:	4c f5       	brge	.+82     	; 0x2172 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2120:	6b 85       	ldd	r22, Y+11	; 0x0b
    2122:	7c 85       	ldd	r23, Y+12	; 0x0c
    2124:	8d 85       	ldd	r24, Y+13	; 0x0d
    2126:	9e 85       	ldd	r25, Y+14	; 0x0e
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	40 e2       	ldi	r20, 0x20	; 32
    212e:	51 e4       	ldi	r21, 0x41	; 65
    2130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	bc 01       	movw	r22, r24
    213a:	cd 01       	movw	r24, r26
    213c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	9e 83       	std	Y+6, r25	; 0x06
    2146:	8d 83       	std	Y+5, r24	; 0x05
    2148:	0f c0       	rjmp	.+30     	; 0x2168 <KEYPAD_getPressedKey+0x186>
    214a:	88 ec       	ldi	r24, 0xC8	; 200
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	9c 83       	std	Y+4, r25	; 0x04
    2150:	8b 83       	std	Y+3, r24	; 0x03
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	9c 81       	ldd	r25, Y+4	; 0x04
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	f1 f7       	brne	.-4      	; 0x2156 <KEYPAD_getPressedKey+0x174>
    215a:	9c 83       	std	Y+4, r25	; 0x04
    215c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215e:	8d 81       	ldd	r24, Y+5	; 0x05
    2160:	9e 81       	ldd	r25, Y+6	; 0x06
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	9e 83       	std	Y+6, r25	; 0x06
    2166:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2168:	8d 81       	ldd	r24, Y+5	; 0x05
    216a:	9e 81       	ldd	r25, Y+6	; 0x06
    216c:	00 97       	sbiw	r24, 0x00	; 0
    216e:	69 f7       	brne	.-38     	; 0x214a <KEYPAD_getPressedKey+0x168>
    2170:	14 c0       	rjmp	.+40     	; 0x219a <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2172:	6f 81       	ldd	r22, Y+7	; 0x07
    2174:	78 85       	ldd	r23, Y+8	; 0x08
    2176:	89 85       	ldd	r24, Y+9	; 0x09
    2178:	9a 85       	ldd	r25, Y+10	; 0x0a
    217a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	9e 83       	std	Y+6, r25	; 0x06
    2184:	8d 83       	std	Y+5, r24	; 0x05
    2186:	8d 81       	ldd	r24, Y+5	; 0x05
    2188:	9e 81       	ldd	r25, Y+6	; 0x06
    218a:	9a 83       	std	Y+2, r25	; 0x02
    218c:	89 83       	std	Y+1, r24	; 0x01
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	9a 81       	ldd	r25, Y+2	; 0x02
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	f1 f7       	brne	.-4      	; 0x2192 <KEYPAD_getPressedKey+0x1b0>
    2196:	9a 83       	std	Y+2, r25	; 0x02
    2198:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    219a:	8f 85       	ldd	r24, Y+15	; 0x0f
    219c:	8f 5f       	subi	r24, 0xFF	; 255
    219e:	8f 87       	std	Y+15, r24	; 0x0f
    21a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a2:	84 30       	cpi	r24, 0x04	; 4
    21a4:	08 f4       	brcc	.+2      	; 0x21a8 <KEYPAD_getPressedKey+0x1c6>
    21a6:	51 cf       	rjmp	.-350    	; 0x204a <KEYPAD_getPressedKey+0x68>
    21a8:	4e cf       	rjmp	.-356    	; 0x2046 <KEYPAD_getPressedKey+0x64>

000021aa <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <KEYPAD_4x4_adjustKeyNumber+0x6>
    21b0:	00 d0       	rcall	.+0      	; 0x21b2 <KEYPAD_4x4_adjustKeyNumber+0x8>
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
    21b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = -1;
    21b8:	8f ef       	ldi	r24, 0xFF	; 255
    21ba:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    21bc:	8a 81       	ldd	r24, Y+2	; 0x02
    21be:	28 2f       	mov	r18, r24
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	3c 83       	std	Y+4, r19	; 0x04
    21c4:	2b 83       	std	Y+3, r18	; 0x03
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	88 30       	cpi	r24, 0x08	; 8
    21cc:	91 05       	cpc	r25, r1
    21ce:	09 f4       	brne	.+2      	; 0x21d2 <KEYPAD_4x4_adjustKeyNumber+0x28>
    21d0:	7f c0       	rjmp	.+254    	; 0x22d0 <KEYPAD_4x4_adjustKeyNumber+0x126>
    21d2:	2b 81       	ldd	r18, Y+3	; 0x03
    21d4:	3c 81       	ldd	r19, Y+4	; 0x04
    21d6:	29 30       	cpi	r18, 0x09	; 9
    21d8:	31 05       	cpc	r19, r1
    21da:	54 f5       	brge	.+84     	; 0x2230 <KEYPAD_4x4_adjustKeyNumber+0x86>
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
    21de:	9c 81       	ldd	r25, Y+4	; 0x04
    21e0:	84 30       	cpi	r24, 0x04	; 4
    21e2:	91 05       	cpc	r25, r1
    21e4:	09 f4       	brne	.+2      	; 0x21e8 <KEYPAD_4x4_adjustKeyNumber+0x3e>
    21e6:	74 c0       	rjmp	.+232    	; 0x22d0 <KEYPAD_4x4_adjustKeyNumber+0x126>
    21e8:	2b 81       	ldd	r18, Y+3	; 0x03
    21ea:	3c 81       	ldd	r19, Y+4	; 0x04
    21ec:	25 30       	cpi	r18, 0x05	; 5
    21ee:	31 05       	cpc	r19, r1
    21f0:	94 f4       	brge	.+36     	; 0x2216 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    21f2:	8b 81       	ldd	r24, Y+3	; 0x03
    21f4:	9c 81       	ldd	r25, Y+4	; 0x04
    21f6:	82 30       	cpi	r24, 0x02	; 2
    21f8:	91 05       	cpc	r25, r1
    21fa:	09 f4       	brne	.+2      	; 0x21fe <KEYPAD_4x4_adjustKeyNumber+0x54>
    21fc:	47 c0       	rjmp	.+142    	; 0x228c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    21fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2200:	3c 81       	ldd	r19, Y+4	; 0x04
    2202:	23 30       	cpi	r18, 0x03	; 3
    2204:	31 05       	cpc	r19, r1
    2206:	0c f0       	brlt	.+2      	; 0x220a <KEYPAD_4x4_adjustKeyNumber+0x60>
    2208:	44 c0       	rjmp	.+136    	; 0x2292 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	9c 81       	ldd	r25, Y+4	; 0x04
    220e:	81 30       	cpi	r24, 0x01	; 1
    2210:	91 05       	cpc	r25, r1
    2212:	c9 f1       	breq	.+114    	; 0x2286 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2214:	5d c0       	rjmp	.+186    	; 0x22d0 <KEYPAD_4x4_adjustKeyNumber+0x126>
    2216:	2b 81       	ldd	r18, Y+3	; 0x03
    2218:	3c 81       	ldd	r19, Y+4	; 0x04
    221a:	26 30       	cpi	r18, 0x06	; 6
    221c:	31 05       	cpc	r19, r1
    221e:	09 f4       	brne	.+2      	; 0x2222 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2220:	3e c0       	rjmp	.+124    	; 0x229e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	9c 81       	ldd	r25, Y+4	; 0x04
    2226:	87 30       	cpi	r24, 0x07	; 7
    2228:	91 05       	cpc	r25, r1
    222a:	0c f0       	brlt	.+2      	; 0x222e <KEYPAD_4x4_adjustKeyNumber+0x84>
    222c:	3b c0       	rjmp	.+118    	; 0x22a4 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    222e:	34 c0       	rjmp	.+104    	; 0x2298 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2230:	2b 81       	ldd	r18, Y+3	; 0x03
    2232:	3c 81       	ldd	r19, Y+4	; 0x04
    2234:	2c 30       	cpi	r18, 0x0C	; 12
    2236:	31 05       	cpc	r19, r1
    2238:	09 f4       	brne	.+2      	; 0x223c <KEYPAD_4x4_adjustKeyNumber+0x92>
    223a:	40 c0       	rjmp	.+128    	; 0x22bc <KEYPAD_4x4_adjustKeyNumber+0x112>
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	9c 81       	ldd	r25, Y+4	; 0x04
    2240:	8d 30       	cpi	r24, 0x0D	; 13
    2242:	91 05       	cpc	r25, r1
    2244:	5c f4       	brge	.+22     	; 0x225c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2246:	2b 81       	ldd	r18, Y+3	; 0x03
    2248:	3c 81       	ldd	r19, Y+4	; 0x04
    224a:	2a 30       	cpi	r18, 0x0A	; 10
    224c:	31 05       	cpc	r19, r1
    224e:	81 f1       	breq	.+96     	; 0x22b0 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2250:	8b 81       	ldd	r24, Y+3	; 0x03
    2252:	9c 81       	ldd	r25, Y+4	; 0x04
    2254:	8b 30       	cpi	r24, 0x0B	; 11
    2256:	91 05       	cpc	r25, r1
    2258:	74 f5       	brge	.+92     	; 0x22b6 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    225a:	27 c0       	rjmp	.+78     	; 0x22aa <KEYPAD_4x4_adjustKeyNumber+0x100>
    225c:	2b 81       	ldd	r18, Y+3	; 0x03
    225e:	3c 81       	ldd	r19, Y+4	; 0x04
    2260:	2e 30       	cpi	r18, 0x0E	; 14
    2262:	31 05       	cpc	r19, r1
    2264:	71 f1       	breq	.+92     	; 0x22c2 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	9c 81       	ldd	r25, Y+4	; 0x04
    226a:	8e 30       	cpi	r24, 0x0E	; 14
    226c:	91 05       	cpc	r25, r1
    226e:	84 f1       	brlt	.+96     	; 0x22d0 <KEYPAD_4x4_adjustKeyNumber+0x126>
    2270:	2b 81       	ldd	r18, Y+3	; 0x03
    2272:	3c 81       	ldd	r19, Y+4	; 0x04
    2274:	2f 30       	cpi	r18, 0x0F	; 15
    2276:	31 05       	cpc	r19, r1
    2278:	31 f1       	breq	.+76     	; 0x22c6 <KEYPAD_4x4_adjustKeyNumber+0x11c>
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	9c 81       	ldd	r25, Y+4	; 0x04
    227e:	80 31       	cpi	r24, 0x10	; 16
    2280:	91 05       	cpc	r25, r1
    2282:	21 f1       	breq	.+72     	; 0x22cc <KEYPAD_4x4_adjustKeyNumber+0x122>
    2284:	25 c0       	rjmp	.+74     	; 0x22d0 <KEYPAD_4x4_adjustKeyNumber+0x126>
	{
		case 1: keypad_button = 7;
    2286:	87 e0       	ldi	r24, 0x07	; 7
    2288:	89 83       	std	Y+1, r24	; 0x01
    228a:	22 c0       	rjmp	.+68     	; 0x22d0 <KEYPAD_4x4_adjustKeyNumber+0x126>
				break;
		case 2: keypad_button = 8;
    228c:	88 e0       	ldi	r24, 0x08	; 8
    228e:	89 83       	std	Y+1, r24	; 0x01
    2290:	1f c0       	rjmp	.+62     	; 0x22d0 <KEYPAD_4x4_adjustKeyNumber+0x126>
				break;
		case 3: keypad_button = 9;
    2292:	89 e0       	ldi	r24, 0x09	; 9
    2294:	89 83       	std	Y+1, r24	; 0x01
    2296:	1c c0       	rjmp	.+56     	; 0x22d0 <KEYPAD_4x4_adjustKeyNumber+0x126>
				break;
		case 4:
				break;
		case 5: keypad_button = 4;
    2298:	84 e0       	ldi	r24, 0x04	; 4
    229a:	89 83       	std	Y+1, r24	; 0x01
    229c:	19 c0       	rjmp	.+50     	; 0x22d0 <KEYPAD_4x4_adjustKeyNumber+0x126>
				break;
		case 6: keypad_button = 5;
    229e:	85 e0       	ldi	r24, 0x05	; 5
    22a0:	89 83       	std	Y+1, r24	; 0x01
    22a2:	16 c0       	rjmp	.+44     	; 0x22d0 <KEYPAD_4x4_adjustKeyNumber+0x126>
				break;
		case 7: keypad_button = 6;
    22a4:	86 e0       	ldi	r24, 0x06	; 6
    22a6:	89 83       	std	Y+1, r24	; 0x01
    22a8:	13 c0       	rjmp	.+38     	; 0x22d0 <KEYPAD_4x4_adjustKeyNumber+0x126>
				break;
		case 8:
				break;		
		case 9: keypad_button = 1;
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	89 83       	std	Y+1, r24	; 0x01
    22ae:	10 c0       	rjmp	.+32     	; 0x22d0 <KEYPAD_4x4_adjustKeyNumber+0x126>
				break;
		case 10: keypad_button = 2;
    22b0:	82 e0       	ldi	r24, 0x02	; 2
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	0d c0       	rjmp	.+26     	; 0x22d0 <KEYPAD_4x4_adjustKeyNumber+0x126>
				break;
		case 11: keypad_button = 3;
    22b6:	83 e0       	ldi	r24, 0x03	; 3
    22b8:	89 83       	std	Y+1, r24	; 0x01
    22ba:	0a c0       	rjmp	.+20     	; 0x22d0 <KEYPAD_4x4_adjustKeyNumber+0x126>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    22bc:	8d e2       	ldi	r24, 0x2D	; 45
    22be:	89 83       	std	Y+1, r24	; 0x01
    22c0:	07 c0       	rjmp	.+14     	; 0x22d0 <KEYPAD_4x4_adjustKeyNumber+0x126>
				break;
		case 13:
				break;			
		case 14: keypad_button = 0;
    22c2:	19 82       	std	Y+1, r1	; 0x01
    22c4:	05 c0       	rjmp	.+10     	; 0x22d0 <KEYPAD_4x4_adjustKeyNumber+0x126>
				break;
		case 15:
		         keypad_button = KEYPAD_ENTER_KEY;
    22c6:	8d e0       	ldi	r24, 0x0D	; 13
    22c8:	89 83       	std	Y+1, r24	; 0x01
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <KEYPAD_4x4_adjustKeyNumber+0x126>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    22cc:	8b e2       	ldi	r24, 0x2B	; 43
    22ce:	89 83       	std	Y+1, r24	; 0x01
				break;
		default:
				break;
	}
	return keypad_button;
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
} 
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret

000022e0 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    22e8:	2e 97       	sbiw	r28, 0x0e	; 14
    22ea:	0f b6       	in	r0, 0x3f	; 63
    22ec:	f8 94       	cli
    22ee:	de bf       	out	0x3e, r29	; 62
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    22f4:	82 e0       	ldi	r24, 0x02	; 2
    22f6:	60 e0       	ldi	r22, 0x00	; 0
    22f8:	41 e0       	ldi	r20, 0x01	; 1
    22fa:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    22fe:	82 e0       	ldi	r24, 0x02	; 2
    2300:	61 e0       	ldi	r22, 0x01	; 1
    2302:	41 e0       	ldi	r20, 0x01	; 1
    2304:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	6f ef       	ldi	r22, 0xFF	; 255
    230c:	0e 94 14 08 	call	0x1028	; 0x1028 <GPIO_setupPortDirection>
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	a0 ea       	ldi	r26, 0xA0	; 160
    2316:	b1 e4       	ldi	r27, 0x41	; 65
    2318:	8b 87       	std	Y+11, r24	; 0x0b
    231a:	9c 87       	std	Y+12, r25	; 0x0c
    231c:	ad 87       	std	Y+13, r26	; 0x0d
    231e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2320:	6b 85       	ldd	r22, Y+11	; 0x0b
    2322:	7c 85       	ldd	r23, Y+12	; 0x0c
    2324:	8d 85       	ldd	r24, Y+13	; 0x0d
    2326:	9e 85       	ldd	r25, Y+14	; 0x0e
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	4a ef       	ldi	r20, 0xFA	; 250
    232e:	54 e4       	ldi	r21, 0x44	; 68
    2330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	8f 83       	std	Y+7, r24	; 0x07
    233a:	98 87       	std	Y+8, r25	; 0x08
    233c:	a9 87       	std	Y+9, r26	; 0x09
    233e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2340:	6f 81       	ldd	r22, Y+7	; 0x07
    2342:	78 85       	ldd	r23, Y+8	; 0x08
    2344:	89 85       	ldd	r24, Y+9	; 0x09
    2346:	9a 85       	ldd	r25, Y+10	; 0x0a
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e8       	ldi	r20, 0x80	; 128
    234e:	5f e3       	ldi	r21, 0x3F	; 63
    2350:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2354:	88 23       	and	r24, r24
    2356:	2c f4       	brge	.+10     	; 0x2362 <LCD_init+0x82>
		__ticks = 1;
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	9e 83       	std	Y+6, r25	; 0x06
    235e:	8d 83       	std	Y+5, r24	; 0x05
    2360:	3f c0       	rjmp	.+126    	; 0x23e0 <LCD_init+0x100>
	else if (__tmp > 65535)
    2362:	6f 81       	ldd	r22, Y+7	; 0x07
    2364:	78 85       	ldd	r23, Y+8	; 0x08
    2366:	89 85       	ldd	r24, Y+9	; 0x09
    2368:	9a 85       	ldd	r25, Y+10	; 0x0a
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	3f ef       	ldi	r19, 0xFF	; 255
    236e:	4f e7       	ldi	r20, 0x7F	; 127
    2370:	57 e4       	ldi	r21, 0x47	; 71
    2372:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2376:	18 16       	cp	r1, r24
    2378:	4c f5       	brge	.+82     	; 0x23cc <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237a:	6b 85       	ldd	r22, Y+11	; 0x0b
    237c:	7c 85       	ldd	r23, Y+12	; 0x0c
    237e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2380:	9e 85       	ldd	r25, Y+14	; 0x0e
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e2       	ldi	r20, 0x20	; 32
    2388:	51 e4       	ldi	r21, 0x41	; 65
    238a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	bc 01       	movw	r22, r24
    2394:	cd 01       	movw	r24, r26
    2396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	9e 83       	std	Y+6, r25	; 0x06
    23a0:	8d 83       	std	Y+5, r24	; 0x05
    23a2:	0f c0       	rjmp	.+30     	; 0x23c2 <LCD_init+0xe2>
    23a4:	88 ec       	ldi	r24, 0xC8	; 200
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	9c 83       	std	Y+4, r25	; 0x04
    23aa:	8b 83       	std	Y+3, r24	; 0x03
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	9c 81       	ldd	r25, Y+4	; 0x04
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	f1 f7       	brne	.-4      	; 0x23b0 <LCD_init+0xd0>
    23b4:	9c 83       	std	Y+4, r25	; 0x04
    23b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ba:	9e 81       	ldd	r25, Y+6	; 0x06
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	9e 83       	std	Y+6, r25	; 0x06
    23c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c2:	8d 81       	ldd	r24, Y+5	; 0x05
    23c4:	9e 81       	ldd	r25, Y+6	; 0x06
    23c6:	00 97       	sbiw	r24, 0x00	; 0
    23c8:	69 f7       	brne	.-38     	; 0x23a4 <LCD_init+0xc4>
    23ca:	14 c0       	rjmp	.+40     	; 0x23f4 <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23cc:	6f 81       	ldd	r22, Y+7	; 0x07
    23ce:	78 85       	ldd	r23, Y+8	; 0x08
    23d0:	89 85       	ldd	r24, Y+9	; 0x09
    23d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	9e 83       	std	Y+6, r25	; 0x06
    23de:	8d 83       	std	Y+5, r24	; 0x05
    23e0:	8d 81       	ldd	r24, Y+5	; 0x05
    23e2:	9e 81       	ldd	r25, Y+6	; 0x06
    23e4:	9a 83       	std	Y+2, r25	; 0x02
    23e6:	89 83       	std	Y+1, r24	; 0x01
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	9a 81       	ldd	r25, Y+2	; 0x02
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	f1 f7       	brne	.-4      	; 0x23ec <LCD_init+0x10c>
    23f0:	9a 83       	std	Y+2, r25	; 0x02
    23f2:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    23f4:	88 e3       	ldi	r24, 0x38	; 56
    23f6:	0e 94 0c 12 	call	0x2418	; 0x2418 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    23fa:	8c e0       	ldi	r24, 0x0C	; 12
    23fc:	0e 94 0c 12 	call	0x2418	; 0x2418 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	0e 94 0c 12 	call	0x2418	; 0x2418 <LCD_sendCommand>
}
    2406:	2e 96       	adiw	r28, 0x0e	; 14
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	de bf       	out	0x3e, r29	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	cd bf       	out	0x3d, r28	; 61
    2412:	cf 91       	pop	r28
    2414:	df 91       	pop	r29
    2416:	08 95       	ret

00002418 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2418:	df 93       	push	r29
    241a:	cf 93       	push	r28
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
    2420:	e9 97       	sbiw	r28, 0x39	; 57
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	de bf       	out	0x3e, r29	; 62
    2428:	0f be       	out	0x3f, r0	; 63
    242a:	cd bf       	out	0x3d, r28	; 61
    242c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    242e:	82 e0       	ldi	r24, 0x02	; 2
    2430:	60 e0       	ldi	r22, 0x00	; 0
    2432:	40 e0       	ldi	r20, 0x00	; 0
    2434:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2438:	80 e0       	ldi	r24, 0x00	; 0
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	a0 e8       	ldi	r26, 0x80	; 128
    243e:	bf e3       	ldi	r27, 0x3F	; 63
    2440:	8d ab       	std	Y+53, r24	; 0x35
    2442:	9e ab       	std	Y+54, r25	; 0x36
    2444:	af ab       	std	Y+55, r26	; 0x37
    2446:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2448:	6d a9       	ldd	r22, Y+53	; 0x35
    244a:	7e a9       	ldd	r23, Y+54	; 0x36
    244c:	8f a9       	ldd	r24, Y+55	; 0x37
    244e:	98 ad       	ldd	r25, Y+56	; 0x38
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	4a ef       	ldi	r20, 0xFA	; 250
    2456:	54 e4       	ldi	r21, 0x44	; 68
    2458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	89 ab       	std	Y+49, r24	; 0x31
    2462:	9a ab       	std	Y+50, r25	; 0x32
    2464:	ab ab       	std	Y+51, r26	; 0x33
    2466:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2468:	69 a9       	ldd	r22, Y+49	; 0x31
    246a:	7a a9       	ldd	r23, Y+50	; 0x32
    246c:	8b a9       	ldd	r24, Y+51	; 0x33
    246e:	9c a9       	ldd	r25, Y+52	; 0x34
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e8       	ldi	r20, 0x80	; 128
    2476:	5f e3       	ldi	r21, 0x3F	; 63
    2478:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    247c:	88 23       	and	r24, r24
    247e:	2c f4       	brge	.+10     	; 0x248a <LCD_sendCommand+0x72>
		__ticks = 1;
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	98 ab       	std	Y+48, r25	; 0x30
    2486:	8f a7       	std	Y+47, r24	; 0x2f
    2488:	3f c0       	rjmp	.+126    	; 0x2508 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    248a:	69 a9       	ldd	r22, Y+49	; 0x31
    248c:	7a a9       	ldd	r23, Y+50	; 0x32
    248e:	8b a9       	ldd	r24, Y+51	; 0x33
    2490:	9c a9       	ldd	r25, Y+52	; 0x34
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	3f ef       	ldi	r19, 0xFF	; 255
    2496:	4f e7       	ldi	r20, 0x7F	; 127
    2498:	57 e4       	ldi	r21, 0x47	; 71
    249a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    249e:	18 16       	cp	r1, r24
    24a0:	4c f5       	brge	.+82     	; 0x24f4 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a2:	6d a9       	ldd	r22, Y+53	; 0x35
    24a4:	7e a9       	ldd	r23, Y+54	; 0x36
    24a6:	8f a9       	ldd	r24, Y+55	; 0x37
    24a8:	98 ad       	ldd	r25, Y+56	; 0x38
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	40 e2       	ldi	r20, 0x20	; 32
    24b0:	51 e4       	ldi	r21, 0x41	; 65
    24b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	bc 01       	movw	r22, r24
    24bc:	cd 01       	movw	r24, r26
    24be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	98 ab       	std	Y+48, r25	; 0x30
    24c8:	8f a7       	std	Y+47, r24	; 0x2f
    24ca:	0f c0       	rjmp	.+30     	; 0x24ea <LCD_sendCommand+0xd2>
    24cc:	88 ec       	ldi	r24, 0xC8	; 200
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	9e a7       	std	Y+46, r25	; 0x2e
    24d2:	8d a7       	std	Y+45, r24	; 0x2d
    24d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    24d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <LCD_sendCommand+0xc0>
    24dc:	9e a7       	std	Y+46, r25	; 0x2e
    24de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24e2:	98 a9       	ldd	r25, Y+48	; 0x30
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	98 ab       	std	Y+48, r25	; 0x30
    24e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ec:	98 a9       	ldd	r25, Y+48	; 0x30
    24ee:	00 97       	sbiw	r24, 0x00	; 0
    24f0:	69 f7       	brne	.-38     	; 0x24cc <LCD_sendCommand+0xb4>
    24f2:	14 c0       	rjmp	.+40     	; 0x251c <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f4:	69 a9       	ldd	r22, Y+49	; 0x31
    24f6:	7a a9       	ldd	r23, Y+50	; 0x32
    24f8:	8b a9       	ldd	r24, Y+51	; 0x33
    24fa:	9c a9       	ldd	r25, Y+52	; 0x34
    24fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	98 ab       	std	Y+48, r25	; 0x30
    2506:	8f a7       	std	Y+47, r24	; 0x2f
    2508:	8f a5       	ldd	r24, Y+47	; 0x2f
    250a:	98 a9       	ldd	r25, Y+48	; 0x30
    250c:	9c a7       	std	Y+44, r25	; 0x2c
    250e:	8b a7       	std	Y+43, r24	; 0x2b
    2510:	8b a5       	ldd	r24, Y+43	; 0x2b
    2512:	9c a5       	ldd	r25, Y+44	; 0x2c
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <LCD_sendCommand+0xfc>
    2518:	9c a7       	std	Y+44, r25	; 0x2c
    251a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    251c:	82 e0       	ldi	r24, 0x02	; 2
    251e:	61 e0       	ldi	r22, 0x01	; 1
    2520:	41 e0       	ldi	r20, 0x01	; 1
    2522:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	a0 e8       	ldi	r26, 0x80	; 128
    252c:	bf e3       	ldi	r27, 0x3F	; 63
    252e:	8f a3       	std	Y+39, r24	; 0x27
    2530:	98 a7       	std	Y+40, r25	; 0x28
    2532:	a9 a7       	std	Y+41, r26	; 0x29
    2534:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2536:	6f a1       	ldd	r22, Y+39	; 0x27
    2538:	78 a5       	ldd	r23, Y+40	; 0x28
    253a:	89 a5       	ldd	r24, Y+41	; 0x29
    253c:	9a a5       	ldd	r25, Y+42	; 0x2a
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	4a ef       	ldi	r20, 0xFA	; 250
    2544:	54 e4       	ldi	r21, 0x44	; 68
    2546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	8b a3       	std	Y+35, r24	; 0x23
    2550:	9c a3       	std	Y+36, r25	; 0x24
    2552:	ad a3       	std	Y+37, r26	; 0x25
    2554:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2556:	6b a1       	ldd	r22, Y+35	; 0x23
    2558:	7c a1       	ldd	r23, Y+36	; 0x24
    255a:	8d a1       	ldd	r24, Y+37	; 0x25
    255c:	9e a1       	ldd	r25, Y+38	; 0x26
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e8       	ldi	r20, 0x80	; 128
    2564:	5f e3       	ldi	r21, 0x3F	; 63
    2566:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    256a:	88 23       	and	r24, r24
    256c:	2c f4       	brge	.+10     	; 0x2578 <LCD_sendCommand+0x160>
		__ticks = 1;
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	9a a3       	std	Y+34, r25	; 0x22
    2574:	89 a3       	std	Y+33, r24	; 0x21
    2576:	3f c0       	rjmp	.+126    	; 0x25f6 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2578:	6b a1       	ldd	r22, Y+35	; 0x23
    257a:	7c a1       	ldd	r23, Y+36	; 0x24
    257c:	8d a1       	ldd	r24, Y+37	; 0x25
    257e:	9e a1       	ldd	r25, Y+38	; 0x26
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	3f ef       	ldi	r19, 0xFF	; 255
    2584:	4f e7       	ldi	r20, 0x7F	; 127
    2586:	57 e4       	ldi	r21, 0x47	; 71
    2588:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    258c:	18 16       	cp	r1, r24
    258e:	4c f5       	brge	.+82     	; 0x25e2 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2590:	6f a1       	ldd	r22, Y+39	; 0x27
    2592:	78 a5       	ldd	r23, Y+40	; 0x28
    2594:	89 a5       	ldd	r24, Y+41	; 0x29
    2596:	9a a5       	ldd	r25, Y+42	; 0x2a
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e2       	ldi	r20, 0x20	; 32
    259e:	51 e4       	ldi	r21, 0x41	; 65
    25a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	bc 01       	movw	r22, r24
    25aa:	cd 01       	movw	r24, r26
    25ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	9a a3       	std	Y+34, r25	; 0x22
    25b6:	89 a3       	std	Y+33, r24	; 0x21
    25b8:	0f c0       	rjmp	.+30     	; 0x25d8 <LCD_sendCommand+0x1c0>
    25ba:	88 ec       	ldi	r24, 0xC8	; 200
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	98 a3       	std	Y+32, r25	; 0x20
    25c0:	8f 8f       	std	Y+31, r24	; 0x1f
    25c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25c4:	98 a1       	ldd	r25, Y+32	; 0x20
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	f1 f7       	brne	.-4      	; 0x25c6 <LCD_sendCommand+0x1ae>
    25ca:	98 a3       	std	Y+32, r25	; 0x20
    25cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ce:	89 a1       	ldd	r24, Y+33	; 0x21
    25d0:	9a a1       	ldd	r25, Y+34	; 0x22
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	9a a3       	std	Y+34, r25	; 0x22
    25d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d8:	89 a1       	ldd	r24, Y+33	; 0x21
    25da:	9a a1       	ldd	r25, Y+34	; 0x22
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	69 f7       	brne	.-38     	; 0x25ba <LCD_sendCommand+0x1a2>
    25e0:	14 c0       	rjmp	.+40     	; 0x260a <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e2:	6b a1       	ldd	r22, Y+35	; 0x23
    25e4:	7c a1       	ldd	r23, Y+36	; 0x24
    25e6:	8d a1       	ldd	r24, Y+37	; 0x25
    25e8:	9e a1       	ldd	r25, Y+38	; 0x26
    25ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	9a a3       	std	Y+34, r25	; 0x22
    25f4:	89 a3       	std	Y+33, r24	; 0x21
    25f6:	89 a1       	ldd	r24, Y+33	; 0x21
    25f8:	9a a1       	ldd	r25, Y+34	; 0x22
    25fa:	9e 8f       	std	Y+30, r25	; 0x1e
    25fc:	8d 8f       	std	Y+29, r24	; 0x1d
    25fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2600:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	f1 f7       	brne	.-4      	; 0x2602 <LCD_sendCommand+0x1ea>
    2606:	9e 8f       	std	Y+30, r25	; 0x1e
    2608:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	69 ad       	ldd	r22, Y+57	; 0x39
    260e:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	a0 e8       	ldi	r26, 0x80	; 128
    2618:	bf e3       	ldi	r27, 0x3F	; 63
    261a:	89 8f       	std	Y+25, r24	; 0x19
    261c:	9a 8f       	std	Y+26, r25	; 0x1a
    261e:	ab 8f       	std	Y+27, r26	; 0x1b
    2620:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2622:	69 8d       	ldd	r22, Y+25	; 0x19
    2624:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2626:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2628:	9c 8d       	ldd	r25, Y+28	; 0x1c
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	4a ef       	ldi	r20, 0xFA	; 250
    2630:	54 e4       	ldi	r21, 0x44	; 68
    2632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	8d 8b       	std	Y+21, r24	; 0x15
    263c:	9e 8b       	std	Y+22, r25	; 0x16
    263e:	af 8b       	std	Y+23, r26	; 0x17
    2640:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2642:	6d 89       	ldd	r22, Y+21	; 0x15
    2644:	7e 89       	ldd	r23, Y+22	; 0x16
    2646:	8f 89       	ldd	r24, Y+23	; 0x17
    2648:	98 8d       	ldd	r25, Y+24	; 0x18
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e8       	ldi	r20, 0x80	; 128
    2650:	5f e3       	ldi	r21, 0x3F	; 63
    2652:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2656:	88 23       	and	r24, r24
    2658:	2c f4       	brge	.+10     	; 0x2664 <LCD_sendCommand+0x24c>
		__ticks = 1;
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	9c 8b       	std	Y+20, r25	; 0x14
    2660:	8b 8b       	std	Y+19, r24	; 0x13
    2662:	3f c0       	rjmp	.+126    	; 0x26e2 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2664:	6d 89       	ldd	r22, Y+21	; 0x15
    2666:	7e 89       	ldd	r23, Y+22	; 0x16
    2668:	8f 89       	ldd	r24, Y+23	; 0x17
    266a:	98 8d       	ldd	r25, Y+24	; 0x18
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	3f ef       	ldi	r19, 0xFF	; 255
    2670:	4f e7       	ldi	r20, 0x7F	; 127
    2672:	57 e4       	ldi	r21, 0x47	; 71
    2674:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2678:	18 16       	cp	r1, r24
    267a:	4c f5       	brge	.+82     	; 0x26ce <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267c:	69 8d       	ldd	r22, Y+25	; 0x19
    267e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2680:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2682:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e2       	ldi	r20, 0x20	; 32
    268a:	51 e4       	ldi	r21, 0x41	; 65
    268c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	bc 01       	movw	r22, r24
    2696:	cd 01       	movw	r24, r26
    2698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269c:	dc 01       	movw	r26, r24
    269e:	cb 01       	movw	r24, r22
    26a0:	9c 8b       	std	Y+20, r25	; 0x14
    26a2:	8b 8b       	std	Y+19, r24	; 0x13
    26a4:	0f c0       	rjmp	.+30     	; 0x26c4 <LCD_sendCommand+0x2ac>
    26a6:	88 ec       	ldi	r24, 0xC8	; 200
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	9a 8b       	std	Y+18, r25	; 0x12
    26ac:	89 8b       	std	Y+17, r24	; 0x11
    26ae:	89 89       	ldd	r24, Y+17	; 0x11
    26b0:	9a 89       	ldd	r25, Y+18	; 0x12
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <LCD_sendCommand+0x29a>
    26b6:	9a 8b       	std	Y+18, r25	; 0x12
    26b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ba:	8b 89       	ldd	r24, Y+19	; 0x13
    26bc:	9c 89       	ldd	r25, Y+20	; 0x14
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	9c 8b       	std	Y+20, r25	; 0x14
    26c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c4:	8b 89       	ldd	r24, Y+19	; 0x13
    26c6:	9c 89       	ldd	r25, Y+20	; 0x14
    26c8:	00 97       	sbiw	r24, 0x00	; 0
    26ca:	69 f7       	brne	.-38     	; 0x26a6 <LCD_sendCommand+0x28e>
    26cc:	14 c0       	rjmp	.+40     	; 0x26f6 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ce:	6d 89       	ldd	r22, Y+21	; 0x15
    26d0:	7e 89       	ldd	r23, Y+22	; 0x16
    26d2:	8f 89       	ldd	r24, Y+23	; 0x17
    26d4:	98 8d       	ldd	r25, Y+24	; 0x18
    26d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	9c 8b       	std	Y+20, r25	; 0x14
    26e0:	8b 8b       	std	Y+19, r24	; 0x13
    26e2:	8b 89       	ldd	r24, Y+19	; 0x13
    26e4:	9c 89       	ldd	r25, Y+20	; 0x14
    26e6:	98 8b       	std	Y+16, r25	; 0x10
    26e8:	8f 87       	std	Y+15, r24	; 0x0f
    26ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ec:	98 89       	ldd	r25, Y+16	; 0x10
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	f1 f7       	brne	.-4      	; 0x26ee <LCD_sendCommand+0x2d6>
    26f2:	98 8b       	std	Y+16, r25	; 0x10
    26f4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    26f6:	82 e0       	ldi	r24, 0x02	; 2
    26f8:	61 e0       	ldi	r22, 0x01	; 1
    26fa:	40 e0       	ldi	r20, 0x00	; 0
    26fc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	a0 e8       	ldi	r26, 0x80	; 128
    2706:	bf e3       	ldi	r27, 0x3F	; 63
    2708:	8b 87       	std	Y+11, r24	; 0x0b
    270a:	9c 87       	std	Y+12, r25	; 0x0c
    270c:	ad 87       	std	Y+13, r26	; 0x0d
    270e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2710:	6b 85       	ldd	r22, Y+11	; 0x0b
    2712:	7c 85       	ldd	r23, Y+12	; 0x0c
    2714:	8d 85       	ldd	r24, Y+13	; 0x0d
    2716:	9e 85       	ldd	r25, Y+14	; 0x0e
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	4a ef       	ldi	r20, 0xFA	; 250
    271e:	54 e4       	ldi	r21, 0x44	; 68
    2720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	8f 83       	std	Y+7, r24	; 0x07
    272a:	98 87       	std	Y+8, r25	; 0x08
    272c:	a9 87       	std	Y+9, r26	; 0x09
    272e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2730:	6f 81       	ldd	r22, Y+7	; 0x07
    2732:	78 85       	ldd	r23, Y+8	; 0x08
    2734:	89 85       	ldd	r24, Y+9	; 0x09
    2736:	9a 85       	ldd	r25, Y+10	; 0x0a
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	40 e8       	ldi	r20, 0x80	; 128
    273e:	5f e3       	ldi	r21, 0x3F	; 63
    2740:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2744:	88 23       	and	r24, r24
    2746:	2c f4       	brge	.+10     	; 0x2752 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	9e 83       	std	Y+6, r25	; 0x06
    274e:	8d 83       	std	Y+5, r24	; 0x05
    2750:	3f c0       	rjmp	.+126    	; 0x27d0 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2752:	6f 81       	ldd	r22, Y+7	; 0x07
    2754:	78 85       	ldd	r23, Y+8	; 0x08
    2756:	89 85       	ldd	r24, Y+9	; 0x09
    2758:	9a 85       	ldd	r25, Y+10	; 0x0a
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	3f ef       	ldi	r19, 0xFF	; 255
    275e:	4f e7       	ldi	r20, 0x7F	; 127
    2760:	57 e4       	ldi	r21, 0x47	; 71
    2762:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2766:	18 16       	cp	r1, r24
    2768:	4c f5       	brge	.+82     	; 0x27bc <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276a:	6b 85       	ldd	r22, Y+11	; 0x0b
    276c:	7c 85       	ldd	r23, Y+12	; 0x0c
    276e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2770:	9e 85       	ldd	r25, Y+14	; 0x0e
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	40 e2       	ldi	r20, 0x20	; 32
    2778:	51 e4       	ldi	r21, 0x41	; 65
    277a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	bc 01       	movw	r22, r24
    2784:	cd 01       	movw	r24, r26
    2786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	9e 83       	std	Y+6, r25	; 0x06
    2790:	8d 83       	std	Y+5, r24	; 0x05
    2792:	0f c0       	rjmp	.+30     	; 0x27b2 <LCD_sendCommand+0x39a>
    2794:	88 ec       	ldi	r24, 0xC8	; 200
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	9c 83       	std	Y+4, r25	; 0x04
    279a:	8b 83       	std	Y+3, r24	; 0x03
    279c:	8b 81       	ldd	r24, Y+3	; 0x03
    279e:	9c 81       	ldd	r25, Y+4	; 0x04
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	f1 f7       	brne	.-4      	; 0x27a0 <LCD_sendCommand+0x388>
    27a4:	9c 83       	std	Y+4, r25	; 0x04
    27a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a8:	8d 81       	ldd	r24, Y+5	; 0x05
    27aa:	9e 81       	ldd	r25, Y+6	; 0x06
    27ac:	01 97       	sbiw	r24, 0x01	; 1
    27ae:	9e 83       	std	Y+6, r25	; 0x06
    27b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b2:	8d 81       	ldd	r24, Y+5	; 0x05
    27b4:	9e 81       	ldd	r25, Y+6	; 0x06
    27b6:	00 97       	sbiw	r24, 0x00	; 0
    27b8:	69 f7       	brne	.-38     	; 0x2794 <LCD_sendCommand+0x37c>
    27ba:	14 c0       	rjmp	.+40     	; 0x27e4 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27bc:	6f 81       	ldd	r22, Y+7	; 0x07
    27be:	78 85       	ldd	r23, Y+8	; 0x08
    27c0:	89 85       	ldd	r24, Y+9	; 0x09
    27c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	9e 83       	std	Y+6, r25	; 0x06
    27ce:	8d 83       	std	Y+5, r24	; 0x05
    27d0:	8d 81       	ldd	r24, Y+5	; 0x05
    27d2:	9e 81       	ldd	r25, Y+6	; 0x06
    27d4:	9a 83       	std	Y+2, r25	; 0x02
    27d6:	89 83       	std	Y+1, r24	; 0x01
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	9a 81       	ldd	r25, Y+2	; 0x02
    27dc:	01 97       	sbiw	r24, 0x01	; 1
    27de:	f1 f7       	brne	.-4      	; 0x27dc <LCD_sendCommand+0x3c4>
    27e0:	9a 83       	std	Y+2, r25	; 0x02
    27e2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    27e4:	e9 96       	adiw	r28, 0x39	; 57
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	cd bf       	out	0x3d, r28	; 61
    27f0:	cf 91       	pop	r28
    27f2:	df 91       	pop	r29
    27f4:	08 95       	ret

000027f6 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62
    27fe:	e9 97       	sbiw	r28, 0x39	; 57
    2800:	0f b6       	in	r0, 0x3f	; 63
    2802:	f8 94       	cli
    2804:	de bf       	out	0x3e, r29	; 62
    2806:	0f be       	out	0x3f, r0	; 63
    2808:	cd bf       	out	0x3d, r28	; 61
    280a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    280c:	82 e0       	ldi	r24, 0x02	; 2
    280e:	60 e0       	ldi	r22, 0x00	; 0
    2810:	41 e0       	ldi	r20, 0x01	; 1
    2812:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	a0 e8       	ldi	r26, 0x80	; 128
    281c:	bf e3       	ldi	r27, 0x3F	; 63
    281e:	8d ab       	std	Y+53, r24	; 0x35
    2820:	9e ab       	std	Y+54, r25	; 0x36
    2822:	af ab       	std	Y+55, r26	; 0x37
    2824:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2826:	6d a9       	ldd	r22, Y+53	; 0x35
    2828:	7e a9       	ldd	r23, Y+54	; 0x36
    282a:	8f a9       	ldd	r24, Y+55	; 0x37
    282c:	98 ad       	ldd	r25, Y+56	; 0x38
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	4a ef       	ldi	r20, 0xFA	; 250
    2834:	54 e4       	ldi	r21, 0x44	; 68
    2836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	89 ab       	std	Y+49, r24	; 0x31
    2840:	9a ab       	std	Y+50, r25	; 0x32
    2842:	ab ab       	std	Y+51, r26	; 0x33
    2844:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2846:	69 a9       	ldd	r22, Y+49	; 0x31
    2848:	7a a9       	ldd	r23, Y+50	; 0x32
    284a:	8b a9       	ldd	r24, Y+51	; 0x33
    284c:	9c a9       	ldd	r25, Y+52	; 0x34
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	40 e8       	ldi	r20, 0x80	; 128
    2854:	5f e3       	ldi	r21, 0x3F	; 63
    2856:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    285a:	88 23       	and	r24, r24
    285c:	2c f4       	brge	.+10     	; 0x2868 <LCD_displayCharacter+0x72>
		__ticks = 1;
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	98 ab       	std	Y+48, r25	; 0x30
    2864:	8f a7       	std	Y+47, r24	; 0x2f
    2866:	3f c0       	rjmp	.+126    	; 0x28e6 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2868:	69 a9       	ldd	r22, Y+49	; 0x31
    286a:	7a a9       	ldd	r23, Y+50	; 0x32
    286c:	8b a9       	ldd	r24, Y+51	; 0x33
    286e:	9c a9       	ldd	r25, Y+52	; 0x34
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	3f ef       	ldi	r19, 0xFF	; 255
    2874:	4f e7       	ldi	r20, 0x7F	; 127
    2876:	57 e4       	ldi	r21, 0x47	; 71
    2878:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    287c:	18 16       	cp	r1, r24
    287e:	4c f5       	brge	.+82     	; 0x28d2 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2880:	6d a9       	ldd	r22, Y+53	; 0x35
    2882:	7e a9       	ldd	r23, Y+54	; 0x36
    2884:	8f a9       	ldd	r24, Y+55	; 0x37
    2886:	98 ad       	ldd	r25, Y+56	; 0x38
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	40 e2       	ldi	r20, 0x20	; 32
    288e:	51 e4       	ldi	r21, 0x41	; 65
    2890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	bc 01       	movw	r22, r24
    289a:	cd 01       	movw	r24, r26
    289c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	98 ab       	std	Y+48, r25	; 0x30
    28a6:	8f a7       	std	Y+47, r24	; 0x2f
    28a8:	0f c0       	rjmp	.+30     	; 0x28c8 <LCD_displayCharacter+0xd2>
    28aa:	88 ec       	ldi	r24, 0xC8	; 200
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	9e a7       	std	Y+46, r25	; 0x2e
    28b0:	8d a7       	std	Y+45, r24	; 0x2d
    28b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    28b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <LCD_displayCharacter+0xc0>
    28ba:	9e a7       	std	Y+46, r25	; 0x2e
    28bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28be:	8f a5       	ldd	r24, Y+47	; 0x2f
    28c0:	98 a9       	ldd	r25, Y+48	; 0x30
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	98 ab       	std	Y+48, r25	; 0x30
    28c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    28ca:	98 a9       	ldd	r25, Y+48	; 0x30
    28cc:	00 97       	sbiw	r24, 0x00	; 0
    28ce:	69 f7       	brne	.-38     	; 0x28aa <LCD_displayCharacter+0xb4>
    28d0:	14 c0       	rjmp	.+40     	; 0x28fa <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d2:	69 a9       	ldd	r22, Y+49	; 0x31
    28d4:	7a a9       	ldd	r23, Y+50	; 0x32
    28d6:	8b a9       	ldd	r24, Y+51	; 0x33
    28d8:	9c a9       	ldd	r25, Y+52	; 0x34
    28da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	98 ab       	std	Y+48, r25	; 0x30
    28e4:	8f a7       	std	Y+47, r24	; 0x2f
    28e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    28e8:	98 a9       	ldd	r25, Y+48	; 0x30
    28ea:	9c a7       	std	Y+44, r25	; 0x2c
    28ec:	8b a7       	std	Y+43, r24	; 0x2b
    28ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    28f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <LCD_displayCharacter+0xfc>
    28f6:	9c a7       	std	Y+44, r25	; 0x2c
    28f8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    28fa:	82 e0       	ldi	r24, 0x02	; 2
    28fc:	61 e0       	ldi	r22, 0x01	; 1
    28fe:	41 e0       	ldi	r20, 0x01	; 1
    2900:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	a0 e8       	ldi	r26, 0x80	; 128
    290a:	bf e3       	ldi	r27, 0x3F	; 63
    290c:	8f a3       	std	Y+39, r24	; 0x27
    290e:	98 a7       	std	Y+40, r25	; 0x28
    2910:	a9 a7       	std	Y+41, r26	; 0x29
    2912:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2914:	6f a1       	ldd	r22, Y+39	; 0x27
    2916:	78 a5       	ldd	r23, Y+40	; 0x28
    2918:	89 a5       	ldd	r24, Y+41	; 0x29
    291a:	9a a5       	ldd	r25, Y+42	; 0x2a
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	4a ef       	ldi	r20, 0xFA	; 250
    2922:	54 e4       	ldi	r21, 0x44	; 68
    2924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	8b a3       	std	Y+35, r24	; 0x23
    292e:	9c a3       	std	Y+36, r25	; 0x24
    2930:	ad a3       	std	Y+37, r26	; 0x25
    2932:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2934:	6b a1       	ldd	r22, Y+35	; 0x23
    2936:	7c a1       	ldd	r23, Y+36	; 0x24
    2938:	8d a1       	ldd	r24, Y+37	; 0x25
    293a:	9e a1       	ldd	r25, Y+38	; 0x26
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	40 e8       	ldi	r20, 0x80	; 128
    2942:	5f e3       	ldi	r21, 0x3F	; 63
    2944:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2948:	88 23       	and	r24, r24
    294a:	2c f4       	brge	.+10     	; 0x2956 <LCD_displayCharacter+0x160>
		__ticks = 1;
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	9a a3       	std	Y+34, r25	; 0x22
    2952:	89 a3       	std	Y+33, r24	; 0x21
    2954:	3f c0       	rjmp	.+126    	; 0x29d4 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2956:	6b a1       	ldd	r22, Y+35	; 0x23
    2958:	7c a1       	ldd	r23, Y+36	; 0x24
    295a:	8d a1       	ldd	r24, Y+37	; 0x25
    295c:	9e a1       	ldd	r25, Y+38	; 0x26
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	3f ef       	ldi	r19, 0xFF	; 255
    2962:	4f e7       	ldi	r20, 0x7F	; 127
    2964:	57 e4       	ldi	r21, 0x47	; 71
    2966:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    296a:	18 16       	cp	r1, r24
    296c:	4c f5       	brge	.+82     	; 0x29c0 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296e:	6f a1       	ldd	r22, Y+39	; 0x27
    2970:	78 a5       	ldd	r23, Y+40	; 0x28
    2972:	89 a5       	ldd	r24, Y+41	; 0x29
    2974:	9a a5       	ldd	r25, Y+42	; 0x2a
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	40 e2       	ldi	r20, 0x20	; 32
    297c:	51 e4       	ldi	r21, 0x41	; 65
    297e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	bc 01       	movw	r22, r24
    2988:	cd 01       	movw	r24, r26
    298a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	9a a3       	std	Y+34, r25	; 0x22
    2994:	89 a3       	std	Y+33, r24	; 0x21
    2996:	0f c0       	rjmp	.+30     	; 0x29b6 <LCD_displayCharacter+0x1c0>
    2998:	88 ec       	ldi	r24, 0xC8	; 200
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	98 a3       	std	Y+32, r25	; 0x20
    299e:	8f 8f       	std	Y+31, r24	; 0x1f
    29a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29a2:	98 a1       	ldd	r25, Y+32	; 0x20
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	f1 f7       	brne	.-4      	; 0x29a4 <LCD_displayCharacter+0x1ae>
    29a8:	98 a3       	std	Y+32, r25	; 0x20
    29aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ac:	89 a1       	ldd	r24, Y+33	; 0x21
    29ae:	9a a1       	ldd	r25, Y+34	; 0x22
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	9a a3       	std	Y+34, r25	; 0x22
    29b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b6:	89 a1       	ldd	r24, Y+33	; 0x21
    29b8:	9a a1       	ldd	r25, Y+34	; 0x22
    29ba:	00 97       	sbiw	r24, 0x00	; 0
    29bc:	69 f7       	brne	.-38     	; 0x2998 <LCD_displayCharacter+0x1a2>
    29be:	14 c0       	rjmp	.+40     	; 0x29e8 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c0:	6b a1       	ldd	r22, Y+35	; 0x23
    29c2:	7c a1       	ldd	r23, Y+36	; 0x24
    29c4:	8d a1       	ldd	r24, Y+37	; 0x25
    29c6:	9e a1       	ldd	r25, Y+38	; 0x26
    29c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	9a a3       	std	Y+34, r25	; 0x22
    29d2:	89 a3       	std	Y+33, r24	; 0x21
    29d4:	89 a1       	ldd	r24, Y+33	; 0x21
    29d6:	9a a1       	ldd	r25, Y+34	; 0x22
    29d8:	9e 8f       	std	Y+30, r25	; 0x1e
    29da:	8d 8f       	std	Y+29, r24	; 0x1d
    29dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	f1 f7       	brne	.-4      	; 0x29e0 <LCD_displayCharacter+0x1ea>
    29e4:	9e 8f       	std	Y+30, r25	; 0x1e
    29e6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	69 ad       	ldd	r22, Y+57	; 0x39
    29ec:	0e 94 58 08 	call	0x10b0	; 0x10b0 <GPIO_writePort>
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	a0 e8       	ldi	r26, 0x80	; 128
    29f6:	bf e3       	ldi	r27, 0x3F	; 63
    29f8:	89 8f       	std	Y+25, r24	; 0x19
    29fa:	9a 8f       	std	Y+26, r25	; 0x1a
    29fc:	ab 8f       	std	Y+27, r26	; 0x1b
    29fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a00:	69 8d       	ldd	r22, Y+25	; 0x19
    2a02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	4a ef       	ldi	r20, 0xFA	; 250
    2a0e:	54 e4       	ldi	r21, 0x44	; 68
    2a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	8d 8b       	std	Y+21, r24	; 0x15
    2a1a:	9e 8b       	std	Y+22, r25	; 0x16
    2a1c:	af 8b       	std	Y+23, r26	; 0x17
    2a1e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a20:	6d 89       	ldd	r22, Y+21	; 0x15
    2a22:	7e 89       	ldd	r23, Y+22	; 0x16
    2a24:	8f 89       	ldd	r24, Y+23	; 0x17
    2a26:	98 8d       	ldd	r25, Y+24	; 0x18
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	40 e8       	ldi	r20, 0x80	; 128
    2a2e:	5f e3       	ldi	r21, 0x3F	; 63
    2a30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a34:	88 23       	and	r24, r24
    2a36:	2c f4       	brge	.+10     	; 0x2a42 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	9c 8b       	std	Y+20, r25	; 0x14
    2a3e:	8b 8b       	std	Y+19, r24	; 0x13
    2a40:	3f c0       	rjmp	.+126    	; 0x2ac0 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2a42:	6d 89       	ldd	r22, Y+21	; 0x15
    2a44:	7e 89       	ldd	r23, Y+22	; 0x16
    2a46:	8f 89       	ldd	r24, Y+23	; 0x17
    2a48:	98 8d       	ldd	r25, Y+24	; 0x18
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	3f ef       	ldi	r19, 0xFF	; 255
    2a4e:	4f e7       	ldi	r20, 0x7F	; 127
    2a50:	57 e4       	ldi	r21, 0x47	; 71
    2a52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a56:	18 16       	cp	r1, r24
    2a58:	4c f5       	brge	.+82     	; 0x2aac <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a5a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	40 e2       	ldi	r20, 0x20	; 32
    2a68:	51 e4       	ldi	r21, 0x41	; 65
    2a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	bc 01       	movw	r22, r24
    2a74:	cd 01       	movw	r24, r26
    2a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	9c 8b       	std	Y+20, r25	; 0x14
    2a80:	8b 8b       	std	Y+19, r24	; 0x13
    2a82:	0f c0       	rjmp	.+30     	; 0x2aa2 <LCD_displayCharacter+0x2ac>
    2a84:	88 ec       	ldi	r24, 0xC8	; 200
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	9a 8b       	std	Y+18, r25	; 0x12
    2a8a:	89 8b       	std	Y+17, r24	; 0x11
    2a8c:	89 89       	ldd	r24, Y+17	; 0x11
    2a8e:	9a 89       	ldd	r25, Y+18	; 0x12
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	f1 f7       	brne	.-4      	; 0x2a90 <LCD_displayCharacter+0x29a>
    2a94:	9a 8b       	std	Y+18, r25	; 0x12
    2a96:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a98:	8b 89       	ldd	r24, Y+19	; 0x13
    2a9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	9c 8b       	std	Y+20, r25	; 0x14
    2aa0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa2:	8b 89       	ldd	r24, Y+19	; 0x13
    2aa4:	9c 89       	ldd	r25, Y+20	; 0x14
    2aa6:	00 97       	sbiw	r24, 0x00	; 0
    2aa8:	69 f7       	brne	.-38     	; 0x2a84 <LCD_displayCharacter+0x28e>
    2aaa:	14 c0       	rjmp	.+40     	; 0x2ad4 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aac:	6d 89       	ldd	r22, Y+21	; 0x15
    2aae:	7e 89       	ldd	r23, Y+22	; 0x16
    2ab0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ab2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	9c 8b       	std	Y+20, r25	; 0x14
    2abe:	8b 8b       	std	Y+19, r24	; 0x13
    2ac0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ac2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ac4:	98 8b       	std	Y+16, r25	; 0x10
    2ac6:	8f 87       	std	Y+15, r24	; 0x0f
    2ac8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aca:	98 89       	ldd	r25, Y+16	; 0x10
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	f1 f7       	brne	.-4      	; 0x2acc <LCD_displayCharacter+0x2d6>
    2ad0:	98 8b       	std	Y+16, r25	; 0x10
    2ad2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2ad4:	82 e0       	ldi	r24, 0x02	; 2
    2ad6:	61 e0       	ldi	r22, 0x01	; 1
    2ad8:	40 e0       	ldi	r20, 0x00	; 0
    2ada:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	a0 e8       	ldi	r26, 0x80	; 128
    2ae4:	bf e3       	ldi	r27, 0x3F	; 63
    2ae6:	8b 87       	std	Y+11, r24	; 0x0b
    2ae8:	9c 87       	std	Y+12, r25	; 0x0c
    2aea:	ad 87       	std	Y+13, r26	; 0x0d
    2aec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aee:	6b 85       	ldd	r22, Y+11	; 0x0b
    2af0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2af2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2af4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	4a ef       	ldi	r20, 0xFA	; 250
    2afc:	54 e4       	ldi	r21, 0x44	; 68
    2afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	8f 83       	std	Y+7, r24	; 0x07
    2b08:	98 87       	std	Y+8, r25	; 0x08
    2b0a:	a9 87       	std	Y+9, r26	; 0x09
    2b0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b10:	78 85       	ldd	r23, Y+8	; 0x08
    2b12:	89 85       	ldd	r24, Y+9	; 0x09
    2b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	40 e8       	ldi	r20, 0x80	; 128
    2b1c:	5f e3       	ldi	r21, 0x3F	; 63
    2b1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b22:	88 23       	and	r24, r24
    2b24:	2c f4       	brge	.+10     	; 0x2b30 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	9e 83       	std	Y+6, r25	; 0x06
    2b2c:	8d 83       	std	Y+5, r24	; 0x05
    2b2e:	3f c0       	rjmp	.+126    	; 0x2bae <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2b30:	6f 81       	ldd	r22, Y+7	; 0x07
    2b32:	78 85       	ldd	r23, Y+8	; 0x08
    2b34:	89 85       	ldd	r24, Y+9	; 0x09
    2b36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	3f ef       	ldi	r19, 0xFF	; 255
    2b3c:	4f e7       	ldi	r20, 0x7F	; 127
    2b3e:	57 e4       	ldi	r21, 0x47	; 71
    2b40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b44:	18 16       	cp	r1, r24
    2b46:	4c f5       	brge	.+82     	; 0x2b9a <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b48:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	40 e2       	ldi	r20, 0x20	; 32
    2b56:	51 e4       	ldi	r21, 0x41	; 65
    2b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	bc 01       	movw	r22, r24
    2b62:	cd 01       	movw	r24, r26
    2b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	9e 83       	std	Y+6, r25	; 0x06
    2b6e:	8d 83       	std	Y+5, r24	; 0x05
    2b70:	0f c0       	rjmp	.+30     	; 0x2b90 <LCD_displayCharacter+0x39a>
    2b72:	88 ec       	ldi	r24, 0xC8	; 200
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	9c 83       	std	Y+4, r25	; 0x04
    2b78:	8b 83       	std	Y+3, r24	; 0x03
    2b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	f1 f7       	brne	.-4      	; 0x2b7e <LCD_displayCharacter+0x388>
    2b82:	9c 83       	std	Y+4, r25	; 0x04
    2b84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b86:	8d 81       	ldd	r24, Y+5	; 0x05
    2b88:	9e 81       	ldd	r25, Y+6	; 0x06
    2b8a:	01 97       	sbiw	r24, 0x01	; 1
    2b8c:	9e 83       	std	Y+6, r25	; 0x06
    2b8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b90:	8d 81       	ldd	r24, Y+5	; 0x05
    2b92:	9e 81       	ldd	r25, Y+6	; 0x06
    2b94:	00 97       	sbiw	r24, 0x00	; 0
    2b96:	69 f7       	brne	.-38     	; 0x2b72 <LCD_displayCharacter+0x37c>
    2b98:	14 c0       	rjmp	.+40     	; 0x2bc2 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b9c:	78 85       	ldd	r23, Y+8	; 0x08
    2b9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	9e 83       	std	Y+6, r25	; 0x06
    2bac:	8d 83       	std	Y+5, r24	; 0x05
    2bae:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb2:	9a 83       	std	Y+2, r25	; 0x02
    2bb4:	89 83       	std	Y+1, r24	; 0x01
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bba:	01 97       	sbiw	r24, 0x01	; 1
    2bbc:	f1 f7       	brne	.-4      	; 0x2bba <LCD_displayCharacter+0x3c4>
    2bbe:	9a 83       	std	Y+2, r25	; 0x02
    2bc0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2bc2:	e9 96       	adiw	r28, 0x39	; 57
    2bc4:	0f b6       	in	r0, 0x3f	; 63
    2bc6:	f8 94       	cli
    2bc8:	de bf       	out	0x3e, r29	; 62
    2bca:	0f be       	out	0x3f, r0	; 63
    2bcc:	cd bf       	out	0x3d, r28	; 61
    2bce:	cf 91       	pop	r28
    2bd0:	df 91       	pop	r29
    2bd2:	08 95       	ret

00002bd4 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2bd4:	df 93       	push	r29
    2bd6:	cf 93       	push	r28
    2bd8:	00 d0       	rcall	.+0      	; 0x2bda <LCD_displayString+0x6>
    2bda:	0f 92       	push	r0
    2bdc:	cd b7       	in	r28, 0x3d	; 61
    2bde:	de b7       	in	r29, 0x3e	; 62
    2be0:	9b 83       	std	Y+3, r25	; 0x03
    2be2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2be4:	19 82       	std	Y+1, r1	; 0x01
    2be6:	0e c0       	rjmp	.+28     	; 0x2c04 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2be8:	89 81       	ldd	r24, Y+1	; 0x01
    2bea:	28 2f       	mov	r18, r24
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	e2 0f       	add	r30, r18
    2bf6:	f3 1f       	adc	r31, r19
    2bf8:	80 81       	ld	r24, Z
    2bfa:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <LCD_displayCharacter>
		i++;
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	8f 5f       	subi	r24, 0xFF	; 255
    2c02:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2c04:	89 81       	ldd	r24, Y+1	; 0x01
    2c06:	28 2f       	mov	r18, r24
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c0e:	fc 01       	movw	r30, r24
    2c10:	e2 0f       	add	r30, r18
    2c12:	f3 1f       	adc	r31, r19
    2c14:	80 81       	ld	r24, Z
    2c16:	88 23       	and	r24, r24
    2c18:	39 f7       	brne	.-50     	; 0x2be8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	cf 91       	pop	r28
    2c22:	df 91       	pop	r29
    2c24:	08 95       	ret

00002c26 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2c26:	df 93       	push	r29
    2c28:	cf 93       	push	r28
    2c2a:	00 d0       	rcall	.+0      	; 0x2c2c <LCD_moveCursor+0x6>
    2c2c:	00 d0       	rcall	.+0      	; 0x2c2e <LCD_moveCursor+0x8>
    2c2e:	0f 92       	push	r0
    2c30:	cd b7       	in	r28, 0x3d	; 61
    2c32:	de b7       	in	r29, 0x3e	; 62
    2c34:	8a 83       	std	Y+2, r24	; 0x02
    2c36:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2c38:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3a:	28 2f       	mov	r18, r24
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	3d 83       	std	Y+5, r19	; 0x05
    2c40:	2c 83       	std	Y+4, r18	; 0x04
    2c42:	8c 81       	ldd	r24, Y+4	; 0x04
    2c44:	9d 81       	ldd	r25, Y+5	; 0x05
    2c46:	81 30       	cpi	r24, 0x01	; 1
    2c48:	91 05       	cpc	r25, r1
    2c4a:	c1 f0       	breq	.+48     	; 0x2c7c <LCD_moveCursor+0x56>
    2c4c:	2c 81       	ldd	r18, Y+4	; 0x04
    2c4e:	3d 81       	ldd	r19, Y+5	; 0x05
    2c50:	22 30       	cpi	r18, 0x02	; 2
    2c52:	31 05       	cpc	r19, r1
    2c54:	2c f4       	brge	.+10     	; 0x2c60 <LCD_moveCursor+0x3a>
    2c56:	8c 81       	ldd	r24, Y+4	; 0x04
    2c58:	9d 81       	ldd	r25, Y+5	; 0x05
    2c5a:	00 97       	sbiw	r24, 0x00	; 0
    2c5c:	61 f0       	breq	.+24     	; 0x2c76 <LCD_moveCursor+0x50>
    2c5e:	19 c0       	rjmp	.+50     	; 0x2c92 <LCD_moveCursor+0x6c>
    2c60:	2c 81       	ldd	r18, Y+4	; 0x04
    2c62:	3d 81       	ldd	r19, Y+5	; 0x05
    2c64:	22 30       	cpi	r18, 0x02	; 2
    2c66:	31 05       	cpc	r19, r1
    2c68:	69 f0       	breq	.+26     	; 0x2c84 <LCD_moveCursor+0x5e>
    2c6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c6c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c6e:	83 30       	cpi	r24, 0x03	; 3
    2c70:	91 05       	cpc	r25, r1
    2c72:	61 f0       	breq	.+24     	; 0x2c8c <LCD_moveCursor+0x66>
    2c74:	0e c0       	rjmp	.+28     	; 0x2c92 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2c76:	8b 81       	ldd	r24, Y+3	; 0x03
    2c78:	89 83       	std	Y+1, r24	; 0x01
    2c7a:	0b c0       	rjmp	.+22     	; 0x2c92 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7e:	80 5c       	subi	r24, 0xC0	; 192
    2c80:	89 83       	std	Y+1, r24	; 0x01
    2c82:	07 c0       	rjmp	.+14     	; 0x2c92 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2c84:	8b 81       	ldd	r24, Y+3	; 0x03
    2c86:	80 5f       	subi	r24, 0xF0	; 240
    2c88:	89 83       	std	Y+1, r24	; 0x01
    2c8a:	03 c0       	rjmp	.+6      	; 0x2c92 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8e:	80 5b       	subi	r24, 0xB0	; 176
    2c90:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	80 68       	ori	r24, 0x80	; 128
    2c96:	0e 94 0c 12 	call	0x2418	; 0x2418 <LCD_sendCommand>
}
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
    2ca2:	0f 90       	pop	r0
    2ca4:	cf 91       	pop	r28
    2ca6:	df 91       	pop	r29
    2ca8:	08 95       	ret

00002caa <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2caa:	df 93       	push	r29
    2cac:	cf 93       	push	r28
    2cae:	00 d0       	rcall	.+0      	; 0x2cb0 <LCD_displayStringRowColumn+0x6>
    2cb0:	00 d0       	rcall	.+0      	; 0x2cb2 <LCD_displayStringRowColumn+0x8>
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
    2cb6:	89 83       	std	Y+1, r24	; 0x01
    2cb8:	6a 83       	std	Y+2, r22	; 0x02
    2cba:	5c 83       	std	Y+4, r21	; 0x04
    2cbc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	6a 81       	ldd	r22, Y+2	; 0x02
    2cc2:	0e 94 13 16 	call	0x2c26	; 0x2c26 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cca:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <LCD_displayString>
}
    2cce:	0f 90       	pop	r0
    2cd0:	0f 90       	pop	r0
    2cd2:	0f 90       	pop	r0
    2cd4:	0f 90       	pop	r0
    2cd6:	cf 91       	pop	r28
    2cd8:	df 91       	pop	r29
    2cda:	08 95       	ret

00002cdc <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2cdc:	df 93       	push	r29
    2cde:	cf 93       	push	r28
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62
    2ce4:	62 97       	sbiw	r28, 0x12	; 18
    2ce6:	0f b6       	in	r0, 0x3f	; 63
    2ce8:	f8 94       	cli
    2cea:	de bf       	out	0x3e, r29	; 62
    2cec:	0f be       	out	0x3f, r0	; 63
    2cee:	cd bf       	out	0x3d, r28	; 61
    2cf0:	9a 8b       	std	Y+18, r25	; 0x12
    2cf2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2cf4:	89 89       	ldd	r24, Y+17	; 0x11
    2cf6:	9a 89       	ldd	r25, Y+18	; 0x12
    2cf8:	9e 01       	movw	r18, r28
    2cfa:	2f 5f       	subi	r18, 0xFF	; 255
    2cfc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cfe:	b9 01       	movw	r22, r18
    2d00:	4a e0       	ldi	r20, 0x0A	; 10
    2d02:	50 e0       	ldi	r21, 0x00	; 0
    2d04:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <itoa>
   LCD_displayString(buff); /* Display the string */
    2d08:	ce 01       	movw	r24, r28
    2d0a:	01 96       	adiw	r24, 0x01	; 1
    2d0c:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <LCD_displayString>
}
    2d10:	62 96       	adiw	r28, 0x12	; 18
    2d12:	0f b6       	in	r0, 0x3f	; 63
    2d14:	f8 94       	cli
    2d16:	de bf       	out	0x3e, r29	; 62
    2d18:	0f be       	out	0x3f, r0	; 63
    2d1a:	cd bf       	out	0x3d, r28	; 61
    2d1c:	cf 91       	pop	r28
    2d1e:	df 91       	pop	r29
    2d20:	08 95       	ret

00002d22 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2d22:	df 93       	push	r29
    2d24:	cf 93       	push	r28
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	0e 94 0c 12 	call	0x2418	; 0x2418 <LCD_sendCommand>
}
    2d30:	cf 91       	pop	r28
    2d32:	df 91       	pop	r29
    2d34:	08 95       	ret

00002d36 <__vector_11>:
/*------------------------------------------------------------------------------
 *  							Interrupt Service Routines
 *----------------------------------------------------------------------------*/

ISR(TIMER0_OVF_vect)
{
    2d36:	1f 92       	push	r1
    2d38:	0f 92       	push	r0
    2d3a:	0f b6       	in	r0, 0x3f	; 63
    2d3c:	0f 92       	push	r0
    2d3e:	11 24       	eor	r1, r1
    2d40:	2f 93       	push	r18
    2d42:	3f 93       	push	r19
    2d44:	4f 93       	push	r20
    2d46:	5f 93       	push	r21
    2d48:	6f 93       	push	r22
    2d4a:	7f 93       	push	r23
    2d4c:	8f 93       	push	r24
    2d4e:	9f 93       	push	r25
    2d50:	af 93       	push	r26
    2d52:	bf 93       	push	r27
    2d54:	ef 93       	push	r30
    2d56:	ff 93       	push	r31
    2d58:	df 93       	push	r29
    2d5a:	cf 93       	push	r28
    2d5c:	cd b7       	in	r28, 0x3d	; 61
    2d5e:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr[0] != NULL_PTR) {
    2d60:	80 91 45 01 	lds	r24, 0x0145
    2d64:	90 91 46 01 	lds	r25, 0x0146
    2d68:	00 97       	sbiw	r24, 0x00	; 0
    2d6a:	29 f0       	breq	.+10     	; 0x2d76 <__vector_11+0x40>
        (*g_callBackPtr[0])();
    2d6c:	e0 91 45 01 	lds	r30, 0x0145
    2d70:	f0 91 46 01 	lds	r31, 0x0146
    2d74:	09 95       	icall
    }
}
    2d76:	cf 91       	pop	r28
    2d78:	df 91       	pop	r29
    2d7a:	ff 91       	pop	r31
    2d7c:	ef 91       	pop	r30
    2d7e:	bf 91       	pop	r27
    2d80:	af 91       	pop	r26
    2d82:	9f 91       	pop	r25
    2d84:	8f 91       	pop	r24
    2d86:	7f 91       	pop	r23
    2d88:	6f 91       	pop	r22
    2d8a:	5f 91       	pop	r21
    2d8c:	4f 91       	pop	r20
    2d8e:	3f 91       	pop	r19
    2d90:	2f 91       	pop	r18
    2d92:	0f 90       	pop	r0
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	0f 90       	pop	r0
    2d98:	1f 90       	pop	r1
    2d9a:	18 95       	reti

00002d9c <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    2d9c:	1f 92       	push	r1
    2d9e:	0f 92       	push	r0
    2da0:	0f b6       	in	r0, 0x3f	; 63
    2da2:	0f 92       	push	r0
    2da4:	11 24       	eor	r1, r1
    2da6:	2f 93       	push	r18
    2da8:	3f 93       	push	r19
    2daa:	4f 93       	push	r20
    2dac:	5f 93       	push	r21
    2dae:	6f 93       	push	r22
    2db0:	7f 93       	push	r23
    2db2:	8f 93       	push	r24
    2db4:	9f 93       	push	r25
    2db6:	af 93       	push	r26
    2db8:	bf 93       	push	r27
    2dba:	ef 93       	push	r30
    2dbc:	ff 93       	push	r31
    2dbe:	df 93       	push	r29
    2dc0:	cf 93       	push	r28
    2dc2:	cd b7       	in	r28, 0x3d	; 61
    2dc4:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr[0] != NULL_PTR) {
    2dc6:	80 91 45 01 	lds	r24, 0x0145
    2dca:	90 91 46 01 	lds	r25, 0x0146
    2dce:	00 97       	sbiw	r24, 0x00	; 0
    2dd0:	29 f0       	breq	.+10     	; 0x2ddc <__vector_10+0x40>
        (*g_callBackPtr[0])();
    2dd2:	e0 91 45 01 	lds	r30, 0x0145
    2dd6:	f0 91 46 01 	lds	r31, 0x0146
    2dda:	09 95       	icall
    }
}
    2ddc:	cf 91       	pop	r28
    2dde:	df 91       	pop	r29
    2de0:	ff 91       	pop	r31
    2de2:	ef 91       	pop	r30
    2de4:	bf 91       	pop	r27
    2de6:	af 91       	pop	r26
    2de8:	9f 91       	pop	r25
    2dea:	8f 91       	pop	r24
    2dec:	7f 91       	pop	r23
    2dee:	6f 91       	pop	r22
    2df0:	5f 91       	pop	r21
    2df2:	4f 91       	pop	r20
    2df4:	3f 91       	pop	r19
    2df6:	2f 91       	pop	r18
    2df8:	0f 90       	pop	r0
    2dfa:	0f be       	out	0x3f, r0	; 63
    2dfc:	0f 90       	pop	r0
    2dfe:	1f 90       	pop	r1
    2e00:	18 95       	reti

00002e02 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    2e02:	1f 92       	push	r1
    2e04:	0f 92       	push	r0
    2e06:	0f b6       	in	r0, 0x3f	; 63
    2e08:	0f 92       	push	r0
    2e0a:	11 24       	eor	r1, r1
    2e0c:	2f 93       	push	r18
    2e0e:	3f 93       	push	r19
    2e10:	4f 93       	push	r20
    2e12:	5f 93       	push	r21
    2e14:	6f 93       	push	r22
    2e16:	7f 93       	push	r23
    2e18:	8f 93       	push	r24
    2e1a:	9f 93       	push	r25
    2e1c:	af 93       	push	r26
    2e1e:	bf 93       	push	r27
    2e20:	ef 93       	push	r30
    2e22:	ff 93       	push	r31
    2e24:	df 93       	push	r29
    2e26:	cf 93       	push	r28
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr[1] != NULL_PTR) {
    2e2c:	80 91 47 01 	lds	r24, 0x0147
    2e30:	90 91 48 01 	lds	r25, 0x0148
    2e34:	00 97       	sbiw	r24, 0x00	; 0
    2e36:	29 f0       	breq	.+10     	; 0x2e42 <__vector_9+0x40>
        (*g_callBackPtr[1])();
    2e38:	e0 91 47 01 	lds	r30, 0x0147
    2e3c:	f0 91 48 01 	lds	r31, 0x0148
    2e40:	09 95       	icall
    }
}
    2e42:	cf 91       	pop	r28
    2e44:	df 91       	pop	r29
    2e46:	ff 91       	pop	r31
    2e48:	ef 91       	pop	r30
    2e4a:	bf 91       	pop	r27
    2e4c:	af 91       	pop	r26
    2e4e:	9f 91       	pop	r25
    2e50:	8f 91       	pop	r24
    2e52:	7f 91       	pop	r23
    2e54:	6f 91       	pop	r22
    2e56:	5f 91       	pop	r21
    2e58:	4f 91       	pop	r20
    2e5a:	3f 91       	pop	r19
    2e5c:	2f 91       	pop	r18
    2e5e:	0f 90       	pop	r0
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	0f 90       	pop	r0
    2e64:	1f 90       	pop	r1
    2e66:	18 95       	reti

00002e68 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    2e68:	1f 92       	push	r1
    2e6a:	0f 92       	push	r0
    2e6c:	0f b6       	in	r0, 0x3f	; 63
    2e6e:	0f 92       	push	r0
    2e70:	11 24       	eor	r1, r1
    2e72:	2f 93       	push	r18
    2e74:	3f 93       	push	r19
    2e76:	4f 93       	push	r20
    2e78:	5f 93       	push	r21
    2e7a:	6f 93       	push	r22
    2e7c:	7f 93       	push	r23
    2e7e:	8f 93       	push	r24
    2e80:	9f 93       	push	r25
    2e82:	af 93       	push	r26
    2e84:	bf 93       	push	r27
    2e86:	ef 93       	push	r30
    2e88:	ff 93       	push	r31
    2e8a:	df 93       	push	r29
    2e8c:	cf 93       	push	r28
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr[1] != NULL_PTR) {
    2e92:	80 91 47 01 	lds	r24, 0x0147
    2e96:	90 91 48 01 	lds	r25, 0x0148
    2e9a:	00 97       	sbiw	r24, 0x00	; 0
    2e9c:	29 f0       	breq	.+10     	; 0x2ea8 <__vector_7+0x40>
        (*g_callBackPtr[1])();
    2e9e:	e0 91 47 01 	lds	r30, 0x0147
    2ea2:	f0 91 48 01 	lds	r31, 0x0148
    2ea6:	09 95       	icall
    }
}
    2ea8:	cf 91       	pop	r28
    2eaa:	df 91       	pop	r29
    2eac:	ff 91       	pop	r31
    2eae:	ef 91       	pop	r30
    2eb0:	bf 91       	pop	r27
    2eb2:	af 91       	pop	r26
    2eb4:	9f 91       	pop	r25
    2eb6:	8f 91       	pop	r24
    2eb8:	7f 91       	pop	r23
    2eba:	6f 91       	pop	r22
    2ebc:	5f 91       	pop	r21
    2ebe:	4f 91       	pop	r20
    2ec0:	3f 91       	pop	r19
    2ec2:	2f 91       	pop	r18
    2ec4:	0f 90       	pop	r0
    2ec6:	0f be       	out	0x3f, r0	; 63
    2ec8:	0f 90       	pop	r0
    2eca:	1f 90       	pop	r1
    2ecc:	18 95       	reti

00002ece <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    2ece:	1f 92       	push	r1
    2ed0:	0f 92       	push	r0
    2ed2:	0f b6       	in	r0, 0x3f	; 63
    2ed4:	0f 92       	push	r0
    2ed6:	11 24       	eor	r1, r1
    2ed8:	2f 93       	push	r18
    2eda:	3f 93       	push	r19
    2edc:	4f 93       	push	r20
    2ede:	5f 93       	push	r21
    2ee0:	6f 93       	push	r22
    2ee2:	7f 93       	push	r23
    2ee4:	8f 93       	push	r24
    2ee6:	9f 93       	push	r25
    2ee8:	af 93       	push	r26
    2eea:	bf 93       	push	r27
    2eec:	ef 93       	push	r30
    2eee:	ff 93       	push	r31
    2ef0:	df 93       	push	r29
    2ef2:	cf 93       	push	r28
    2ef4:	cd b7       	in	r28, 0x3d	; 61
    2ef6:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr[2] != NULL_PTR) {
    2ef8:	80 91 49 01 	lds	r24, 0x0149
    2efc:	90 91 4a 01 	lds	r25, 0x014A
    2f00:	00 97       	sbiw	r24, 0x00	; 0
    2f02:	29 f0       	breq	.+10     	; 0x2f0e <__vector_5+0x40>
        (*g_callBackPtr[2])();
    2f04:	e0 91 49 01 	lds	r30, 0x0149
    2f08:	f0 91 4a 01 	lds	r31, 0x014A
    2f0c:	09 95       	icall
    }
}
    2f0e:	cf 91       	pop	r28
    2f10:	df 91       	pop	r29
    2f12:	ff 91       	pop	r31
    2f14:	ef 91       	pop	r30
    2f16:	bf 91       	pop	r27
    2f18:	af 91       	pop	r26
    2f1a:	9f 91       	pop	r25
    2f1c:	8f 91       	pop	r24
    2f1e:	7f 91       	pop	r23
    2f20:	6f 91       	pop	r22
    2f22:	5f 91       	pop	r21
    2f24:	4f 91       	pop	r20
    2f26:	3f 91       	pop	r19
    2f28:	2f 91       	pop	r18
    2f2a:	0f 90       	pop	r0
    2f2c:	0f be       	out	0x3f, r0	; 63
    2f2e:	0f 90       	pop	r0
    2f30:	1f 90       	pop	r1
    2f32:	18 95       	reti

00002f34 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    2f34:	1f 92       	push	r1
    2f36:	0f 92       	push	r0
    2f38:	0f b6       	in	r0, 0x3f	; 63
    2f3a:	0f 92       	push	r0
    2f3c:	11 24       	eor	r1, r1
    2f3e:	2f 93       	push	r18
    2f40:	3f 93       	push	r19
    2f42:	4f 93       	push	r20
    2f44:	5f 93       	push	r21
    2f46:	6f 93       	push	r22
    2f48:	7f 93       	push	r23
    2f4a:	8f 93       	push	r24
    2f4c:	9f 93       	push	r25
    2f4e:	af 93       	push	r26
    2f50:	bf 93       	push	r27
    2f52:	ef 93       	push	r30
    2f54:	ff 93       	push	r31
    2f56:	df 93       	push	r29
    2f58:	cf 93       	push	r28
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr[2] != NULL_PTR) {
    2f5e:	80 91 49 01 	lds	r24, 0x0149
    2f62:	90 91 4a 01 	lds	r25, 0x014A
    2f66:	00 97       	sbiw	r24, 0x00	; 0
    2f68:	29 f0       	breq	.+10     	; 0x2f74 <__vector_4+0x40>
        (*g_callBackPtr[2])();
    2f6a:	e0 91 49 01 	lds	r30, 0x0149
    2f6e:	f0 91 4a 01 	lds	r31, 0x014A
    2f72:	09 95       	icall
    }
}
    2f74:	cf 91       	pop	r28
    2f76:	df 91       	pop	r29
    2f78:	ff 91       	pop	r31
    2f7a:	ef 91       	pop	r30
    2f7c:	bf 91       	pop	r27
    2f7e:	af 91       	pop	r26
    2f80:	9f 91       	pop	r25
    2f82:	8f 91       	pop	r24
    2f84:	7f 91       	pop	r23
    2f86:	6f 91       	pop	r22
    2f88:	5f 91       	pop	r21
    2f8a:	4f 91       	pop	r20
    2f8c:	3f 91       	pop	r19
    2f8e:	2f 91       	pop	r18
    2f90:	0f 90       	pop	r0
    2f92:	0f be       	out	0x3f, r0	; 63
    2f94:	0f 90       	pop	r0
    2f96:	1f 90       	pop	r1
    2f98:	18 95       	reti

00002f9a <Timer_init>:
/*
 * Description:
 * Function to initialize the timer with specific configurations
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    2f9a:	df 93       	push	r29
    2f9c:	cf 93       	push	r28
    2f9e:	00 d0       	rcall	.+0      	; 0x2fa0 <Timer_init+0x6>
    2fa0:	cd b7       	in	r28, 0x3d	; 61
    2fa2:	de b7       	in	r29, 0x3e	; 62
    2fa4:	9a 83       	std	Y+2, r25	; 0x02
    2fa6:	89 83       	std	Y+1, r24	; 0x01
    if (Config_Ptr->timer_ID == TIMER_timer0)
    2fa8:	e9 81       	ldd	r30, Y+1	; 0x01
    2faa:	fa 81       	ldd	r31, Y+2	; 0x02
    2fac:	86 81       	ldd	r24, Z+6	; 0x06
    2fae:	88 23       	and	r24, r24
    2fb0:	09 f0       	breq	.+2      	; 0x2fb4 <Timer_init+0x1a>
    2fb2:	6c c0       	rjmp	.+216    	; 0x308c <Timer_init+0xf2>
    {
        TCNT0 = Config_Ptr->timer_InitialValue;
    2fb4:	a2 e5       	ldi	r26, 0x52	; 82
    2fb6:	b0 e0       	ldi	r27, 0x00	; 0
    2fb8:	e9 81       	ldd	r30, Y+1	; 0x01
    2fba:	fa 81       	ldd	r31, Y+2	; 0x02
    2fbc:	80 81       	ld	r24, Z
    2fbe:	91 81       	ldd	r25, Z+1	; 0x01
    2fc0:	8c 93       	st	X, r24

        /*
         * This calculation is used to determine prescalar since Timer 2 and 0/1 have different values of prescalar
         */
		if(Config_Ptr->timer_clock > 5)
    2fc2:	e9 81       	ldd	r30, Y+1	; 0x01
    2fc4:	fa 81       	ldd	r31, Y+2	; 0x02
    2fc6:	87 81       	ldd	r24, Z+7	; 0x07
    2fc8:	86 30       	cpi	r24, 0x06	; 6
    2fca:	70 f0       	brcs	.+28     	; 0x2fe8 <Timer_init+0x4e>
			TCCR0 = (Config_Ptr->timer_clock - 2) | (TCCR0 & 0xF8);
    2fcc:	a3 e5       	ldi	r26, 0x53	; 83
    2fce:	b0 e0       	ldi	r27, 0x00	; 0
    2fd0:	e9 81       	ldd	r30, Y+1	; 0x01
    2fd2:	fa 81       	ldd	r31, Y+2	; 0x02
    2fd4:	87 81       	ldd	r24, Z+7	; 0x07
    2fd6:	82 50       	subi	r24, 0x02	; 2
    2fd8:	98 2f       	mov	r25, r24
    2fda:	e3 e5       	ldi	r30, 0x53	; 83
    2fdc:	f0 e0       	ldi	r31, 0x00	; 0
    2fde:	80 81       	ld	r24, Z
    2fe0:	88 7f       	andi	r24, 0xF8	; 248
    2fe2:	89 2b       	or	r24, r25
    2fe4:	8c 93       	st	X, r24
    2fe6:	1f c0       	rjmp	.+62     	; 0x3026 <Timer_init+0x8c>
		else if(Config_Ptr->timer_clock > 3)
    2fe8:	e9 81       	ldd	r30, Y+1	; 0x01
    2fea:	fa 81       	ldd	r31, Y+2	; 0x02
    2fec:	87 81       	ldd	r24, Z+7	; 0x07
    2fee:	84 30       	cpi	r24, 0x04	; 4
    2ff0:	70 f0       	brcs	.+28     	; 0x300e <Timer_init+0x74>
			TCCR0 = (Config_Ptr->timer_clock - 1) | (TCCR0 & 0xF8);
    2ff2:	a3 e5       	ldi	r26, 0x53	; 83
    2ff4:	b0 e0       	ldi	r27, 0x00	; 0
    2ff6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ff8:	fa 81       	ldd	r31, Y+2	; 0x02
    2ffa:	87 81       	ldd	r24, Z+7	; 0x07
    2ffc:	81 50       	subi	r24, 0x01	; 1
    2ffe:	98 2f       	mov	r25, r24
    3000:	e3 e5       	ldi	r30, 0x53	; 83
    3002:	f0 e0       	ldi	r31, 0x00	; 0
    3004:	80 81       	ld	r24, Z
    3006:	88 7f       	andi	r24, 0xF8	; 248
    3008:	89 2b       	or	r24, r25
    300a:	8c 93       	st	X, r24
    300c:	0c c0       	rjmp	.+24     	; 0x3026 <Timer_init+0x8c>
		else
			TCCR0 = (Config_Ptr->timer_clock) | (TCCR0 & 0xF8);
    300e:	a3 e5       	ldi	r26, 0x53	; 83
    3010:	b0 e0       	ldi	r27, 0x00	; 0
    3012:	e9 81       	ldd	r30, Y+1	; 0x01
    3014:	fa 81       	ldd	r31, Y+2	; 0x02
    3016:	87 81       	ldd	r24, Z+7	; 0x07
    3018:	98 2f       	mov	r25, r24
    301a:	e3 e5       	ldi	r30, 0x53	; 83
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	80 81       	ld	r24, Z
    3020:	88 7f       	andi	r24, 0xF8	; 248
    3022:	89 2b       	or	r24, r25
    3024:	8c 93       	st	X, r24

        TCCR0 |= (1 << FOC0); /* Force Output Compare for non-PWM modes */
    3026:	a3 e5       	ldi	r26, 0x53	; 83
    3028:	b0 e0       	ldi	r27, 0x00	; 0
    302a:	e3 e5       	ldi	r30, 0x53	; 83
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	80 81       	ld	r24, Z
    3030:	80 68       	ori	r24, 0x80	; 128
    3032:	8c 93       	st	X, r24

        if (Config_Ptr->timer_mode == MODE_normal)
    3034:	e9 81       	ldd	r30, Y+1	; 0x01
    3036:	fa 81       	ldd	r31, Y+2	; 0x02
    3038:	80 85       	ldd	r24, Z+8	; 0x08
    303a:	88 23       	and	r24, r24
    303c:	41 f4       	brne	.+16     	; 0x304e <Timer_init+0xb4>
        {
        	/*
        	 * Flag of Normal mode to 1
        	 */
			TIMSK |= 1 << TOIE0;
    303e:	a9 e5       	ldi	r26, 0x59	; 89
    3040:	b0 e0       	ldi	r27, 0x00	; 0
    3042:	e9 e5       	ldi	r30, 0x59	; 89
    3044:	f0 e0       	ldi	r31, 0x00	; 0
    3046:	80 81       	ld	r24, Z
    3048:	81 60       	ori	r24, 0x01	; 1
    304a:	8c 93       	st	X, r24
    304c:	db c0       	rjmp	.+438    	; 0x3204 <Timer_init+0x26a>
        }
        else if (Config_Ptr->timer_mode == MODE_CTC)
    304e:	e9 81       	ldd	r30, Y+1	; 0x01
    3050:	fa 81       	ldd	r31, Y+2	; 0x02
    3052:	80 85       	ldd	r24, Z+8	; 0x08
    3054:	81 30       	cpi	r24, 0x01	; 1
    3056:	09 f0       	breq	.+2      	; 0x305a <Timer_init+0xc0>
    3058:	d5 c0       	rjmp	.+426    	; 0x3204 <Timer_init+0x26a>
        	/*
        	 * WGM01 = 1 to activate Compare mode
        	 * Flag of Compare mode to 1
        	 * Set the OCR0 to the inputed compare value
        	 */
        	TCCR0 |= 1 << WGM01;
    305a:	a3 e5       	ldi	r26, 0x53	; 83
    305c:	b0 e0       	ldi	r27, 0x00	; 0
    305e:	e3 e5       	ldi	r30, 0x53	; 83
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	80 81       	ld	r24, Z
    3064:	88 60       	ori	r24, 0x08	; 8
    3066:	8c 93       	st	X, r24

            OCR0 = Config_Ptr->timer_compare_MatchValue;
    3068:	2c e5       	ldi	r18, 0x5C	; 92
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	e9 81       	ldd	r30, Y+1	; 0x01
    306e:	fa 81       	ldd	r31, Y+2	; 0x02
    3070:	82 81       	ldd	r24, Z+2	; 0x02
    3072:	93 81       	ldd	r25, Z+3	; 0x03
    3074:	a4 81       	ldd	r26, Z+4	; 0x04
    3076:	b5 81       	ldd	r27, Z+5	; 0x05
    3078:	f9 01       	movw	r30, r18
    307a:	80 83       	st	Z, r24

            TIMSK |= 1 << OCIE0;
    307c:	a9 e5       	ldi	r26, 0x59	; 89
    307e:	b0 e0       	ldi	r27, 0x00	; 0
    3080:	e9 e5       	ldi	r30, 0x59	; 89
    3082:	f0 e0       	ldi	r31, 0x00	; 0
    3084:	80 81       	ld	r24, Z
    3086:	82 60       	ori	r24, 0x02	; 2
    3088:	8c 93       	st	X, r24
    308a:	bc c0       	rjmp	.+376    	; 0x3204 <Timer_init+0x26a>
        }
    }

    else if (Config_Ptr->timer_ID == TIMER_timer1)
    308c:	e9 81       	ldd	r30, Y+1	; 0x01
    308e:	fa 81       	ldd	r31, Y+2	; 0x02
    3090:	86 81       	ldd	r24, Z+6	; 0x06
    3092:	81 30       	cpi	r24, 0x01	; 1
    3094:	09 f0       	breq	.+2      	; 0x3098 <Timer_init+0xfe>
    3096:	6c c0       	rjmp	.+216    	; 0x3170 <Timer_init+0x1d6>
    {
        TCNT1 = Config_Ptr->timer_InitialValue;
    3098:	ac e4       	ldi	r26, 0x4C	; 76
    309a:	b0 e0       	ldi	r27, 0x00	; 0
    309c:	e9 81       	ldd	r30, Y+1	; 0x01
    309e:	fa 81       	ldd	r31, Y+2	; 0x02
    30a0:	80 81       	ld	r24, Z
    30a2:	91 81       	ldd	r25, Z+1	; 0x01
    30a4:	11 96       	adiw	r26, 0x01	; 1
    30a6:	9c 93       	st	X, r25
    30a8:	8e 93       	st	-X, r24

        TCCR1A = 1 << FOC1A; /* Force Output Compare for non-PWM modes */
    30aa:	ef e4       	ldi	r30, 0x4F	; 79
    30ac:	f0 e0       	ldi	r31, 0x00	; 0
    30ae:	88 e0       	ldi	r24, 0x08	; 8
    30b0:	80 83       	st	Z, r24

        /*
         * This calculation is used to determine prescalar since Timer 2 and 0/1 have different values of prescalar
         */
		if(Config_Ptr->timer_clock > 5)
    30b2:	e9 81       	ldd	r30, Y+1	; 0x01
    30b4:	fa 81       	ldd	r31, Y+2	; 0x02
    30b6:	87 81       	ldd	r24, Z+7	; 0x07
    30b8:	86 30       	cpi	r24, 0x06	; 6
    30ba:	70 f0       	brcs	.+28     	; 0x30d8 <Timer_init+0x13e>
			TCCR1B = (Config_Ptr->timer_clock - 2) | (TCCR1B & 0xF8);
    30bc:	ae e4       	ldi	r26, 0x4E	; 78
    30be:	b0 e0       	ldi	r27, 0x00	; 0
    30c0:	e9 81       	ldd	r30, Y+1	; 0x01
    30c2:	fa 81       	ldd	r31, Y+2	; 0x02
    30c4:	87 81       	ldd	r24, Z+7	; 0x07
    30c6:	82 50       	subi	r24, 0x02	; 2
    30c8:	98 2f       	mov	r25, r24
    30ca:	ee e4       	ldi	r30, 0x4E	; 78
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	80 81       	ld	r24, Z
    30d0:	88 7f       	andi	r24, 0xF8	; 248
    30d2:	89 2b       	or	r24, r25
    30d4:	8c 93       	st	X, r24
    30d6:	1f c0       	rjmp	.+62     	; 0x3116 <Timer_init+0x17c>
		else if(Config_Ptr->timer_clock > 3)
    30d8:	e9 81       	ldd	r30, Y+1	; 0x01
    30da:	fa 81       	ldd	r31, Y+2	; 0x02
    30dc:	87 81       	ldd	r24, Z+7	; 0x07
    30de:	84 30       	cpi	r24, 0x04	; 4
    30e0:	70 f0       	brcs	.+28     	; 0x30fe <Timer_init+0x164>
			TCCR1B = (Config_Ptr->timer_clock - 1) | (TCCR1B & 0xF8);
    30e2:	ae e4       	ldi	r26, 0x4E	; 78
    30e4:	b0 e0       	ldi	r27, 0x00	; 0
    30e6:	e9 81       	ldd	r30, Y+1	; 0x01
    30e8:	fa 81       	ldd	r31, Y+2	; 0x02
    30ea:	87 81       	ldd	r24, Z+7	; 0x07
    30ec:	81 50       	subi	r24, 0x01	; 1
    30ee:	98 2f       	mov	r25, r24
    30f0:	ee e4       	ldi	r30, 0x4E	; 78
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	80 81       	ld	r24, Z
    30f6:	88 7f       	andi	r24, 0xF8	; 248
    30f8:	89 2b       	or	r24, r25
    30fa:	8c 93       	st	X, r24
    30fc:	0c c0       	rjmp	.+24     	; 0x3116 <Timer_init+0x17c>
		else
			TCCR1B = (Config_Ptr->timer_clock) | (TCCR1B & 0xF8);
    30fe:	ae e4       	ldi	r26, 0x4E	; 78
    3100:	b0 e0       	ldi	r27, 0x00	; 0
    3102:	e9 81       	ldd	r30, Y+1	; 0x01
    3104:	fa 81       	ldd	r31, Y+2	; 0x02
    3106:	87 81       	ldd	r24, Z+7	; 0x07
    3108:	98 2f       	mov	r25, r24
    310a:	ee e4       	ldi	r30, 0x4E	; 78
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	80 81       	ld	r24, Z
    3110:	88 7f       	andi	r24, 0xF8	; 248
    3112:	89 2b       	or	r24, r25
    3114:	8c 93       	st	X, r24

        if (Config_Ptr->timer_mode == MODE_normal)
    3116:	e9 81       	ldd	r30, Y+1	; 0x01
    3118:	fa 81       	ldd	r31, Y+2	; 0x02
    311a:	80 85       	ldd	r24, Z+8	; 0x08
    311c:	88 23       	and	r24, r24
    311e:	41 f4       	brne	.+16     	; 0x3130 <Timer_init+0x196>
        {
        	/*
        	 * Flag of Normal mode to 1
        	 */
        	TIMSK |= 1 << TOIE1;
    3120:	a9 e5       	ldi	r26, 0x59	; 89
    3122:	b0 e0       	ldi	r27, 0x00	; 0
    3124:	e9 e5       	ldi	r30, 0x59	; 89
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	80 81       	ld	r24, Z
    312a:	84 60       	ori	r24, 0x04	; 4
    312c:	8c 93       	st	X, r24
    312e:	6a c0       	rjmp	.+212    	; 0x3204 <Timer_init+0x26a>
        }
        else if (Config_Ptr->timer_mode == MODE_CTC)
    3130:	e9 81       	ldd	r30, Y+1	; 0x01
    3132:	fa 81       	ldd	r31, Y+2	; 0x02
    3134:	80 85       	ldd	r24, Z+8	; 0x08
    3136:	81 30       	cpi	r24, 0x01	; 1
    3138:	09 f0       	breq	.+2      	; 0x313c <Timer_init+0x1a2>
    313a:	64 c0       	rjmp	.+200    	; 0x3204 <Timer_init+0x26a>
        	/*
        	 * WGM12 = 1 to activate Compare mode
        	 * Flag of Compare mode to 1
        	 * Set the OCR1A to the inputed compare value
        	 */
            OCR1A = Config_Ptr->timer_compare_MatchValue;
    313c:	2a e4       	ldi	r18, 0x4A	; 74
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	e9 81       	ldd	r30, Y+1	; 0x01
    3142:	fa 81       	ldd	r31, Y+2	; 0x02
    3144:	82 81       	ldd	r24, Z+2	; 0x02
    3146:	93 81       	ldd	r25, Z+3	; 0x03
    3148:	a4 81       	ldd	r26, Z+4	; 0x04
    314a:	b5 81       	ldd	r27, Z+5	; 0x05
    314c:	f9 01       	movw	r30, r18
    314e:	91 83       	std	Z+1, r25	; 0x01
    3150:	80 83       	st	Z, r24
            TIMSK |= 1 << OCIE1A;
    3152:	a9 e5       	ldi	r26, 0x59	; 89
    3154:	b0 e0       	ldi	r27, 0x00	; 0
    3156:	e9 e5       	ldi	r30, 0x59	; 89
    3158:	f0 e0       	ldi	r31, 0x00	; 0
    315a:	80 81       	ld	r24, Z
    315c:	80 61       	ori	r24, 0x10	; 16
    315e:	8c 93       	st	X, r24
        	TCCR1B |= 1 << WGM12;
    3160:	ae e4       	ldi	r26, 0x4E	; 78
    3162:	b0 e0       	ldi	r27, 0x00	; 0
    3164:	ee e4       	ldi	r30, 0x4E	; 78
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	80 81       	ld	r24, Z
    316a:	88 60       	ori	r24, 0x08	; 8
    316c:	8c 93       	st	X, r24
    316e:	4a c0       	rjmp	.+148    	; 0x3204 <Timer_init+0x26a>
        }
    }

    else if (Config_Ptr->timer_ID == TIMER_timer2)
    3170:	e9 81       	ldd	r30, Y+1	; 0x01
    3172:	fa 81       	ldd	r31, Y+2	; 0x02
    3174:	86 81       	ldd	r24, Z+6	; 0x06
    3176:	82 30       	cpi	r24, 0x02	; 2
    3178:	09 f0       	breq	.+2      	; 0x317c <Timer_init+0x1e2>
    317a:	44 c0       	rjmp	.+136    	; 0x3204 <Timer_init+0x26a>
    {
		TCNT2 = Config_Ptr->timer_InitialValue;
    317c:	a4 e4       	ldi	r26, 0x44	; 68
    317e:	b0 e0       	ldi	r27, 0x00	; 0
    3180:	e9 81       	ldd	r30, Y+1	; 0x01
    3182:	fa 81       	ldd	r31, Y+2	; 0x02
    3184:	80 81       	ld	r24, Z
    3186:	91 81       	ldd	r25, Z+1	; 0x01
    3188:	8c 93       	st	X, r24

		/*
		 * Set PreScalar
		 */
		TCCR2 = (Config_Ptr->timer_clock) | (TCCR0 & 0xF8);
    318a:	a5 e4       	ldi	r26, 0x45	; 69
    318c:	b0 e0       	ldi	r27, 0x00	; 0
    318e:	e9 81       	ldd	r30, Y+1	; 0x01
    3190:	fa 81       	ldd	r31, Y+2	; 0x02
    3192:	87 81       	ldd	r24, Z+7	; 0x07
    3194:	98 2f       	mov	r25, r24
    3196:	e3 e5       	ldi	r30, 0x53	; 83
    3198:	f0 e0       	ldi	r31, 0x00	; 0
    319a:	80 81       	ld	r24, Z
    319c:	88 7f       	andi	r24, 0xF8	; 248
    319e:	89 2b       	or	r24, r25
    31a0:	8c 93       	st	X, r24

		TCCR2 |= (1 << FOC2); /* Force Output Compare for non-PWM modes */
    31a2:	a5 e4       	ldi	r26, 0x45	; 69
    31a4:	b0 e0       	ldi	r27, 0x00	; 0
    31a6:	e5 e4       	ldi	r30, 0x45	; 69
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	80 81       	ld	r24, Z
    31ac:	80 68       	ori	r24, 0x80	; 128
    31ae:	8c 93       	st	X, r24

		if (Config_Ptr->timer_mode == MODE_normal)
    31b0:	e9 81       	ldd	r30, Y+1	; 0x01
    31b2:	fa 81       	ldd	r31, Y+2	; 0x02
    31b4:	80 85       	ldd	r24, Z+8	; 0x08
    31b6:	88 23       	and	r24, r24
    31b8:	41 f4       	brne	.+16     	; 0x31ca <Timer_init+0x230>
		{
			/*
			 * Set the Normal mode flag to 1
			 */
			TIMSK |= 1 << TOIE2;
    31ba:	a9 e5       	ldi	r26, 0x59	; 89
    31bc:	b0 e0       	ldi	r27, 0x00	; 0
    31be:	e9 e5       	ldi	r30, 0x59	; 89
    31c0:	f0 e0       	ldi	r31, 0x00	; 0
    31c2:	80 81       	ld	r24, Z
    31c4:	80 64       	ori	r24, 0x40	; 64
    31c6:	8c 93       	st	X, r24
    31c8:	1d c0       	rjmp	.+58     	; 0x3204 <Timer_init+0x26a>
		}
		else if (Config_Ptr->timer_mode == MODE_CTC)
    31ca:	e9 81       	ldd	r30, Y+1	; 0x01
    31cc:	fa 81       	ldd	r31, Y+2	; 0x02
    31ce:	80 85       	ldd	r24, Z+8	; 0x08
    31d0:	81 30       	cpi	r24, 0x01	; 1
    31d2:	c1 f4       	brne	.+48     	; 0x3204 <Timer_init+0x26a>
        	/*
        	 * WGM21 = 1 to activate Compare mode
        	 * Flag of Compare mode to 1
        	 * Set the OCR2 to the inputed compare value
        	 */
			TCCR2 |= 1 << WGM21;
    31d4:	a5 e4       	ldi	r26, 0x45	; 69
    31d6:	b0 e0       	ldi	r27, 0x00	; 0
    31d8:	e5 e4       	ldi	r30, 0x45	; 69
    31da:	f0 e0       	ldi	r31, 0x00	; 0
    31dc:	80 81       	ld	r24, Z
    31de:	88 60       	ori	r24, 0x08	; 8
    31e0:	8c 93       	st	X, r24

			OCR2 = Config_Ptr->timer_compare_MatchValue;
    31e2:	23 e4       	ldi	r18, 0x43	; 67
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	e9 81       	ldd	r30, Y+1	; 0x01
    31e8:	fa 81       	ldd	r31, Y+2	; 0x02
    31ea:	82 81       	ldd	r24, Z+2	; 0x02
    31ec:	93 81       	ldd	r25, Z+3	; 0x03
    31ee:	a4 81       	ldd	r26, Z+4	; 0x04
    31f0:	b5 81       	ldd	r27, Z+5	; 0x05
    31f2:	f9 01       	movw	r30, r18
    31f4:	80 83       	st	Z, r24

			TIMSK |= 1 << OCIE2;
    31f6:	a9 e5       	ldi	r26, 0x59	; 89
    31f8:	b0 e0       	ldi	r27, 0x00	; 0
    31fa:	e9 e5       	ldi	r30, 0x59	; 89
    31fc:	f0 e0       	ldi	r31, 0x00	; 0
    31fe:	80 81       	ld	r24, Z
    3200:	80 68       	ori	r24, 0x80	; 128
    3202:	8c 93       	st	X, r24
		}
	}
}
    3204:	0f 90       	pop	r0
    3206:	0f 90       	pop	r0
    3208:	cf 91       	pop	r28
    320a:	df 91       	pop	r29
    320c:	08 95       	ret

0000320e <Timer_deinit>:
/*
 * Description:
 * Function to de-initialize the timer with specific configurations
 */
void Timer_deinit(Timer_ID_Type timer_type)
{
    320e:	df 93       	push	r29
    3210:	cf 93       	push	r28
    3212:	0f 92       	push	r0
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62
    3218:	89 83       	std	Y+1, r24	; 0x01
    if (timer_type == TIMER_timer0)
    321a:	89 81       	ldd	r24, Y+1	; 0x01
    321c:	88 23       	and	r24, r24
    321e:	c1 f4       	brne	.+48     	; 0x3250 <Timer_deinit+0x42>
    {
        TCCR0 = 0x00;
    3220:	e3 e5       	ldi	r30, 0x53	; 83
    3222:	f0 e0       	ldi	r31, 0x00	; 0
    3224:	10 82       	st	Z, r1
        TCNT0 = 0x00;
    3226:	e2 e5       	ldi	r30, 0x52	; 82
    3228:	f0 e0       	ldi	r31, 0x00	; 0
    322a:	10 82       	st	Z, r1
        OCR0 = 0x00;
    322c:	ec e5       	ldi	r30, 0x5C	; 92
    322e:	f0 e0       	ldi	r31, 0x00	; 0
    3230:	10 82       	st	Z, r1
        TIMSK &= ~(1 << TOIE0);
    3232:	a9 e5       	ldi	r26, 0x59	; 89
    3234:	b0 e0       	ldi	r27, 0x00	; 0
    3236:	e9 e5       	ldi	r30, 0x59	; 89
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	80 81       	ld	r24, Z
    323c:	8e 7f       	andi	r24, 0xFE	; 254
    323e:	8c 93       	st	X, r24
        TIMSK &= ~(1 << OCIE0);
    3240:	a9 e5       	ldi	r26, 0x59	; 89
    3242:	b0 e0       	ldi	r27, 0x00	; 0
    3244:	e9 e5       	ldi	r30, 0x59	; 89
    3246:	f0 e0       	ldi	r31, 0x00	; 0
    3248:	80 81       	ld	r24, Z
    324a:	8d 7f       	andi	r24, 0xFD	; 253
    324c:	8c 93       	st	X, r24
    324e:	3a c0       	rjmp	.+116    	; 0x32c4 <Timer_deinit+0xb6>
    }
    else if (timer_type == TIMER_timer1)
    3250:	89 81       	ldd	r24, Y+1	; 0x01
    3252:	81 30       	cpi	r24, 0x01	; 1
    3254:	e9 f4       	brne	.+58     	; 0x3290 <Timer_deinit+0x82>
    {
        TCCR1A = 0x00;
    3256:	ef e4       	ldi	r30, 0x4F	; 79
    3258:	f0 e0       	ldi	r31, 0x00	; 0
    325a:	10 82       	st	Z, r1
        TCCR1B = 0x00;
    325c:	ee e4       	ldi	r30, 0x4E	; 78
    325e:	f0 e0       	ldi	r31, 0x00	; 0
    3260:	10 82       	st	Z, r1
        TCNT1 = 0x00;
    3262:	ec e4       	ldi	r30, 0x4C	; 76
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	11 82       	std	Z+1, r1	; 0x01
    3268:	10 82       	st	Z, r1
        OCR1A = 0x00;
    326a:	ea e4       	ldi	r30, 0x4A	; 74
    326c:	f0 e0       	ldi	r31, 0x00	; 0
    326e:	11 82       	std	Z+1, r1	; 0x01
    3270:	10 82       	st	Z, r1
        TIMSK &= ~(1 << TOIE1);
    3272:	a9 e5       	ldi	r26, 0x59	; 89
    3274:	b0 e0       	ldi	r27, 0x00	; 0
    3276:	e9 e5       	ldi	r30, 0x59	; 89
    3278:	f0 e0       	ldi	r31, 0x00	; 0
    327a:	80 81       	ld	r24, Z
    327c:	8b 7f       	andi	r24, 0xFB	; 251
    327e:	8c 93       	st	X, r24
        TIMSK &= ~(1 << OCIE1A);
    3280:	a9 e5       	ldi	r26, 0x59	; 89
    3282:	b0 e0       	ldi	r27, 0x00	; 0
    3284:	e9 e5       	ldi	r30, 0x59	; 89
    3286:	f0 e0       	ldi	r31, 0x00	; 0
    3288:	80 81       	ld	r24, Z
    328a:	8f 7e       	andi	r24, 0xEF	; 239
    328c:	8c 93       	st	X, r24
    328e:	1a c0       	rjmp	.+52     	; 0x32c4 <Timer_deinit+0xb6>
    }
    else if (timer_type == TIMER_timer2)
    3290:	89 81       	ldd	r24, Y+1	; 0x01
    3292:	82 30       	cpi	r24, 0x02	; 2
    3294:	b9 f4       	brne	.+46     	; 0x32c4 <Timer_deinit+0xb6>
    {
        TCCR2 = 0x00;
    3296:	e5 e4       	ldi	r30, 0x45	; 69
    3298:	f0 e0       	ldi	r31, 0x00	; 0
    329a:	10 82       	st	Z, r1
        TCNT2 = 0x00;
    329c:	e4 e4       	ldi	r30, 0x44	; 68
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	10 82       	st	Z, r1
        OCR2 = 0x00;
    32a2:	e3 e4       	ldi	r30, 0x43	; 67
    32a4:	f0 e0       	ldi	r31, 0x00	; 0
    32a6:	10 82       	st	Z, r1
        TIMSK &= ~(1 << TOIE2);
    32a8:	a9 e5       	ldi	r26, 0x59	; 89
    32aa:	b0 e0       	ldi	r27, 0x00	; 0
    32ac:	e9 e5       	ldi	r30, 0x59	; 89
    32ae:	f0 e0       	ldi	r31, 0x00	; 0
    32b0:	80 81       	ld	r24, Z
    32b2:	8f 7b       	andi	r24, 0xBF	; 191
    32b4:	8c 93       	st	X, r24
        TIMSK &= ~(1 << OCIE2);
    32b6:	a9 e5       	ldi	r26, 0x59	; 89
    32b8:	b0 e0       	ldi	r27, 0x00	; 0
    32ba:	e9 e5       	ldi	r30, 0x59	; 89
    32bc:	f0 e0       	ldi	r31, 0x00	; 0
    32be:	80 81       	ld	r24, Z
    32c0:	8f 77       	andi	r24, 0x7F	; 127
    32c2:	8c 93       	st	X, r24
    }
}
    32c4:	0f 90       	pop	r0
    32c6:	cf 91       	pop	r28
    32c8:	df 91       	pop	r29
    32ca:	08 95       	ret

000032cc <Timer_setCallBack>:
/*
 * Description:
 * Function to set the callback function for a specific timer
 * */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID)
{
    32cc:	df 93       	push	r29
    32ce:	cf 93       	push	r28
    32d0:	00 d0       	rcall	.+0      	; 0x32d2 <Timer_setCallBack+0x6>
    32d2:	0f 92       	push	r0
    32d4:	cd b7       	in	r28, 0x3d	; 61
    32d6:	de b7       	in	r29, 0x3e	; 62
    32d8:	9a 83       	std	Y+2, r25	; 0x02
    32da:	89 83       	std	Y+1, r24	; 0x01
    32dc:	6b 83       	std	Y+3, r22	; 0x03
    g_callBackPtr[a_timer_ID] = a_ptr;
    32de:	8b 81       	ldd	r24, Y+3	; 0x03
    32e0:	88 2f       	mov	r24, r24
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	29 81       	ldd	r18, Y+1	; 0x01
    32e6:	3a 81       	ldd	r19, Y+2	; 0x02
    32e8:	88 0f       	add	r24, r24
    32ea:	99 1f       	adc	r25, r25
    32ec:	fc 01       	movw	r30, r24
    32ee:	eb 5b       	subi	r30, 0xBB	; 187
    32f0:	fe 4f       	sbci	r31, 0xFE	; 254
    32f2:	31 83       	std	Z+1, r19	; 0x01
    32f4:	20 83       	st	Z, r18
}
    32f6:	0f 90       	pop	r0
    32f8:	0f 90       	pop	r0
    32fa:	0f 90       	pop	r0
    32fc:	cf 91       	pop	r28
    32fe:	df 91       	pop	r29
    3300:	08 95       	ret

00003302 <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(const UART_ConfigType * Config_Ptr)
{
    3302:	df 93       	push	r29
    3304:	cf 93       	push	r28
    3306:	cd b7       	in	r28, 0x3d	; 61
    3308:	de b7       	in	r29, 0x3e	; 62
    330a:	28 97       	sbiw	r28, 0x08	; 8
    330c:	0f b6       	in	r0, 0x3f	; 63
    330e:	f8 94       	cli
    3310:	de bf       	out	0x3e, r29	; 62
    3312:	0f be       	out	0x3f, r0	; 63
    3314:	cd bf       	out	0x3d, r28	; 61
    3316:	9c 83       	std	Y+4, r25	; 0x04
    3318:	8b 83       	std	Y+3, r24	; 0x03
    uint16 ubrr_value = 0;
    331a:	1a 82       	std	Y+2, r1	; 0x02
    331c:	19 82       	std	Y+1, r1	; 0x01

    /* U2X = 1 for double transmission speed */
    UCSRA = (1<<U2X);
    331e:	eb e2       	ldi	r30, 0x2B	; 43
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	82 e0       	ldi	r24, 0x02	; 2
    3324:	80 83       	st	Z, r24

    /* Enable Receiver and Transmitter */
    UCSRB = (1<<RXEN) | (1<<TXEN);
    3326:	ea e2       	ldi	r30, 0x2A	; 42
    3328:	f0 e0       	ldi	r31, 0x00	; 0
    332a:	88 e1       	ldi	r24, 0x18	; 24
    332c:	80 83       	st	Z, r24

    /* UCSRC settings - URSEL must be 1 to write to UCSRC */
    UCSRC = (1<<URSEL);
    332e:	e0 e4       	ldi	r30, 0x40	; 64
    3330:	f0 e0       	ldi	r31, 0x00	; 0
    3332:	80 e8       	ldi	r24, 0x80	; 128
    3334:	80 83       	st	Z, r24

    /* Set the number of data bits */
    switch(Config_Ptr->bit_data)
    3336:	eb 81       	ldd	r30, Y+3	; 0x03
    3338:	fc 81       	ldd	r31, Y+4	; 0x04
    333a:	80 81       	ld	r24, Z
    333c:	28 2f       	mov	r18, r24
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	38 87       	std	Y+8, r19	; 0x08
    3342:	2f 83       	std	Y+7, r18	; 0x07
    3344:	8f 81       	ldd	r24, Y+7	; 0x07
    3346:	98 85       	ldd	r25, Y+8	; 0x08
    3348:	82 30       	cpi	r24, 0x02	; 2
    334a:	91 05       	cpc	r25, r1
    334c:	19 f1       	breq	.+70     	; 0x3394 <UART_init+0x92>
    334e:	2f 81       	ldd	r18, Y+7	; 0x07
    3350:	38 85       	ldd	r19, Y+8	; 0x08
    3352:	23 30       	cpi	r18, 0x03	; 3
    3354:	31 05       	cpc	r19, r1
    3356:	5c f4       	brge	.+22     	; 0x336e <UART_init+0x6c>
    3358:	8f 81       	ldd	r24, Y+7	; 0x07
    335a:	98 85       	ldd	r25, Y+8	; 0x08
    335c:	00 97       	sbiw	r24, 0x00	; 0
    335e:	09 f4       	brne	.+2      	; 0x3362 <UART_init+0x60>
    3360:	45 c0       	rjmp	.+138    	; 0x33ec <UART_init+0xea>
    3362:	2f 81       	ldd	r18, Y+7	; 0x07
    3364:	38 85       	ldd	r19, Y+8	; 0x08
    3366:	21 30       	cpi	r18, 0x01	; 1
    3368:	31 05       	cpc	r19, r1
    336a:	61 f0       	breq	.+24     	; 0x3384 <UART_init+0x82>
    336c:	3f c0       	rjmp	.+126    	; 0x33ec <UART_init+0xea>
    336e:	8f 81       	ldd	r24, Y+7	; 0x07
    3370:	98 85       	ldd	r25, Y+8	; 0x08
    3372:	83 30       	cpi	r24, 0x03	; 3
    3374:	91 05       	cpc	r25, r1
    3376:	b1 f0       	breq	.+44     	; 0x33a4 <UART_init+0xa2>
    3378:	2f 81       	ldd	r18, Y+7	; 0x07
    337a:	38 85       	ldd	r19, Y+8	; 0x08
    337c:	24 30       	cpi	r18, 0x04	; 4
    337e:	31 05       	cpc	r19, r1
    3380:	01 f1       	breq	.+64     	; 0x33c2 <UART_init+0xc0>
    3382:	34 c0       	rjmp	.+104    	; 0x33ec <UART_init+0xea>
    {
        case UART_5_BITS:
            break;
        case UART_6_BITS:
        	UCSRC |= 1 << UCSZ0;
    3384:	a0 e4       	ldi	r26, 0x40	; 64
    3386:	b0 e0       	ldi	r27, 0x00	; 0
    3388:	e0 e4       	ldi	r30, 0x40	; 64
    338a:	f0 e0       	ldi	r31, 0x00	; 0
    338c:	80 81       	ld	r24, Z
    338e:	82 60       	ori	r24, 0x02	; 2
    3390:	8c 93       	st	X, r24
    3392:	2c c0       	rjmp	.+88     	; 0x33ec <UART_init+0xea>
            break;
        case UART_7_BITS:
        	UCSRC |= 1 << UCSZ1;
    3394:	a0 e4       	ldi	r26, 0x40	; 64
    3396:	b0 e0       	ldi	r27, 0x00	; 0
    3398:	e0 e4       	ldi	r30, 0x40	; 64
    339a:	f0 e0       	ldi	r31, 0x00	; 0
    339c:	80 81       	ld	r24, Z
    339e:	84 60       	ori	r24, 0x04	; 4
    33a0:	8c 93       	st	X, r24
    33a2:	24 c0       	rjmp	.+72     	; 0x33ec <UART_init+0xea>
            break;
        case UART_8_BITS:
        	UCSRC |= 1 << UCSZ1;
    33a4:	a0 e4       	ldi	r26, 0x40	; 64
    33a6:	b0 e0       	ldi	r27, 0x00	; 0
    33a8:	e0 e4       	ldi	r30, 0x40	; 64
    33aa:	f0 e0       	ldi	r31, 0x00	; 0
    33ac:	80 81       	ld	r24, Z
    33ae:	84 60       	ori	r24, 0x04	; 4
    33b0:	8c 93       	st	X, r24
        	UCSRC |= 1 << UCSZ0;
    33b2:	a0 e4       	ldi	r26, 0x40	; 64
    33b4:	b0 e0       	ldi	r27, 0x00	; 0
    33b6:	e0 e4       	ldi	r30, 0x40	; 64
    33b8:	f0 e0       	ldi	r31, 0x00	; 0
    33ba:	80 81       	ld	r24, Z
    33bc:	82 60       	ori	r24, 0x02	; 2
    33be:	8c 93       	st	X, r24
    33c0:	15 c0       	rjmp	.+42     	; 0x33ec <UART_init+0xea>
            break;
        case UART_9_BITS:
        	UCSRC |= 1 << UCSZ1;
    33c2:	a0 e4       	ldi	r26, 0x40	; 64
    33c4:	b0 e0       	ldi	r27, 0x00	; 0
    33c6:	e0 e4       	ldi	r30, 0x40	; 64
    33c8:	f0 e0       	ldi	r31, 0x00	; 0
    33ca:	80 81       	ld	r24, Z
    33cc:	84 60       	ori	r24, 0x04	; 4
    33ce:	8c 93       	st	X, r24
        	UCSRC |= 1 << UCSZ0;
    33d0:	a0 e4       	ldi	r26, 0x40	; 64
    33d2:	b0 e0       	ldi	r27, 0x00	; 0
    33d4:	e0 e4       	ldi	r30, 0x40	; 64
    33d6:	f0 e0       	ldi	r31, 0x00	; 0
    33d8:	80 81       	ld	r24, Z
    33da:	82 60       	ori	r24, 0x02	; 2
    33dc:	8c 93       	st	X, r24
        	UCSRC |= 1 << UCSZ2;
    33de:	a0 e4       	ldi	r26, 0x40	; 64
    33e0:	b0 e0       	ldi	r27, 0x00	; 0
    33e2:	e0 e4       	ldi	r30, 0x40	; 64
    33e4:	f0 e0       	ldi	r31, 0x00	; 0
    33e6:	80 81       	ld	r24, Z
    33e8:	84 60       	ori	r24, 0x04	; 4
    33ea:	8c 93       	st	X, r24
            break;
    }

    /* Set parity mode */
    switch(Config_Ptr->parity)
    33ec:	eb 81       	ldd	r30, Y+3	; 0x03
    33ee:	fc 81       	ldd	r31, Y+4	; 0x04
    33f0:	81 81       	ldd	r24, Z+1	; 0x01
    33f2:	28 2f       	mov	r18, r24
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	3e 83       	std	Y+6, r19	; 0x06
    33f8:	2d 83       	std	Y+5, r18	; 0x05
    33fa:	8d 81       	ldd	r24, Y+5	; 0x05
    33fc:	9e 81       	ldd	r25, Y+6	; 0x06
    33fe:	81 30       	cpi	r24, 0x01	; 1
    3400:	91 05       	cpc	r25, r1
    3402:	31 f0       	breq	.+12     	; 0x3410 <UART_init+0x10e>
    3404:	2d 81       	ldd	r18, Y+5	; 0x05
    3406:	3e 81       	ldd	r19, Y+6	; 0x06
    3408:	22 30       	cpi	r18, 0x02	; 2
    340a:	31 05       	cpc	r19, r1
    340c:	49 f0       	breq	.+18     	; 0x3420 <UART_init+0x11e>
    340e:	16 c0       	rjmp	.+44     	; 0x343c <UART_init+0x13a>
    {
        case UART_NO_PARITY:
            break;
        case UART_EVEN_PARITY:
        	UCSRC |= 1 << UPM1;
    3410:	a0 e4       	ldi	r26, 0x40	; 64
    3412:	b0 e0       	ldi	r27, 0x00	; 0
    3414:	e0 e4       	ldi	r30, 0x40	; 64
    3416:	f0 e0       	ldi	r31, 0x00	; 0
    3418:	80 81       	ld	r24, Z
    341a:	80 62       	ori	r24, 0x20	; 32
    341c:	8c 93       	st	X, r24
    341e:	0e c0       	rjmp	.+28     	; 0x343c <UART_init+0x13a>
            break;
        case UART_ODD_PARITY:
        	UCSRC |= 1 << UPM0;
    3420:	a0 e4       	ldi	r26, 0x40	; 64
    3422:	b0 e0       	ldi	r27, 0x00	; 0
    3424:	e0 e4       	ldi	r30, 0x40	; 64
    3426:	f0 e0       	ldi	r31, 0x00	; 0
    3428:	80 81       	ld	r24, Z
    342a:	80 61       	ori	r24, 0x10	; 16
    342c:	8c 93       	st	X, r24
        	UCSRC |= 1 << UPM1;
    342e:	a0 e4       	ldi	r26, 0x40	; 64
    3430:	b0 e0       	ldi	r27, 0x00	; 0
    3432:	e0 e4       	ldi	r30, 0x40	; 64
    3434:	f0 e0       	ldi	r31, 0x00	; 0
    3436:	80 81       	ld	r24, Z
    3438:	80 62       	ori	r24, 0x20	; 32
    343a:	8c 93       	st	X, r24
            break;
    }

    /* Set stop bit(s) */
    if(Config_Ptr->stop_bit == UART_TWO_STOP_BITS)
    343c:	eb 81       	ldd	r30, Y+3	; 0x03
    343e:	fc 81       	ldd	r31, Y+4	; 0x04
    3440:	82 81       	ldd	r24, Z+2	; 0x02
    3442:	81 30       	cpi	r24, 0x01	; 1
    3444:	39 f4       	brne	.+14     	; 0x3454 <UART_init+0x152>
    {
       	UCSRC |= 1 << USBS;
    3446:	a0 e4       	ldi	r26, 0x40	; 64
    3448:	b0 e0       	ldi	r27, 0x00	; 0
    344a:	e0 e4       	ldi	r30, 0x40	; 64
    344c:	f0 e0       	ldi	r31, 0x00	; 0
    344e:	80 81       	ld	r24, Z
    3450:	88 60       	ori	r24, 0x08	; 8
    3452:	8c 93       	st	X, r24
    }

    /* Calculate the UBRR value for the given baud rate */
    ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    3454:	eb 81       	ldd	r30, Y+3	; 0x03
    3456:	fc 81       	ldd	r31, Y+4	; 0x04
    3458:	83 81       	ldd	r24, Z+3	; 0x03
    345a:	94 81       	ldd	r25, Z+4	; 0x04
    345c:	a5 81       	ldd	r26, Z+5	; 0x05
    345e:	b6 81       	ldd	r27, Z+6	; 0x06
    3460:	88 0f       	add	r24, r24
    3462:	99 1f       	adc	r25, r25
    3464:	aa 1f       	adc	r26, r26
    3466:	bb 1f       	adc	r27, r27
    3468:	88 0f       	add	r24, r24
    346a:	99 1f       	adc	r25, r25
    346c:	aa 1f       	adc	r26, r26
    346e:	bb 1f       	adc	r27, r27
    3470:	88 0f       	add	r24, r24
    3472:	99 1f       	adc	r25, r25
    3474:	aa 1f       	adc	r26, r26
    3476:	bb 1f       	adc	r27, r27
    3478:	9c 01       	movw	r18, r24
    347a:	ad 01       	movw	r20, r26
    347c:	80 e0       	ldi	r24, 0x00	; 0
    347e:	92 e1       	ldi	r25, 0x12	; 18
    3480:	aa e7       	ldi	r26, 0x7A	; 122
    3482:	b0 e0       	ldi	r27, 0x00	; 0
    3484:	bc 01       	movw	r22, r24
    3486:	cd 01       	movw	r24, r26
    3488:	0e 94 10 1b 	call	0x3620	; 0x3620 <__udivmodsi4>
    348c:	da 01       	movw	r26, r20
    348e:	c9 01       	movw	r24, r18
    3490:	01 97       	sbiw	r24, 0x01	; 1
    3492:	9a 83       	std	Y+2, r25	; 0x02
    3494:	89 83       	std	Y+1, r24	; 0x01

    /* Set the baud rate */
    UBRRH = ubrr_value >> 8;
    3496:	e0 e4       	ldi	r30, 0x40	; 64
    3498:	f0 e0       	ldi	r31, 0x00	; 0
    349a:	89 81       	ldd	r24, Y+1	; 0x01
    349c:	9a 81       	ldd	r25, Y+2	; 0x02
    349e:	89 2f       	mov	r24, r25
    34a0:	99 27       	eor	r25, r25
    34a2:	80 83       	st	Z, r24
    UBRRL = ubrr_value;
    34a4:	e9 e2       	ldi	r30, 0x29	; 41
    34a6:	f0 e0       	ldi	r31, 0x00	; 0
    34a8:	89 81       	ldd	r24, Y+1	; 0x01
    34aa:	80 83       	st	Z, r24
}
    34ac:	28 96       	adiw	r28, 0x08	; 8
    34ae:	0f b6       	in	r0, 0x3f	; 63
    34b0:	f8 94       	cli
    34b2:	de bf       	out	0x3e, r29	; 62
    34b4:	0f be       	out	0x3f, r0	; 63
    34b6:	cd bf       	out	0x3d, r28	; 61
    34b8:	cf 91       	pop	r28
    34ba:	df 91       	pop	r29
    34bc:	08 95       	ret

000034be <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    34be:	df 93       	push	r29
    34c0:	cf 93       	push	r28
    34c2:	0f 92       	push	r0
    34c4:	cd b7       	in	r28, 0x3d	; 61
    34c6:	de b7       	in	r29, 0x3e	; 62
    34c8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    34ca:	eb e2       	ldi	r30, 0x2B	; 43
    34cc:	f0 e0       	ldi	r31, 0x00	; 0
    34ce:	80 81       	ld	r24, Z
    34d0:	88 2f       	mov	r24, r24
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	80 72       	andi	r24, 0x20	; 32
    34d6:	90 70       	andi	r25, 0x00	; 0
    34d8:	00 97       	sbiw	r24, 0x00	; 0
    34da:	b9 f3       	breq	.-18     	; 0x34ca <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    34dc:	ec e2       	ldi	r30, 0x2C	; 44
    34de:	f0 e0       	ldi	r31, 0x00	; 0
    34e0:	89 81       	ldd	r24, Y+1	; 0x01
    34e2:	80 83       	st	Z, r24
}
    34e4:	0f 90       	pop	r0
    34e6:	cf 91       	pop	r28
    34e8:	df 91       	pop	r29
    34ea:	08 95       	ret

000034ec <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    34ec:	df 93       	push	r29
    34ee:	cf 93       	push	r28
    34f0:	cd b7       	in	r28, 0x3d	; 61
    34f2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    34f4:	eb e2       	ldi	r30, 0x2B	; 43
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	80 81       	ld	r24, Z
    34fa:	88 23       	and	r24, r24
    34fc:	dc f7       	brge	.-10     	; 0x34f4 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    34fe:	ec e2       	ldi	r30, 0x2C	; 44
    3500:	f0 e0       	ldi	r31, 0x00	; 0
    3502:	80 81       	ld	r24, Z
}
    3504:	cf 91       	pop	r28
    3506:	df 91       	pop	r29
    3508:	08 95       	ret

0000350a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    350a:	df 93       	push	r29
    350c:	cf 93       	push	r28
    350e:	00 d0       	rcall	.+0      	; 0x3510 <UART_sendString+0x6>
    3510:	0f 92       	push	r0
    3512:	cd b7       	in	r28, 0x3d	; 61
    3514:	de b7       	in	r29, 0x3e	; 62
    3516:	9b 83       	std	Y+3, r25	; 0x03
    3518:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    351a:	19 82       	std	Y+1, r1	; 0x01
    351c:	0e c0       	rjmp	.+28     	; 0x353a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    351e:	89 81       	ldd	r24, Y+1	; 0x01
    3520:	28 2f       	mov	r18, r24
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	8a 81       	ldd	r24, Y+2	; 0x02
    3526:	9b 81       	ldd	r25, Y+3	; 0x03
    3528:	fc 01       	movw	r30, r24
    352a:	e2 0f       	add	r30, r18
    352c:	f3 1f       	adc	r31, r19
    352e:	80 81       	ld	r24, Z
    3530:	0e 94 5f 1a 	call	0x34be	; 0x34be <UART_sendByte>
		i++;
    3534:	89 81       	ldd	r24, Y+1	; 0x01
    3536:	8f 5f       	subi	r24, 0xFF	; 255
    3538:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    353a:	89 81       	ldd	r24, Y+1	; 0x01
    353c:	28 2f       	mov	r18, r24
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	8a 81       	ldd	r24, Y+2	; 0x02
    3542:	9b 81       	ldd	r25, Y+3	; 0x03
    3544:	fc 01       	movw	r30, r24
    3546:	e2 0f       	add	r30, r18
    3548:	f3 1f       	adc	r31, r19
    354a:	80 81       	ld	r24, Z
    354c:	88 23       	and	r24, r24
    354e:	39 f7       	brne	.-50     	; 0x351e <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    3550:	0f 90       	pop	r0
    3552:	0f 90       	pop	r0
    3554:	0f 90       	pop	r0
    3556:	cf 91       	pop	r28
    3558:	df 91       	pop	r29
    355a:	08 95       	ret

0000355c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    355c:	0f 93       	push	r16
    355e:	1f 93       	push	r17
    3560:	df 93       	push	r29
    3562:	cf 93       	push	r28
    3564:	00 d0       	rcall	.+0      	; 0x3566 <UART_receiveString+0xa>
    3566:	0f 92       	push	r0
    3568:	cd b7       	in	r28, 0x3d	; 61
    356a:	de b7       	in	r29, 0x3e	; 62
    356c:	9b 83       	std	Y+3, r25	; 0x03
    356e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3570:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3572:	89 81       	ldd	r24, Y+1	; 0x01
    3574:	28 2f       	mov	r18, r24
    3576:	30 e0       	ldi	r19, 0x00	; 0
    3578:	8a 81       	ldd	r24, Y+2	; 0x02
    357a:	9b 81       	ldd	r25, Y+3	; 0x03
    357c:	8c 01       	movw	r16, r24
    357e:	02 0f       	add	r16, r18
    3580:	13 1f       	adc	r17, r19
    3582:	0e 94 76 1a 	call	0x34ec	; 0x34ec <UART_recieveByte>
    3586:	f8 01       	movw	r30, r16
    3588:	80 83       	st	Z, r24
    358a:	0f c0       	rjmp	.+30     	; 0x35aa <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    358c:	89 81       	ldd	r24, Y+1	; 0x01
    358e:	8f 5f       	subi	r24, 0xFF	; 255
    3590:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3592:	89 81       	ldd	r24, Y+1	; 0x01
    3594:	28 2f       	mov	r18, r24
    3596:	30 e0       	ldi	r19, 0x00	; 0
    3598:	8a 81       	ldd	r24, Y+2	; 0x02
    359a:	9b 81       	ldd	r25, Y+3	; 0x03
    359c:	8c 01       	movw	r16, r24
    359e:	02 0f       	add	r16, r18
    35a0:	13 1f       	adc	r17, r19
    35a2:	0e 94 76 1a 	call	0x34ec	; 0x34ec <UART_recieveByte>
    35a6:	f8 01       	movw	r30, r16
    35a8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    35aa:	89 81       	ldd	r24, Y+1	; 0x01
    35ac:	28 2f       	mov	r18, r24
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	8a 81       	ldd	r24, Y+2	; 0x02
    35b2:	9b 81       	ldd	r25, Y+3	; 0x03
    35b4:	fc 01       	movw	r30, r24
    35b6:	e2 0f       	add	r30, r18
    35b8:	f3 1f       	adc	r31, r19
    35ba:	80 81       	ld	r24, Z
    35bc:	83 32       	cpi	r24, 0x23	; 35
    35be:	31 f7       	brne	.-52     	; 0x358c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    35c0:	89 81       	ldd	r24, Y+1	; 0x01
    35c2:	28 2f       	mov	r18, r24
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	8a 81       	ldd	r24, Y+2	; 0x02
    35c8:	9b 81       	ldd	r25, Y+3	; 0x03
    35ca:	fc 01       	movw	r30, r24
    35cc:	e2 0f       	add	r30, r18
    35ce:	f3 1f       	adc	r31, r19
    35d0:	10 82       	st	Z, r1
}
    35d2:	0f 90       	pop	r0
    35d4:	0f 90       	pop	r0
    35d6:	0f 90       	pop	r0
    35d8:	cf 91       	pop	r28
    35da:	df 91       	pop	r29
    35dc:	1f 91       	pop	r17
    35de:	0f 91       	pop	r16
    35e0:	08 95       	ret

000035e2 <__mulsi3>:
    35e2:	62 9f       	mul	r22, r18
    35e4:	d0 01       	movw	r26, r0
    35e6:	73 9f       	mul	r23, r19
    35e8:	f0 01       	movw	r30, r0
    35ea:	82 9f       	mul	r24, r18
    35ec:	e0 0d       	add	r30, r0
    35ee:	f1 1d       	adc	r31, r1
    35f0:	64 9f       	mul	r22, r20
    35f2:	e0 0d       	add	r30, r0
    35f4:	f1 1d       	adc	r31, r1
    35f6:	92 9f       	mul	r25, r18
    35f8:	f0 0d       	add	r31, r0
    35fa:	83 9f       	mul	r24, r19
    35fc:	f0 0d       	add	r31, r0
    35fe:	74 9f       	mul	r23, r20
    3600:	f0 0d       	add	r31, r0
    3602:	65 9f       	mul	r22, r21
    3604:	f0 0d       	add	r31, r0
    3606:	99 27       	eor	r25, r25
    3608:	72 9f       	mul	r23, r18
    360a:	b0 0d       	add	r27, r0
    360c:	e1 1d       	adc	r30, r1
    360e:	f9 1f       	adc	r31, r25
    3610:	63 9f       	mul	r22, r19
    3612:	b0 0d       	add	r27, r0
    3614:	e1 1d       	adc	r30, r1
    3616:	f9 1f       	adc	r31, r25
    3618:	bd 01       	movw	r22, r26
    361a:	cf 01       	movw	r24, r30
    361c:	11 24       	eor	r1, r1
    361e:	08 95       	ret

00003620 <__udivmodsi4>:
    3620:	a1 e2       	ldi	r26, 0x21	; 33
    3622:	1a 2e       	mov	r1, r26
    3624:	aa 1b       	sub	r26, r26
    3626:	bb 1b       	sub	r27, r27
    3628:	fd 01       	movw	r30, r26
    362a:	0d c0       	rjmp	.+26     	; 0x3646 <__udivmodsi4_ep>

0000362c <__udivmodsi4_loop>:
    362c:	aa 1f       	adc	r26, r26
    362e:	bb 1f       	adc	r27, r27
    3630:	ee 1f       	adc	r30, r30
    3632:	ff 1f       	adc	r31, r31
    3634:	a2 17       	cp	r26, r18
    3636:	b3 07       	cpc	r27, r19
    3638:	e4 07       	cpc	r30, r20
    363a:	f5 07       	cpc	r31, r21
    363c:	20 f0       	brcs	.+8      	; 0x3646 <__udivmodsi4_ep>
    363e:	a2 1b       	sub	r26, r18
    3640:	b3 0b       	sbc	r27, r19
    3642:	e4 0b       	sbc	r30, r20
    3644:	f5 0b       	sbc	r31, r21

00003646 <__udivmodsi4_ep>:
    3646:	66 1f       	adc	r22, r22
    3648:	77 1f       	adc	r23, r23
    364a:	88 1f       	adc	r24, r24
    364c:	99 1f       	adc	r25, r25
    364e:	1a 94       	dec	r1
    3650:	69 f7       	brne	.-38     	; 0x362c <__udivmodsi4_loop>
    3652:	60 95       	com	r22
    3654:	70 95       	com	r23
    3656:	80 95       	com	r24
    3658:	90 95       	com	r25
    365a:	9b 01       	movw	r18, r22
    365c:	ac 01       	movw	r20, r24
    365e:	bd 01       	movw	r22, r26
    3660:	cf 01       	movw	r24, r30
    3662:	08 95       	ret

00003664 <__prologue_saves__>:
    3664:	2f 92       	push	r2
    3666:	3f 92       	push	r3
    3668:	4f 92       	push	r4
    366a:	5f 92       	push	r5
    366c:	6f 92       	push	r6
    366e:	7f 92       	push	r7
    3670:	8f 92       	push	r8
    3672:	9f 92       	push	r9
    3674:	af 92       	push	r10
    3676:	bf 92       	push	r11
    3678:	cf 92       	push	r12
    367a:	df 92       	push	r13
    367c:	ef 92       	push	r14
    367e:	ff 92       	push	r15
    3680:	0f 93       	push	r16
    3682:	1f 93       	push	r17
    3684:	cf 93       	push	r28
    3686:	df 93       	push	r29
    3688:	cd b7       	in	r28, 0x3d	; 61
    368a:	de b7       	in	r29, 0x3e	; 62
    368c:	ca 1b       	sub	r28, r26
    368e:	db 0b       	sbc	r29, r27
    3690:	0f b6       	in	r0, 0x3f	; 63
    3692:	f8 94       	cli
    3694:	de bf       	out	0x3e, r29	; 62
    3696:	0f be       	out	0x3f, r0	; 63
    3698:	cd bf       	out	0x3d, r28	; 61
    369a:	09 94       	ijmp

0000369c <__epilogue_restores__>:
    369c:	2a 88       	ldd	r2, Y+18	; 0x12
    369e:	39 88       	ldd	r3, Y+17	; 0x11
    36a0:	48 88       	ldd	r4, Y+16	; 0x10
    36a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    36a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    36a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    36a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    36aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    36ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    36ae:	b9 84       	ldd	r11, Y+9	; 0x09
    36b0:	c8 84       	ldd	r12, Y+8	; 0x08
    36b2:	df 80       	ldd	r13, Y+7	; 0x07
    36b4:	ee 80       	ldd	r14, Y+6	; 0x06
    36b6:	fd 80       	ldd	r15, Y+5	; 0x05
    36b8:	0c 81       	ldd	r16, Y+4	; 0x04
    36ba:	1b 81       	ldd	r17, Y+3	; 0x03
    36bc:	aa 81       	ldd	r26, Y+2	; 0x02
    36be:	b9 81       	ldd	r27, Y+1	; 0x01
    36c0:	ce 0f       	add	r28, r30
    36c2:	d1 1d       	adc	r29, r1
    36c4:	0f b6       	in	r0, 0x3f	; 63
    36c6:	f8 94       	cli
    36c8:	de bf       	out	0x3e, r29	; 62
    36ca:	0f be       	out	0x3f, r0	; 63
    36cc:	cd bf       	out	0x3d, r28	; 61
    36ce:	ed 01       	movw	r28, r26
    36d0:	08 95       	ret

000036d2 <itoa>:
    36d2:	fb 01       	movw	r30, r22
    36d4:	9f 01       	movw	r18, r30
    36d6:	e8 94       	clt
    36d8:	42 30       	cpi	r20, 0x02	; 2
    36da:	c4 f0       	brlt	.+48     	; 0x370c <itoa+0x3a>
    36dc:	45 32       	cpi	r20, 0x25	; 37
    36de:	b4 f4       	brge	.+44     	; 0x370c <itoa+0x3a>
    36e0:	4a 30       	cpi	r20, 0x0A	; 10
    36e2:	29 f4       	brne	.+10     	; 0x36ee <itoa+0x1c>
    36e4:	97 fb       	bst	r25, 7
    36e6:	1e f4       	brtc	.+6      	; 0x36ee <itoa+0x1c>
    36e8:	90 95       	com	r25
    36ea:	81 95       	neg	r24
    36ec:	9f 4f       	sbci	r25, 0xFF	; 255
    36ee:	64 2f       	mov	r22, r20
    36f0:	77 27       	eor	r23, r23
    36f2:	0e 94 9a 1b 	call	0x3734	; 0x3734 <__udivmodhi4>
    36f6:	80 5d       	subi	r24, 0xD0	; 208
    36f8:	8a 33       	cpi	r24, 0x3A	; 58
    36fa:	0c f0       	brlt	.+2      	; 0x36fe <itoa+0x2c>
    36fc:	89 5d       	subi	r24, 0xD9	; 217
    36fe:	81 93       	st	Z+, r24
    3700:	cb 01       	movw	r24, r22
    3702:	00 97       	sbiw	r24, 0x00	; 0
    3704:	a1 f7       	brne	.-24     	; 0x36ee <itoa+0x1c>
    3706:	16 f4       	brtc	.+4      	; 0x370c <itoa+0x3a>
    3708:	5d e2       	ldi	r21, 0x2D	; 45
    370a:	51 93       	st	Z+, r21
    370c:	10 82       	st	Z, r1
    370e:	c9 01       	movw	r24, r18
    3710:	0c 94 8a 1b 	jmp	0x3714	; 0x3714 <strrev>

00003714 <strrev>:
    3714:	dc 01       	movw	r26, r24
    3716:	fc 01       	movw	r30, r24
    3718:	67 2f       	mov	r22, r23
    371a:	71 91       	ld	r23, Z+
    371c:	77 23       	and	r23, r23
    371e:	e1 f7       	brne	.-8      	; 0x3718 <strrev+0x4>
    3720:	32 97       	sbiw	r30, 0x02	; 2
    3722:	04 c0       	rjmp	.+8      	; 0x372c <strrev+0x18>
    3724:	7c 91       	ld	r23, X
    3726:	6d 93       	st	X+, r22
    3728:	70 83       	st	Z, r23
    372a:	62 91       	ld	r22, -Z
    372c:	ae 17       	cp	r26, r30
    372e:	bf 07       	cpc	r27, r31
    3730:	c8 f3       	brcs	.-14     	; 0x3724 <strrev+0x10>
    3732:	08 95       	ret

00003734 <__udivmodhi4>:
    3734:	aa 1b       	sub	r26, r26
    3736:	bb 1b       	sub	r27, r27
    3738:	51 e1       	ldi	r21, 0x11	; 17
    373a:	07 c0       	rjmp	.+14     	; 0x374a <__udivmodhi4_ep>

0000373c <__udivmodhi4_loop>:
    373c:	aa 1f       	adc	r26, r26
    373e:	bb 1f       	adc	r27, r27
    3740:	a6 17       	cp	r26, r22
    3742:	b7 07       	cpc	r27, r23
    3744:	10 f0       	brcs	.+4      	; 0x374a <__udivmodhi4_ep>
    3746:	a6 1b       	sub	r26, r22
    3748:	b7 0b       	sbc	r27, r23

0000374a <__udivmodhi4_ep>:
    374a:	88 1f       	adc	r24, r24
    374c:	99 1f       	adc	r25, r25
    374e:	5a 95       	dec	r21
    3750:	a9 f7       	brne	.-22     	; 0x373c <__udivmodhi4_loop>
    3752:	80 95       	com	r24
    3754:	90 95       	com	r25
    3756:	bc 01       	movw	r22, r24
    3758:	cd 01       	movw	r24, r26
    375a:	08 95       	ret

0000375c <_exit>:
    375c:	f8 94       	cli

0000375e <__stop_program>:
    375e:	ff cf       	rjmp	.-2      	; 0x375e <__stop_program>
