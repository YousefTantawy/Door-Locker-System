
Final_Project_Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000036d8  0000376c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  0080007c  0080007c  00003788  2**0
                  ALLOC
  3 .stab         00003534  00000000  00000000  00003788  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000159b  00000000  00000000  00006cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008257  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008397  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008507  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a150  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b03b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bde8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bf48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c1d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c9a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__vector_4>
      14:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 73 16 	jmp	0x2ce6	; 0x2ce6 <__vector_9>
      28:	0c 94 40 16 	jmp	0x2c80	; 0x2c80 <__vector_10>
      2c:	0c 94 0d 16 	jmp	0x2c1a	; 0x2c1a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 01 06 	call	0xc02	; 0xc02 <main>
      8a:	0c 94 6a 1b 	jmp	0x36d4	; 0x36d4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 33 1b 	jmp	0x3666	; 0x3666 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 33 1b 	jmp	0x3666	; 0x3666 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3f 1b 	jmp	0x367e	; 0x367e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5f 1b 	jmp	0x36be	; 0x36be <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <BUZZER_init>:

/*
 * Description:
 * This function initializes the buzzer pin to be set to OUTPUT
 */
void BUZZER_init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 35 12 	call	0x246a	; 0x246a <GPIO_setupPinDirection>
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <BUZZER_on>:
/*
 * Description:
 * This function sets the buzzer pin to LOGIC_HIGH, hence activating the buzzer
 */
void BUZZER_on(void){
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	67 e0       	ldi	r22, 0x07	; 7
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	0e 94 20 13 	call	0x2640	; 0x2640 <GPIO_writePin>
}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <BUZZER_off>:
/*
 * Description:
 * This function sets the buzzer pin to LOGIC_LOW, hence activating the buzzer
 */

void BUZZER_off(void){
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	67 e0       	ldi	r22, 0x07	; 7
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	0e 94 20 13 	call	0x2640	; 0x2640 <GPIO_writePin>
}
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <timer_callBack>:

/*
 * This is the call-back function for the timer driver
 */
void timer_callBack(void)
{
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     b96:	80 91 7d 00 	lds	r24, 0x007D
     b9a:	90 91 7e 00 	lds	r25, 0x007E
     b9e:	a0 91 7f 00 	lds	r26, 0x007F
     ba2:	b0 91 80 00 	lds	r27, 0x0080
     ba6:	01 96       	adiw	r24, 0x01	; 1
     ba8:	a1 1d       	adc	r26, r1
     baa:	b1 1d       	adc	r27, r1
     bac:	80 93 7d 00 	sts	0x007D, r24
     bb0:	90 93 7e 00 	sts	0x007E, r25
     bb4:	a0 93 7f 00 	sts	0x007F, r26
     bb8:	b0 93 80 00 	sts	0x0080, r27
	if(g_tick == calc)
     bbc:	20 91 7d 00 	lds	r18, 0x007D
     bc0:	30 91 7e 00 	lds	r19, 0x007E
     bc4:	40 91 7f 00 	lds	r20, 0x007F
     bc8:	50 91 80 00 	lds	r21, 0x0080
     bcc:	80 91 90 00 	lds	r24, 0x0090
     bd0:	90 91 91 00 	lds	r25, 0x0091
     bd4:	a0 91 92 00 	lds	r26, 0x0092
     bd8:	b0 91 93 00 	lds	r27, 0x0093
     bdc:	28 17       	cp	r18, r24
     bde:	39 07       	cpc	r19, r25
     be0:	4a 07       	cpc	r20, r26
     be2:	5b 07       	cpc	r21, r27
     be4:	59 f4       	brne	.+22     	; 0xbfc <timer_callBack+0x6e>
	{
		g_tick = 0;
     be6:	10 92 7d 00 	sts	0x007D, r1
     bea:	10 92 7e 00 	sts	0x007E, r1
     bee:	10 92 7f 00 	sts	0x007F, r1
     bf2:	10 92 80 00 	sts	0x0080, r1
		g_flag = 1;
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	80 93 7c 00 	sts	0x007C, r24
	}
}
     bfc:	cf 91       	pop	r28
     bfe:	df 91       	pop	r29
     c00:	08 95       	ret

00000c02 <main>:
void timerCalculations();

/*------------------------------------------------------------------------------
 *  						Application Code
 *----------------------------------------------------------------------------*/
int main() {
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	c2 57       	subi	r28, 0x72	; 114
     c10:	d0 40       	sbci	r29, 0x00	; 0
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61

	/*
	 * Activate the global interrupt register
	 */
	SREG = 1 << 7;
     c1c:	ef e5       	ldi	r30, 0x5F	; 95
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 e8       	ldi	r24, 0x80	; 128
     c22:	80 83       	st	Z, r24

	/*
	 * Initialize all drivers
	 */
	UART_init(&UART_Configurations);
     c24:	88 e6       	ldi	r24, 0x68	; 104
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 82 19 	call	0x3304	; 0x3304 <UART_init>
	BUZZER_init();
     c2c:	0e 94 a3 05 	call	0xb46	; 0xb46 <BUZZER_init>
	TWI_init(&TWI_Configurations);
     c30:	8f e6       	ldi	r24, 0x6F	; 111
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <TWI_init>
	DcMotor_Init();
     c38:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <DcMotor_Init>
	PIR_init();
     c3c:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <PIR_init>
	{
		/*
		 * If status is one, meaning the passwords are matching, send to the other MC that there is no need to repeat
		 * the process and we can move on to the main system
		 */
		if(firstPass())
     c40:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <firstPass>
     c44:	88 23       	and	r24, r24
     c46:	09 f4       	brne	.+2      	; 0xc4a <main+0x48>
     c48:	ba c0       	rjmp	.+372    	; 0xdbe <main+0x1bc>
		{
			UART_sendByte(READY);
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <UART_sendByte>
     c50:	fe 01       	movw	r30, r28
     c52:	e3 59       	subi	r30, 0x93	; 147
     c54:	ff 4f       	sbci	r31, 0xFF	; 255
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	a8 e4       	ldi	r26, 0x48	; 72
     c5c:	b2 e4       	ldi	r27, 0x42	; 66
     c5e:	80 83       	st	Z, r24
     c60:	91 83       	std	Z+1, r25	; 0x01
     c62:	a2 83       	std	Z+2, r26	; 0x02
     c64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c66:	8e 01       	movw	r16, r28
     c68:	07 59       	subi	r16, 0x97	; 151
     c6a:	1f 4f       	sbci	r17, 0xFF	; 255
     c6c:	fe 01       	movw	r30, r28
     c6e:	e3 59       	subi	r30, 0x93	; 147
     c70:	ff 4f       	sbci	r31, 0xFF	; 255
     c72:	60 81       	ld	r22, Z
     c74:	71 81       	ldd	r23, Z+1	; 0x01
     c76:	82 81       	ldd	r24, Z+2	; 0x02
     c78:	93 81       	ldd	r25, Z+3	; 0x03
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	4a ef       	ldi	r20, 0xFA	; 250
     c80:	54 e4       	ldi	r21, 0x44	; 68
     c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c86:	dc 01       	movw	r26, r24
     c88:	cb 01       	movw	r24, r22
     c8a:	f8 01       	movw	r30, r16
     c8c:	80 83       	st	Z, r24
     c8e:	91 83       	std	Z+1, r25	; 0x01
     c90:	a2 83       	std	Z+2, r26	; 0x02
     c92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c94:	fe 01       	movw	r30, r28
     c96:	e7 59       	subi	r30, 0x97	; 151
     c98:	ff 4f       	sbci	r31, 0xFF	; 255
     c9a:	60 81       	ld	r22, Z
     c9c:	71 81       	ldd	r23, Z+1	; 0x01
     c9e:	82 81       	ldd	r24, Z+2	; 0x02
     ca0:	93 81       	ldd	r25, Z+3	; 0x03
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	40 e8       	ldi	r20, 0x80	; 128
     ca8:	5f e3       	ldi	r21, 0x3F	; 63
     caa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cae:	88 23       	and	r24, r24
     cb0:	44 f4       	brge	.+16     	; 0xcc2 <main+0xc0>
		__ticks = 1;
     cb2:	fe 01       	movw	r30, r28
     cb4:	e9 59       	subi	r30, 0x99	; 153
     cb6:	ff 4f       	sbci	r31, 0xFF	; 255
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	91 83       	std	Z+1, r25	; 0x01
     cbe:	80 83       	st	Z, r24
     cc0:	64 c0       	rjmp	.+200    	; 0xd8a <main+0x188>
	else if (__tmp > 65535)
     cc2:	fe 01       	movw	r30, r28
     cc4:	e7 59       	subi	r30, 0x97	; 151
     cc6:	ff 4f       	sbci	r31, 0xFF	; 255
     cc8:	60 81       	ld	r22, Z
     cca:	71 81       	ldd	r23, Z+1	; 0x01
     ccc:	82 81       	ldd	r24, Z+2	; 0x02
     cce:	93 81       	ldd	r25, Z+3	; 0x03
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	3f ef       	ldi	r19, 0xFF	; 255
     cd4:	4f e7       	ldi	r20, 0x7F	; 127
     cd6:	57 e4       	ldi	r21, 0x47	; 71
     cd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cdc:	18 16       	cp	r1, r24
     cde:	0c f0       	brlt	.+2      	; 0xce2 <main+0xe0>
     ce0:	43 c0       	rjmp	.+134    	; 0xd68 <main+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ce2:	fe 01       	movw	r30, r28
     ce4:	e3 59       	subi	r30, 0x93	; 147
     ce6:	ff 4f       	sbci	r31, 0xFF	; 255
     ce8:	60 81       	ld	r22, Z
     cea:	71 81       	ldd	r23, Z+1	; 0x01
     cec:	82 81       	ldd	r24, Z+2	; 0x02
     cee:	93 81       	ldd	r25, Z+3	; 0x03
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e2       	ldi	r20, 0x20	; 32
     cf6:	51 e4       	ldi	r21, 0x41	; 65
     cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	8e 01       	movw	r16, r28
     d02:	09 59       	subi	r16, 0x99	; 153
     d04:	1f 4f       	sbci	r17, 0xFF	; 255
     d06:	bc 01       	movw	r22, r24
     d08:	cd 01       	movw	r24, r26
     d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	f8 01       	movw	r30, r16
     d14:	91 83       	std	Z+1, r25	; 0x01
     d16:	80 83       	st	Z, r24
     d18:	1f c0       	rjmp	.+62     	; 0xd58 <main+0x156>
     d1a:	fe 01       	movw	r30, r28
     d1c:	eb 59       	subi	r30, 0x9B	; 155
     d1e:	ff 4f       	sbci	r31, 0xFF	; 255
     d20:	88 ec       	ldi	r24, 0xC8	; 200
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	91 83       	std	Z+1, r25	; 0x01
     d26:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d28:	fe 01       	movw	r30, r28
     d2a:	eb 59       	subi	r30, 0x9B	; 155
     d2c:	ff 4f       	sbci	r31, 0xFF	; 255
     d2e:	80 81       	ld	r24, Z
     d30:	91 81       	ldd	r25, Z+1	; 0x01
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	f1 f7       	brne	.-4      	; 0xd32 <main+0x130>
     d36:	fe 01       	movw	r30, r28
     d38:	eb 59       	subi	r30, 0x9B	; 155
     d3a:	ff 4f       	sbci	r31, 0xFF	; 255
     d3c:	91 83       	std	Z+1, r25	; 0x01
     d3e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d40:	de 01       	movw	r26, r28
     d42:	a9 59       	subi	r26, 0x99	; 153
     d44:	bf 4f       	sbci	r27, 0xFF	; 255
     d46:	fe 01       	movw	r30, r28
     d48:	e9 59       	subi	r30, 0x99	; 153
     d4a:	ff 4f       	sbci	r31, 0xFF	; 255
     d4c:	80 81       	ld	r24, Z
     d4e:	91 81       	ldd	r25, Z+1	; 0x01
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	11 96       	adiw	r26, 0x01	; 1
     d54:	9c 93       	st	X, r25
     d56:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d58:	fe 01       	movw	r30, r28
     d5a:	e9 59       	subi	r30, 0x99	; 153
     d5c:	ff 4f       	sbci	r31, 0xFF	; 255
     d5e:	80 81       	ld	r24, Z
     d60:	91 81       	ldd	r25, Z+1	; 0x01
     d62:	00 97       	sbiw	r24, 0x00	; 0
     d64:	d1 f6       	brne	.-76     	; 0xd1a <main+0x118>
     d66:	27 c0       	rjmp	.+78     	; 0xdb6 <main+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d68:	8e 01       	movw	r16, r28
     d6a:	09 59       	subi	r16, 0x99	; 153
     d6c:	1f 4f       	sbci	r17, 0xFF	; 255
     d6e:	fe 01       	movw	r30, r28
     d70:	e7 59       	subi	r30, 0x97	; 151
     d72:	ff 4f       	sbci	r31, 0xFF	; 255
     d74:	60 81       	ld	r22, Z
     d76:	71 81       	ldd	r23, Z+1	; 0x01
     d78:	82 81       	ldd	r24, Z+2	; 0x02
     d7a:	93 81       	ldd	r25, Z+3	; 0x03
     d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	f8 01       	movw	r30, r16
     d86:	91 83       	std	Z+1, r25	; 0x01
     d88:	80 83       	st	Z, r24
     d8a:	de 01       	movw	r26, r28
     d8c:	ad 59       	subi	r26, 0x9D	; 157
     d8e:	bf 4f       	sbci	r27, 0xFF	; 255
     d90:	fe 01       	movw	r30, r28
     d92:	e9 59       	subi	r30, 0x99	; 153
     d94:	ff 4f       	sbci	r31, 0xFF	; 255
     d96:	80 81       	ld	r24, Z
     d98:	91 81       	ldd	r25, Z+1	; 0x01
     d9a:	8d 93       	st	X+, r24
     d9c:	9c 93       	st	X, r25
     d9e:	fe 01       	movw	r30, r28
     da0:	ed 59       	subi	r30, 0x9D	; 157
     da2:	ff 4f       	sbci	r31, 0xFF	; 255
     da4:	80 81       	ld	r24, Z
     da6:	91 81       	ldd	r25, Z+1	; 0x01
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	f1 f7       	brne	.-4      	; 0xda8 <main+0x1a6>
     dac:	fe 01       	movw	r30, r28
     dae:	ed 59       	subi	r30, 0x9D	; 157
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	91 83       	std	Z+1, r25	; 0x01
     db4:	80 83       	st	Z, r24
			_delay_ms(50);
			UART_sendByte(NO_REPEAT);
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <UART_sendByte>
     dbc:	ba c0       	rjmp	.+372    	; 0xf32 <main+0x330>
			break;
		}
		else
		{
			UART_sendByte(READY);
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <UART_sendByte>
     dc4:	fe 01       	movw	r30, r28
     dc6:	e1 5a       	subi	r30, 0xA1	; 161
     dc8:	ff 4f       	sbci	r31, 0xFF	; 255
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	a8 e4       	ldi	r26, 0x48	; 72
     dd0:	b2 e4       	ldi	r27, 0x42	; 66
     dd2:	80 83       	st	Z, r24
     dd4:	91 83       	std	Z+1, r25	; 0x01
     dd6:	a2 83       	std	Z+2, r26	; 0x02
     dd8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dda:	8e 01       	movw	r16, r28
     ddc:	05 5a       	subi	r16, 0xA5	; 165
     dde:	1f 4f       	sbci	r17, 0xFF	; 255
     de0:	fe 01       	movw	r30, r28
     de2:	e1 5a       	subi	r30, 0xA1	; 161
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	60 81       	ld	r22, Z
     de8:	71 81       	ldd	r23, Z+1	; 0x01
     dea:	82 81       	ldd	r24, Z+2	; 0x02
     dec:	93 81       	ldd	r25, Z+3	; 0x03
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	4a ef       	ldi	r20, 0xFA	; 250
     df4:	54 e4       	ldi	r21, 0x44	; 68
     df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dfa:	dc 01       	movw	r26, r24
     dfc:	cb 01       	movw	r24, r22
     dfe:	f8 01       	movw	r30, r16
     e00:	80 83       	st	Z, r24
     e02:	91 83       	std	Z+1, r25	; 0x01
     e04:	a2 83       	std	Z+2, r26	; 0x02
     e06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e08:	fe 01       	movw	r30, r28
     e0a:	e5 5a       	subi	r30, 0xA5	; 165
     e0c:	ff 4f       	sbci	r31, 0xFF	; 255
     e0e:	60 81       	ld	r22, Z
     e10:	71 81       	ldd	r23, Z+1	; 0x01
     e12:	82 81       	ldd	r24, Z+2	; 0x02
     e14:	93 81       	ldd	r25, Z+3	; 0x03
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	40 e8       	ldi	r20, 0x80	; 128
     e1c:	5f e3       	ldi	r21, 0x3F	; 63
     e1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e22:	88 23       	and	r24, r24
     e24:	44 f4       	brge	.+16     	; 0xe36 <main+0x234>
		__ticks = 1;
     e26:	fe 01       	movw	r30, r28
     e28:	e7 5a       	subi	r30, 0xA7	; 167
     e2a:	ff 4f       	sbci	r31, 0xFF	; 255
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	91 83       	std	Z+1, r25	; 0x01
     e32:	80 83       	st	Z, r24
     e34:	64 c0       	rjmp	.+200    	; 0xefe <main+0x2fc>
	else if (__tmp > 65535)
     e36:	fe 01       	movw	r30, r28
     e38:	e5 5a       	subi	r30, 0xA5	; 165
     e3a:	ff 4f       	sbci	r31, 0xFF	; 255
     e3c:	60 81       	ld	r22, Z
     e3e:	71 81       	ldd	r23, Z+1	; 0x01
     e40:	82 81       	ldd	r24, Z+2	; 0x02
     e42:	93 81       	ldd	r25, Z+3	; 0x03
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	3f ef       	ldi	r19, 0xFF	; 255
     e48:	4f e7       	ldi	r20, 0x7F	; 127
     e4a:	57 e4       	ldi	r21, 0x47	; 71
     e4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e50:	18 16       	cp	r1, r24
     e52:	0c f0       	brlt	.+2      	; 0xe56 <main+0x254>
     e54:	43 c0       	rjmp	.+134    	; 0xedc <main+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e56:	fe 01       	movw	r30, r28
     e58:	e1 5a       	subi	r30, 0xA1	; 161
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	60 81       	ld	r22, Z
     e5e:	71 81       	ldd	r23, Z+1	; 0x01
     e60:	82 81       	ldd	r24, Z+2	; 0x02
     e62:	93 81       	ldd	r25, Z+3	; 0x03
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	40 e2       	ldi	r20, 0x20	; 32
     e6a:	51 e4       	ldi	r21, 0x41	; 65
     e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	8e 01       	movw	r16, r28
     e76:	07 5a       	subi	r16, 0xA7	; 167
     e78:	1f 4f       	sbci	r17, 0xFF	; 255
     e7a:	bc 01       	movw	r22, r24
     e7c:	cd 01       	movw	r24, r26
     e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	f8 01       	movw	r30, r16
     e88:	91 83       	std	Z+1, r25	; 0x01
     e8a:	80 83       	st	Z, r24
     e8c:	1f c0       	rjmp	.+62     	; 0xecc <main+0x2ca>
     e8e:	fe 01       	movw	r30, r28
     e90:	e9 5a       	subi	r30, 0xA9	; 169
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	88 ec       	ldi	r24, 0xC8	; 200
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	91 83       	std	Z+1, r25	; 0x01
     e9a:	80 83       	st	Z, r24
     e9c:	fe 01       	movw	r30, r28
     e9e:	e9 5a       	subi	r30, 0xA9	; 169
     ea0:	ff 4f       	sbci	r31, 0xFF	; 255
     ea2:	80 81       	ld	r24, Z
     ea4:	91 81       	ldd	r25, Z+1	; 0x01
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <main+0x2a4>
     eaa:	fe 01       	movw	r30, r28
     eac:	e9 5a       	subi	r30, 0xA9	; 169
     eae:	ff 4f       	sbci	r31, 0xFF	; 255
     eb0:	91 83       	std	Z+1, r25	; 0x01
     eb2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb4:	de 01       	movw	r26, r28
     eb6:	a7 5a       	subi	r26, 0xA7	; 167
     eb8:	bf 4f       	sbci	r27, 0xFF	; 255
     eba:	fe 01       	movw	r30, r28
     ebc:	e7 5a       	subi	r30, 0xA7	; 167
     ebe:	ff 4f       	sbci	r31, 0xFF	; 255
     ec0:	80 81       	ld	r24, Z
     ec2:	91 81       	ldd	r25, Z+1	; 0x01
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	11 96       	adiw	r26, 0x01	; 1
     ec8:	9c 93       	st	X, r25
     eca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ecc:	fe 01       	movw	r30, r28
     ece:	e7 5a       	subi	r30, 0xA7	; 167
     ed0:	ff 4f       	sbci	r31, 0xFF	; 255
     ed2:	80 81       	ld	r24, Z
     ed4:	91 81       	ldd	r25, Z+1	; 0x01
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	d1 f6       	brne	.-76     	; 0xe8e <main+0x28c>
     eda:	27 c0       	rjmp	.+78     	; 0xf2a <main+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     edc:	8e 01       	movw	r16, r28
     ede:	07 5a       	subi	r16, 0xA7	; 167
     ee0:	1f 4f       	sbci	r17, 0xFF	; 255
     ee2:	fe 01       	movw	r30, r28
     ee4:	e5 5a       	subi	r30, 0xA5	; 165
     ee6:	ff 4f       	sbci	r31, 0xFF	; 255
     ee8:	60 81       	ld	r22, Z
     eea:	71 81       	ldd	r23, Z+1	; 0x01
     eec:	82 81       	ldd	r24, Z+2	; 0x02
     eee:	93 81       	ldd	r25, Z+3	; 0x03
     ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	f8 01       	movw	r30, r16
     efa:	91 83       	std	Z+1, r25	; 0x01
     efc:	80 83       	st	Z, r24
     efe:	de 01       	movw	r26, r28
     f00:	ab 5a       	subi	r26, 0xAB	; 171
     f02:	bf 4f       	sbci	r27, 0xFF	; 255
     f04:	fe 01       	movw	r30, r28
     f06:	e7 5a       	subi	r30, 0xA7	; 167
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	80 81       	ld	r24, Z
     f0c:	91 81       	ldd	r25, Z+1	; 0x01
     f0e:	8d 93       	st	X+, r24
     f10:	9c 93       	st	X, r25
     f12:	fe 01       	movw	r30, r28
     f14:	eb 5a       	subi	r30, 0xAB	; 171
     f16:	ff 4f       	sbci	r31, 0xFF	; 255
     f18:	80 81       	ld	r24, Z
     f1a:	91 81       	ldd	r25, Z+1	; 0x01
     f1c:	01 97       	sbiw	r24, 0x01	; 1
     f1e:	f1 f7       	brne	.-4      	; 0xf1c <main+0x31a>
     f20:	fe 01       	movw	r30, r28
     f22:	eb 5a       	subi	r30, 0xAB	; 171
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	91 83       	std	Z+1, r25	; 0x01
     f28:	80 83       	st	Z, r24
			_delay_ms(50);
			UART_sendByte(REPEAT);
     f2a:	82 e0       	ldi	r24, 0x02	; 2
     f2c:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <UART_sendByte>
     f30:	87 ce       	rjmp	.-754    	; 0xc40 <main+0x3e>
	 * if the byte received is + which indicates opening the door, it performs that code
	 * else, it will be - which is changing the password
	 */
	for(;;)
	{
		if(UART_recieveByte() == OPENDOOR)
     f32:	0e 94 77 1a 	call	0x34ee	; 0x34ee <UART_recieveByte>
     f36:	83 30       	cpi	r24, 0x03	; 3
     f38:	09 f0       	breq	.+2      	; 0xf3c <main+0x33a>
     f3a:	0c c2       	rjmp	.+1048   	; 0x1354 <main+0x752>
		{
			/*
			 * This block of code is used to compare the password received and the password stored in the EEPROM
			 */
			for(fail_counter = 0; fail_counter < 3; fail_counter++)
     f3c:	10 92 81 00 	sts	0x0081, r1
     f40:	fa c1       	rjmp	.+1012   	; 0x1336 <main+0x734>
			{
				recievePass();
     f42:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <recievePass>
				for(uint8 i = 0; i < 5; i++)
     f46:	fe 01       	movw	r30, r28
     f48:	ee 58       	subi	r30, 0x8E	; 142
     f4a:	ff 4f       	sbci	r31, 0xFF	; 255
     f4c:	10 82       	st	Z, r1
     f4e:	de c0       	rjmp	.+444    	; 0x110c <main+0x50a>
				{
					EEPROM_readByte(EEPROM_ADDRESS+i, &EEPROM_val);
     f50:	fe 01       	movw	r30, r28
     f52:	ee 58       	subi	r30, 0x8E	; 142
     f54:	ff 4f       	sbci	r31, 0xFF	; 255
     f56:	80 81       	ld	r24, Z
     f58:	88 2f       	mov	r24, r24
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	27 e8       	ldi	r18, 0x87	; 135
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	b9 01       	movw	r22, r18
     f62:	0e 94 d5 11 	call	0x23aa	; 0x23aa <EEPROM_readByte>
     f66:	fe 01       	movw	r30, r28
     f68:	ef 5a       	subi	r30, 0xAF	; 175
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	a8 e4       	ldi	r26, 0x48	; 72
     f72:	b2 e4       	ldi	r27, 0x42	; 66
     f74:	80 83       	st	Z, r24
     f76:	91 83       	std	Z+1, r25	; 0x01
     f78:	a2 83       	std	Z+2, r26	; 0x02
     f7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7c:	8e 01       	movw	r16, r28
     f7e:	03 5b       	subi	r16, 0xB3	; 179
     f80:	1f 4f       	sbci	r17, 0xFF	; 255
     f82:	fe 01       	movw	r30, r28
     f84:	ef 5a       	subi	r30, 0xAF	; 175
     f86:	ff 4f       	sbci	r31, 0xFF	; 255
     f88:	60 81       	ld	r22, Z
     f8a:	71 81       	ldd	r23, Z+1	; 0x01
     f8c:	82 81       	ldd	r24, Z+2	; 0x02
     f8e:	93 81       	ldd	r25, Z+3	; 0x03
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	4a ef       	ldi	r20, 0xFA	; 250
     f96:	54 e4       	ldi	r21, 0x44	; 68
     f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9c:	dc 01       	movw	r26, r24
     f9e:	cb 01       	movw	r24, r22
     fa0:	f8 01       	movw	r30, r16
     fa2:	80 83       	st	Z, r24
     fa4:	91 83       	std	Z+1, r25	; 0x01
     fa6:	a2 83       	std	Z+2, r26	; 0x02
     fa8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     faa:	fe 01       	movw	r30, r28
     fac:	e3 5b       	subi	r30, 0xB3	; 179
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	60 81       	ld	r22, Z
     fb2:	71 81       	ldd	r23, Z+1	; 0x01
     fb4:	82 81       	ldd	r24, Z+2	; 0x02
     fb6:	93 81       	ldd	r25, Z+3	; 0x03
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e8       	ldi	r20, 0x80	; 128
     fbe:	5f e3       	ldi	r21, 0x3F	; 63
     fc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fc4:	88 23       	and	r24, r24
     fc6:	44 f4       	brge	.+16     	; 0xfd8 <main+0x3d6>
		__ticks = 1;
     fc8:	fe 01       	movw	r30, r28
     fca:	e5 5b       	subi	r30, 0xB5	; 181
     fcc:	ff 4f       	sbci	r31, 0xFF	; 255
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	91 83       	std	Z+1, r25	; 0x01
     fd4:	80 83       	st	Z, r24
     fd6:	64 c0       	rjmp	.+200    	; 0x10a0 <main+0x49e>
	else if (__tmp > 65535)
     fd8:	fe 01       	movw	r30, r28
     fda:	e3 5b       	subi	r30, 0xB3	; 179
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	60 81       	ld	r22, Z
     fe0:	71 81       	ldd	r23, Z+1	; 0x01
     fe2:	82 81       	ldd	r24, Z+2	; 0x02
     fe4:	93 81       	ldd	r25, Z+3	; 0x03
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	3f ef       	ldi	r19, 0xFF	; 255
     fea:	4f e7       	ldi	r20, 0x7F	; 127
     fec:	57 e4       	ldi	r21, 0x47	; 71
     fee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ff2:	18 16       	cp	r1, r24
     ff4:	0c f0       	brlt	.+2      	; 0xff8 <main+0x3f6>
     ff6:	43 c0       	rjmp	.+134    	; 0x107e <main+0x47c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff8:	fe 01       	movw	r30, r28
     ffa:	ef 5a       	subi	r30, 0xAF	; 175
     ffc:	ff 4f       	sbci	r31, 0xFF	; 255
     ffe:	60 81       	ld	r22, Z
    1000:	71 81       	ldd	r23, Z+1	; 0x01
    1002:	82 81       	ldd	r24, Z+2	; 0x02
    1004:	93 81       	ldd	r25, Z+3	; 0x03
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	40 e2       	ldi	r20, 0x20	; 32
    100c:	51 e4       	ldi	r21, 0x41	; 65
    100e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	8e 01       	movw	r16, r28
    1018:	05 5b       	subi	r16, 0xB5	; 181
    101a:	1f 4f       	sbci	r17, 0xFF	; 255
    101c:	bc 01       	movw	r22, r24
    101e:	cd 01       	movw	r24, r26
    1020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	f8 01       	movw	r30, r16
    102a:	91 83       	std	Z+1, r25	; 0x01
    102c:	80 83       	st	Z, r24
    102e:	1f c0       	rjmp	.+62     	; 0x106e <main+0x46c>
    1030:	fe 01       	movw	r30, r28
    1032:	e7 5b       	subi	r30, 0xB7	; 183
    1034:	ff 4f       	sbci	r31, 0xFF	; 255
    1036:	88 ec       	ldi	r24, 0xC8	; 200
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	91 83       	std	Z+1, r25	; 0x01
    103c:	80 83       	st	Z, r24
    103e:	fe 01       	movw	r30, r28
    1040:	e7 5b       	subi	r30, 0xB7	; 183
    1042:	ff 4f       	sbci	r31, 0xFF	; 255
    1044:	80 81       	ld	r24, Z
    1046:	91 81       	ldd	r25, Z+1	; 0x01
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <main+0x446>
    104c:	fe 01       	movw	r30, r28
    104e:	e7 5b       	subi	r30, 0xB7	; 183
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	91 83       	std	Z+1, r25	; 0x01
    1054:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1056:	de 01       	movw	r26, r28
    1058:	a5 5b       	subi	r26, 0xB5	; 181
    105a:	bf 4f       	sbci	r27, 0xFF	; 255
    105c:	fe 01       	movw	r30, r28
    105e:	e5 5b       	subi	r30, 0xB5	; 181
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	80 81       	ld	r24, Z
    1064:	91 81       	ldd	r25, Z+1	; 0x01
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	11 96       	adiw	r26, 0x01	; 1
    106a:	9c 93       	st	X, r25
    106c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    106e:	fe 01       	movw	r30, r28
    1070:	e5 5b       	subi	r30, 0xB5	; 181
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	80 81       	ld	r24, Z
    1076:	91 81       	ldd	r25, Z+1	; 0x01
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	d1 f6       	brne	.-76     	; 0x1030 <main+0x42e>
    107c:	27 c0       	rjmp	.+78     	; 0x10cc <main+0x4ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    107e:	8e 01       	movw	r16, r28
    1080:	05 5b       	subi	r16, 0xB5	; 181
    1082:	1f 4f       	sbci	r17, 0xFF	; 255
    1084:	fe 01       	movw	r30, r28
    1086:	e3 5b       	subi	r30, 0xB3	; 179
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	60 81       	ld	r22, Z
    108c:	71 81       	ldd	r23, Z+1	; 0x01
    108e:	82 81       	ldd	r24, Z+2	; 0x02
    1090:	93 81       	ldd	r25, Z+3	; 0x03
    1092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	f8 01       	movw	r30, r16
    109c:	91 83       	std	Z+1, r25	; 0x01
    109e:	80 83       	st	Z, r24
    10a0:	de 01       	movw	r26, r28
    10a2:	a9 5b       	subi	r26, 0xB9	; 185
    10a4:	bf 4f       	sbci	r27, 0xFF	; 255
    10a6:	fe 01       	movw	r30, r28
    10a8:	e5 5b       	subi	r30, 0xB5	; 181
    10aa:	ff 4f       	sbci	r31, 0xFF	; 255
    10ac:	80 81       	ld	r24, Z
    10ae:	91 81       	ldd	r25, Z+1	; 0x01
    10b0:	8d 93       	st	X+, r24
    10b2:	9c 93       	st	X, r25
    10b4:	fe 01       	movw	r30, r28
    10b6:	e9 5b       	subi	r30, 0xB9	; 185
    10b8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ba:	80 81       	ld	r24, Z
    10bc:	91 81       	ldd	r25, Z+1	; 0x01
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	f1 f7       	brne	.-4      	; 0x10be <main+0x4bc>
    10c2:	fe 01       	movw	r30, r28
    10c4:	e9 5b       	subi	r30, 0xB9	; 185
    10c6:	ff 4f       	sbci	r31, 0xFF	; 255
    10c8:	91 83       	std	Z+1, r25	; 0x01
    10ca:	80 83       	st	Z, r24
					_delay_ms(50);
					if(comparePasswords(Pass[i], EEPROM_val))
    10cc:	fe 01       	movw	r30, r28
    10ce:	ee 58       	subi	r30, 0x8E	; 142
    10d0:	ff 4f       	sbci	r31, 0xFF	; 255
    10d2:	80 81       	ld	r24, Z
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	fc 01       	movw	r30, r24
    10da:	ee 57       	subi	r30, 0x7E	; 126
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	80 81       	ld	r24, Z
    10e0:	90 91 87 00 	lds	r25, 0x0087
    10e4:	69 2f       	mov	r22, r25
    10e6:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <comparePasswords>
    10ea:	88 23       	and	r24, r24
    10ec:	19 f0       	breq	.+6      	; 0x10f4 <main+0x4f2>
					{
						/*
						 * Break the loop since the bytes don't match and reset
						 */
						status = 0;
    10ee:	10 92 7a 00 	sts	0x007A, r1
    10f2:	13 c0       	rjmp	.+38     	; 0x111a <main+0x518>
						break;
					}
					else
					{
						status = 1;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	80 93 7a 00 	sts	0x007A, r24
			 * This block of code is used to compare the password received and the password stored in the EEPROM
			 */
			for(fail_counter = 0; fail_counter < 3; fail_counter++)
			{
				recievePass();
				for(uint8 i = 0; i < 5; i++)
    10fa:	de 01       	movw	r26, r28
    10fc:	ae 58       	subi	r26, 0x8E	; 142
    10fe:	bf 4f       	sbci	r27, 0xFF	; 255
    1100:	fe 01       	movw	r30, r28
    1102:	ee 58       	subi	r30, 0x8E	; 142
    1104:	ff 4f       	sbci	r31, 0xFF	; 255
    1106:	80 81       	ld	r24, Z
    1108:	8f 5f       	subi	r24, 0xFF	; 255
    110a:	8c 93       	st	X, r24
    110c:	fe 01       	movw	r30, r28
    110e:	ee 58       	subi	r30, 0x8E	; 142
    1110:	ff 4f       	sbci	r31, 0xFF	; 255
    1112:	80 81       	ld	r24, Z
    1114:	85 30       	cpi	r24, 0x05	; 5
    1116:	08 f4       	brcc	.+2      	; 0x111a <main+0x518>
    1118:	1b cf       	rjmp	.-458    	; 0xf50 <main+0x34e>

				/*
				 * If status is one, meaning the passwords are matching, send to the other MC that there is no need to repeat
				 * the process and we can move on
				 */
				if(status)
    111a:	80 91 7a 00 	lds	r24, 0x007A
    111e:	88 23       	and	r24, r24
    1120:	09 f4       	brne	.+2      	; 0x1124 <main+0x522>
    1122:	8c c0       	rjmp	.+280    	; 0x123c <main+0x63a>
				{
					UART_sendByte(READY);
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <UART_sendByte>
    112a:	fe 01       	movw	r30, r28
    112c:	ed 5b       	subi	r30, 0xBD	; 189
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	a8 e4       	ldi	r26, 0x48	; 72
    1136:	b2 e4       	ldi	r27, 0x42	; 66
    1138:	80 83       	st	Z, r24
    113a:	91 83       	std	Z+1, r25	; 0x01
    113c:	a2 83       	std	Z+2, r26	; 0x02
    113e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1140:	8e 01       	movw	r16, r28
    1142:	01 5c       	subi	r16, 0xC1	; 193
    1144:	1f 4f       	sbci	r17, 0xFF	; 255
    1146:	fe 01       	movw	r30, r28
    1148:	ed 5b       	subi	r30, 0xBD	; 189
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	60 81       	ld	r22, Z
    114e:	71 81       	ldd	r23, Z+1	; 0x01
    1150:	82 81       	ldd	r24, Z+2	; 0x02
    1152:	93 81       	ldd	r25, Z+3	; 0x03
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	4a ef       	ldi	r20, 0xFA	; 250
    115a:	54 e4       	ldi	r21, 0x44	; 68
    115c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	f8 01       	movw	r30, r16
    1166:	80 83       	st	Z, r24
    1168:	91 83       	std	Z+1, r25	; 0x01
    116a:	a2 83       	std	Z+2, r26	; 0x02
    116c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    116e:	fe 01       	movw	r30, r28
    1170:	ff 96       	adiw	r30, 0x3f	; 63
    1172:	60 81       	ld	r22, Z
    1174:	71 81       	ldd	r23, Z+1	; 0x01
    1176:	82 81       	ldd	r24, Z+2	; 0x02
    1178:	93 81       	ldd	r25, Z+3	; 0x03
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e8       	ldi	r20, 0x80	; 128
    1180:	5f e3       	ldi	r21, 0x3F	; 63
    1182:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1186:	88 23       	and	r24, r24
    1188:	2c f4       	brge	.+10     	; 0x1194 <main+0x592>
		__ticks = 1;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	9e af       	std	Y+62, r25	; 0x3e
    1190:	8d af       	std	Y+61, r24	; 0x3d
    1192:	46 c0       	rjmp	.+140    	; 0x1220 <main+0x61e>
	else if (__tmp > 65535)
    1194:	fe 01       	movw	r30, r28
    1196:	ff 96       	adiw	r30, 0x3f	; 63
    1198:	60 81       	ld	r22, Z
    119a:	71 81       	ldd	r23, Z+1	; 0x01
    119c:	82 81       	ldd	r24, Z+2	; 0x02
    119e:	93 81       	ldd	r25, Z+3	; 0x03
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	3f ef       	ldi	r19, 0xFF	; 255
    11a4:	4f e7       	ldi	r20, 0x7F	; 127
    11a6:	57 e4       	ldi	r21, 0x47	; 71
    11a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11ac:	18 16       	cp	r1, r24
    11ae:	64 f5       	brge	.+88     	; 0x1208 <main+0x606>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b0:	fe 01       	movw	r30, r28
    11b2:	ed 5b       	subi	r30, 0xBD	; 189
    11b4:	ff 4f       	sbci	r31, 0xFF	; 255
    11b6:	60 81       	ld	r22, Z
    11b8:	71 81       	ldd	r23, Z+1	; 0x01
    11ba:	82 81       	ldd	r24, Z+2	; 0x02
    11bc:	93 81       	ldd	r25, Z+3	; 0x03
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e2       	ldi	r20, 0x20	; 32
    11c4:	51 e4       	ldi	r21, 0x41	; 65
    11c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	bc 01       	movw	r22, r24
    11d0:	cd 01       	movw	r24, r26
    11d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	9e af       	std	Y+62, r25	; 0x3e
    11dc:	8d af       	std	Y+61, r24	; 0x3d
    11de:	0f c0       	rjmp	.+30     	; 0x11fe <main+0x5fc>
    11e0:	88 ec       	ldi	r24, 0xC8	; 200
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	9c af       	std	Y+60, r25	; 0x3c
    11e6:	8b af       	std	Y+59, r24	; 0x3b
    11e8:	8b ad       	ldd	r24, Y+59	; 0x3b
    11ea:	9c ad       	ldd	r25, Y+60	; 0x3c
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	f1 f7       	brne	.-4      	; 0x11ec <main+0x5ea>
    11f0:	9c af       	std	Y+60, r25	; 0x3c
    11f2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    11f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	9e af       	std	Y+62, r25	; 0x3e
    11fc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1200:	9e ad       	ldd	r25, Y+62	; 0x3e
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	69 f7       	brne	.-38     	; 0x11e0 <main+0x5de>
    1206:	16 c0       	rjmp	.+44     	; 0x1234 <main+0x632>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1208:	fe 01       	movw	r30, r28
    120a:	ff 96       	adiw	r30, 0x3f	; 63
    120c:	60 81       	ld	r22, Z
    120e:	71 81       	ldd	r23, Z+1	; 0x01
    1210:	82 81       	ldd	r24, Z+2	; 0x02
    1212:	93 81       	ldd	r25, Z+3	; 0x03
    1214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1218:	dc 01       	movw	r26, r24
    121a:	cb 01       	movw	r24, r22
    121c:	9e af       	std	Y+62, r25	; 0x3e
    121e:	8d af       	std	Y+61, r24	; 0x3d
    1220:	8d ad       	ldd	r24, Y+61	; 0x3d
    1222:	9e ad       	ldd	r25, Y+62	; 0x3e
    1224:	9a af       	std	Y+58, r25	; 0x3a
    1226:	89 af       	std	Y+57, r24	; 0x39
    1228:	89 ad       	ldd	r24, Y+57	; 0x39
    122a:	9a ad       	ldd	r25, Y+58	; 0x3a
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	f1 f7       	brne	.-4      	; 0x122c <main+0x62a>
    1230:	9a af       	std	Y+58, r25	; 0x3a
    1232:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(50);
					UART_sendByte(NO_REPEAT);
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <UART_sendByte>
    123a:	82 c0       	rjmp	.+260    	; 0x1340 <main+0x73e>
					break;
				}
				else
				{
					UART_sendByte(READY);
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <UART_sendByte>
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	a8 e4       	ldi	r26, 0x48	; 72
    1248:	b2 e4       	ldi	r27, 0x42	; 66
    124a:	8d ab       	std	Y+53, r24	; 0x35
    124c:	9e ab       	std	Y+54, r25	; 0x36
    124e:	af ab       	std	Y+55, r26	; 0x37
    1250:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1252:	6d a9       	ldd	r22, Y+53	; 0x35
    1254:	7e a9       	ldd	r23, Y+54	; 0x36
    1256:	8f a9       	ldd	r24, Y+55	; 0x37
    1258:	98 ad       	ldd	r25, Y+56	; 0x38
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	4a ef       	ldi	r20, 0xFA	; 250
    1260:	54 e4       	ldi	r21, 0x44	; 68
    1262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	89 ab       	std	Y+49, r24	; 0x31
    126c:	9a ab       	std	Y+50, r25	; 0x32
    126e:	ab ab       	std	Y+51, r26	; 0x33
    1270:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1272:	69 a9       	ldd	r22, Y+49	; 0x31
    1274:	7a a9       	ldd	r23, Y+50	; 0x32
    1276:	8b a9       	ldd	r24, Y+51	; 0x33
    1278:	9c a9       	ldd	r25, Y+52	; 0x34
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e8       	ldi	r20, 0x80	; 128
    1280:	5f e3       	ldi	r21, 0x3F	; 63
    1282:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1286:	88 23       	and	r24, r24
    1288:	2c f4       	brge	.+10     	; 0x1294 <main+0x692>
		__ticks = 1;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	98 ab       	std	Y+48, r25	; 0x30
    1290:	8f a7       	std	Y+47, r24	; 0x2f
    1292:	3f c0       	rjmp	.+126    	; 0x1312 <main+0x710>
	else if (__tmp > 65535)
    1294:	69 a9       	ldd	r22, Y+49	; 0x31
    1296:	7a a9       	ldd	r23, Y+50	; 0x32
    1298:	8b a9       	ldd	r24, Y+51	; 0x33
    129a:	9c a9       	ldd	r25, Y+52	; 0x34
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	3f ef       	ldi	r19, 0xFF	; 255
    12a0:	4f e7       	ldi	r20, 0x7F	; 127
    12a2:	57 e4       	ldi	r21, 0x47	; 71
    12a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12a8:	18 16       	cp	r1, r24
    12aa:	4c f5       	brge	.+82     	; 0x12fe <main+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ac:	6d a9       	ldd	r22, Y+53	; 0x35
    12ae:	7e a9       	ldd	r23, Y+54	; 0x36
    12b0:	8f a9       	ldd	r24, Y+55	; 0x37
    12b2:	98 ad       	ldd	r25, Y+56	; 0x38
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	40 e2       	ldi	r20, 0x20	; 32
    12ba:	51 e4       	ldi	r21, 0x41	; 65
    12bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	bc 01       	movw	r22, r24
    12c6:	cd 01       	movw	r24, r26
    12c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	98 ab       	std	Y+48, r25	; 0x30
    12d2:	8f a7       	std	Y+47, r24	; 0x2f
    12d4:	0f c0       	rjmp	.+30     	; 0x12f4 <main+0x6f2>
    12d6:	88 ec       	ldi	r24, 0xC8	; 200
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	9e a7       	std	Y+46, r25	; 0x2e
    12dc:	8d a7       	std	Y+45, r24	; 0x2d
    12de:	8d a5       	ldd	r24, Y+45	; 0x2d
    12e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	f1 f7       	brne	.-4      	; 0x12e2 <main+0x6e0>
    12e6:	9e a7       	std	Y+46, r25	; 0x2e
    12e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    12ec:	98 a9       	ldd	r25, Y+48	; 0x30
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	98 ab       	std	Y+48, r25	; 0x30
    12f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    12f6:	98 a9       	ldd	r25, Y+48	; 0x30
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	69 f7       	brne	.-38     	; 0x12d6 <main+0x6d4>
    12fc:	14 c0       	rjmp	.+40     	; 0x1326 <main+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1300:	7a a9       	ldd	r23, Y+50	; 0x32
    1302:	8b a9       	ldd	r24, Y+51	; 0x33
    1304:	9c a9       	ldd	r25, Y+52	; 0x34
    1306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	98 ab       	std	Y+48, r25	; 0x30
    1310:	8f a7       	std	Y+47, r24	; 0x2f
    1312:	8f a5       	ldd	r24, Y+47	; 0x2f
    1314:	98 a9       	ldd	r25, Y+48	; 0x30
    1316:	9c a7       	std	Y+44, r25	; 0x2c
    1318:	8b a7       	std	Y+43, r24	; 0x2b
    131a:	8b a5       	ldd	r24, Y+43	; 0x2b
    131c:	9c a5       	ldd	r25, Y+44	; 0x2c
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	f1 f7       	brne	.-4      	; 0x131e <main+0x71c>
    1322:	9c a7       	std	Y+44, r25	; 0x2c
    1324:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(50);
					UART_sendByte(REPEAT);
    1326:	82 e0       	ldi	r24, 0x02	; 2
    1328:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <UART_sendByte>
		if(UART_recieveByte() == OPENDOOR)
		{
			/*
			 * This block of code is used to compare the password received and the password stored in the EEPROM
			 */
			for(fail_counter = 0; fail_counter < 3; fail_counter++)
    132c:	80 91 81 00 	lds	r24, 0x0081
    1330:	8f 5f       	subi	r24, 0xFF	; 255
    1332:	80 93 81 00 	sts	0x0081, r24
    1336:	80 91 81 00 	lds	r24, 0x0081
    133a:	83 30       	cpi	r24, 0x03	; 3
    133c:	08 f4       	brcc	.+2      	; 0x1340 <main+0x73e>
    133e:	01 ce       	rjmp	.-1022   	; 0xf42 <main+0x340>
					_delay_ms(50);
					UART_sendByte(REPEAT);
				}
			}

			if(fail_counter == 3)
    1340:	80 91 81 00 	lds	r24, 0x0081
    1344:	83 30       	cpi	r24, 0x03	; 3
    1346:	19 f4       	brne	.+6      	; 0x134e <main+0x74c>
			{
				/*
				 * Lock system since failure to enter the correct password is 3
				 */
				lockSystem();
    1348:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lockSystem>
    134c:	f2 cd       	rjmp	.-1052   	; 0xf32 <main+0x330>
			else
			{
				/*
				 * The password is correct and therefore opening the door starts
				 */
				openDoor();
    134e:	0e 94 18 0c 	call	0x1830	; 0x1830 <openDoor>
    1352:	ef cd       	rjmp	.-1058   	; 0xf32 <main+0x330>
		else
		{
			/*
			 * This block of code is used to compare the password received and the password stored in the EEPROM
			 */
			for(fail_counter = 0; fail_counter < 3; fail_counter++)
    1354:	10 92 81 00 	sts	0x0081, r1
    1358:	a6 c1       	rjmp	.+844    	; 0x16a6 <main+0xaa4>
			{
				recievePass();
    135a:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <recievePass>
				for(uint8 i = 0; i < 5; i++)
    135e:	fe 01       	movw	r30, r28
    1360:	ef 58       	subi	r30, 0x8F	; 143
    1362:	ff 4f       	sbci	r31, 0xFF	; 255
    1364:	10 82       	st	Z, r1
    1366:	9d c0       	rjmp	.+314    	; 0x14a2 <main+0x8a0>
				{
					EEPROM_readByte(EEPROM_ADDRESS+i, &EEPROM_val);
    1368:	fe 01       	movw	r30, r28
    136a:	ef 58       	subi	r30, 0x8F	; 143
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	80 81       	ld	r24, Z
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	27 e8       	ldi	r18, 0x87	; 135
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	b9 01       	movw	r22, r18
    137a:	0e 94 d5 11 	call	0x23aa	; 0x23aa <EEPROM_readByte>
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	a8 e4       	ldi	r26, 0x48	; 72
    1384:	b2 e4       	ldi	r27, 0x42	; 66
    1386:	8f a3       	std	Y+39, r24	; 0x27
    1388:	98 a7       	std	Y+40, r25	; 0x28
    138a:	a9 a7       	std	Y+41, r26	; 0x29
    138c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    138e:	6f a1       	ldd	r22, Y+39	; 0x27
    1390:	78 a5       	ldd	r23, Y+40	; 0x28
    1392:	89 a5       	ldd	r24, Y+41	; 0x29
    1394:	9a a5       	ldd	r25, Y+42	; 0x2a
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	4a ef       	ldi	r20, 0xFA	; 250
    139c:	54 e4       	ldi	r21, 0x44	; 68
    139e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	8b a3       	std	Y+35, r24	; 0x23
    13a8:	9c a3       	std	Y+36, r25	; 0x24
    13aa:	ad a3       	std	Y+37, r26	; 0x25
    13ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13ae:	6b a1       	ldd	r22, Y+35	; 0x23
    13b0:	7c a1       	ldd	r23, Y+36	; 0x24
    13b2:	8d a1       	ldd	r24, Y+37	; 0x25
    13b4:	9e a1       	ldd	r25, Y+38	; 0x26
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e8       	ldi	r20, 0x80	; 128
    13bc:	5f e3       	ldi	r21, 0x3F	; 63
    13be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13c2:	88 23       	and	r24, r24
    13c4:	2c f4       	brge	.+10     	; 0x13d0 <main+0x7ce>
		__ticks = 1;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	9a a3       	std	Y+34, r25	; 0x22
    13cc:	89 a3       	std	Y+33, r24	; 0x21
    13ce:	3f c0       	rjmp	.+126    	; 0x144e <main+0x84c>
	else if (__tmp > 65535)
    13d0:	6b a1       	ldd	r22, Y+35	; 0x23
    13d2:	7c a1       	ldd	r23, Y+36	; 0x24
    13d4:	8d a1       	ldd	r24, Y+37	; 0x25
    13d6:	9e a1       	ldd	r25, Y+38	; 0x26
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	3f ef       	ldi	r19, 0xFF	; 255
    13dc:	4f e7       	ldi	r20, 0x7F	; 127
    13de:	57 e4       	ldi	r21, 0x47	; 71
    13e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e4:	18 16       	cp	r1, r24
    13e6:	4c f5       	brge	.+82     	; 0x143a <main+0x838>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e8:	6f a1       	ldd	r22, Y+39	; 0x27
    13ea:	78 a5       	ldd	r23, Y+40	; 0x28
    13ec:	89 a5       	ldd	r24, Y+41	; 0x29
    13ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e2       	ldi	r20, 0x20	; 32
    13f6:	51 e4       	ldi	r21, 0x41	; 65
    13f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	bc 01       	movw	r22, r24
    1402:	cd 01       	movw	r24, r26
    1404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	9a a3       	std	Y+34, r25	; 0x22
    140e:	89 a3       	std	Y+33, r24	; 0x21
    1410:	0f c0       	rjmp	.+30     	; 0x1430 <main+0x82e>
    1412:	88 ec       	ldi	r24, 0xC8	; 200
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	98 a3       	std	Y+32, r25	; 0x20
    1418:	8f 8f       	std	Y+31, r24	; 0x1f
    141a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    141c:	98 a1       	ldd	r25, Y+32	; 0x20
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	f1 f7       	brne	.-4      	; 0x141e <main+0x81c>
    1422:	98 a3       	std	Y+32, r25	; 0x20
    1424:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1426:	89 a1       	ldd	r24, Y+33	; 0x21
    1428:	9a a1       	ldd	r25, Y+34	; 0x22
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	9a a3       	std	Y+34, r25	; 0x22
    142e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1430:	89 a1       	ldd	r24, Y+33	; 0x21
    1432:	9a a1       	ldd	r25, Y+34	; 0x22
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	69 f7       	brne	.-38     	; 0x1412 <main+0x810>
    1438:	14 c0       	rjmp	.+40     	; 0x1462 <main+0x860>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    143a:	6b a1       	ldd	r22, Y+35	; 0x23
    143c:	7c a1       	ldd	r23, Y+36	; 0x24
    143e:	8d a1       	ldd	r24, Y+37	; 0x25
    1440:	9e a1       	ldd	r25, Y+38	; 0x26
    1442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	9a a3       	std	Y+34, r25	; 0x22
    144c:	89 a3       	std	Y+33, r24	; 0x21
    144e:	89 a1       	ldd	r24, Y+33	; 0x21
    1450:	9a a1       	ldd	r25, Y+34	; 0x22
    1452:	9e 8f       	std	Y+30, r25	; 0x1e
    1454:	8d 8f       	std	Y+29, r24	; 0x1d
    1456:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1458:	9e 8d       	ldd	r25, Y+30	; 0x1e
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	f1 f7       	brne	.-4      	; 0x145a <main+0x858>
    145e:	9e 8f       	std	Y+30, r25	; 0x1e
    1460:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(50);
					if(comparePasswords(Pass[i], EEPROM_val))
    1462:	fe 01       	movw	r30, r28
    1464:	ef 58       	subi	r30, 0x8F	; 143
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	80 81       	ld	r24, Z
    146a:	88 2f       	mov	r24, r24
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	fc 01       	movw	r30, r24
    1470:	ee 57       	subi	r30, 0x7E	; 126
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	80 81       	ld	r24, Z
    1476:	90 91 87 00 	lds	r25, 0x0087
    147a:	69 2f       	mov	r22, r25
    147c:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <comparePasswords>
    1480:	88 23       	and	r24, r24
    1482:	19 f0       	breq	.+6      	; 0x148a <main+0x888>
					{
						/*
						 * Break the loop since the bytes don't match and reset
						 */
						status = 0;
    1484:	10 92 7a 00 	sts	0x007A, r1
    1488:	13 c0       	rjmp	.+38     	; 0x14b0 <main+0x8ae>
						break;
					}
					else
					{
						status = 1;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	80 93 7a 00 	sts	0x007A, r24
			 * This block of code is used to compare the password received and the password stored in the EEPROM
			 */
			for(fail_counter = 0; fail_counter < 3; fail_counter++)
			{
				recievePass();
				for(uint8 i = 0; i < 5; i++)
    1490:	de 01       	movw	r26, r28
    1492:	af 58       	subi	r26, 0x8F	; 143
    1494:	bf 4f       	sbci	r27, 0xFF	; 255
    1496:	fe 01       	movw	r30, r28
    1498:	ef 58       	subi	r30, 0x8F	; 143
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	80 81       	ld	r24, Z
    149e:	8f 5f       	subi	r24, 0xFF	; 255
    14a0:	8c 93       	st	X, r24
    14a2:	fe 01       	movw	r30, r28
    14a4:	ef 58       	subi	r30, 0x8F	; 143
    14a6:	ff 4f       	sbci	r31, 0xFF	; 255
    14a8:	80 81       	ld	r24, Z
    14aa:	85 30       	cpi	r24, 0x05	; 5
    14ac:	08 f4       	brcc	.+2      	; 0x14b0 <main+0x8ae>
    14ae:	5c cf       	rjmp	.-328    	; 0x1368 <main+0x766>

				/*
				 * If status is one, meaning the passwords are matching, send to the other MC that there is no need to repeat
				 * the process and we can move on
				 */
				if(status)
    14b0:	80 91 7a 00 	lds	r24, 0x007A
    14b4:	88 23       	and	r24, r24
    14b6:	09 f4       	brne	.+2      	; 0x14ba <main+0x8b8>
    14b8:	79 c0       	rjmp	.+242    	; 0x15ac <main+0x9aa>
				{
					UART_sendByte(READY);
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <UART_sendByte>
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	a8 e4       	ldi	r26, 0x48	; 72
    14c6:	b2 e4       	ldi	r27, 0x42	; 66
    14c8:	89 8f       	std	Y+25, r24	; 0x19
    14ca:	9a 8f       	std	Y+26, r25	; 0x1a
    14cc:	ab 8f       	std	Y+27, r26	; 0x1b
    14ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d0:	69 8d       	ldd	r22, Y+25	; 0x19
    14d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	4a ef       	ldi	r20, 0xFA	; 250
    14de:	54 e4       	ldi	r21, 0x44	; 68
    14e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	8d 8b       	std	Y+21, r24	; 0x15
    14ea:	9e 8b       	std	Y+22, r25	; 0x16
    14ec:	af 8b       	std	Y+23, r26	; 0x17
    14ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14f0:	6d 89       	ldd	r22, Y+21	; 0x15
    14f2:	7e 89       	ldd	r23, Y+22	; 0x16
    14f4:	8f 89       	ldd	r24, Y+23	; 0x17
    14f6:	98 8d       	ldd	r25, Y+24	; 0x18
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	40 e8       	ldi	r20, 0x80	; 128
    14fe:	5f e3       	ldi	r21, 0x3F	; 63
    1500:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1504:	88 23       	and	r24, r24
    1506:	2c f4       	brge	.+10     	; 0x1512 <main+0x910>
		__ticks = 1;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	9c 8b       	std	Y+20, r25	; 0x14
    150e:	8b 8b       	std	Y+19, r24	; 0x13
    1510:	3f c0       	rjmp	.+126    	; 0x1590 <main+0x98e>
	else if (__tmp > 65535)
    1512:	6d 89       	ldd	r22, Y+21	; 0x15
    1514:	7e 89       	ldd	r23, Y+22	; 0x16
    1516:	8f 89       	ldd	r24, Y+23	; 0x17
    1518:	98 8d       	ldd	r25, Y+24	; 0x18
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	3f ef       	ldi	r19, 0xFF	; 255
    151e:	4f e7       	ldi	r20, 0x7F	; 127
    1520:	57 e4       	ldi	r21, 0x47	; 71
    1522:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1526:	18 16       	cp	r1, r24
    1528:	4c f5       	brge	.+82     	; 0x157c <main+0x97a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152a:	69 8d       	ldd	r22, Y+25	; 0x19
    152c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    152e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1530:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	40 e2       	ldi	r20, 0x20	; 32
    1538:	51 e4       	ldi	r21, 0x41	; 65
    153a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	bc 01       	movw	r22, r24
    1544:	cd 01       	movw	r24, r26
    1546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	9c 8b       	std	Y+20, r25	; 0x14
    1550:	8b 8b       	std	Y+19, r24	; 0x13
    1552:	0f c0       	rjmp	.+30     	; 0x1572 <main+0x970>
    1554:	88 ec       	ldi	r24, 0xC8	; 200
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	9a 8b       	std	Y+18, r25	; 0x12
    155a:	89 8b       	std	Y+17, r24	; 0x11
    155c:	89 89       	ldd	r24, Y+17	; 0x11
    155e:	9a 89       	ldd	r25, Y+18	; 0x12
    1560:	01 97       	sbiw	r24, 0x01	; 1
    1562:	f1 f7       	brne	.-4      	; 0x1560 <main+0x95e>
    1564:	9a 8b       	std	Y+18, r25	; 0x12
    1566:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1568:	8b 89       	ldd	r24, Y+19	; 0x13
    156a:	9c 89       	ldd	r25, Y+20	; 0x14
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	9c 8b       	std	Y+20, r25	; 0x14
    1570:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1572:	8b 89       	ldd	r24, Y+19	; 0x13
    1574:	9c 89       	ldd	r25, Y+20	; 0x14
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	69 f7       	brne	.-38     	; 0x1554 <main+0x952>
    157a:	14 c0       	rjmp	.+40     	; 0x15a4 <main+0x9a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    157c:	6d 89       	ldd	r22, Y+21	; 0x15
    157e:	7e 89       	ldd	r23, Y+22	; 0x16
    1580:	8f 89       	ldd	r24, Y+23	; 0x17
    1582:	98 8d       	ldd	r25, Y+24	; 0x18
    1584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	9c 8b       	std	Y+20, r25	; 0x14
    158e:	8b 8b       	std	Y+19, r24	; 0x13
    1590:	8b 89       	ldd	r24, Y+19	; 0x13
    1592:	9c 89       	ldd	r25, Y+20	; 0x14
    1594:	98 8b       	std	Y+16, r25	; 0x10
    1596:	8f 87       	std	Y+15, r24	; 0x0f
    1598:	8f 85       	ldd	r24, Y+15	; 0x0f
    159a:	98 89       	ldd	r25, Y+16	; 0x10
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	f1 f7       	brne	.-4      	; 0x159c <main+0x99a>
    15a0:	98 8b       	std	Y+16, r25	; 0x10
    15a2:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(50);
					UART_sendByte(NO_REPEAT);
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <UART_sendByte>
    15aa:	82 c0       	rjmp	.+260    	; 0x16b0 <main+0xaae>
					break;
				}
				else
				{
					UART_sendByte(READY);
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <UART_sendByte>
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	a8 e4       	ldi	r26, 0x48	; 72
    15b8:	b2 e4       	ldi	r27, 0x42	; 66
    15ba:	8b 87       	std	Y+11, r24	; 0x0b
    15bc:	9c 87       	std	Y+12, r25	; 0x0c
    15be:	ad 87       	std	Y+13, r26	; 0x0d
    15c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	4a ef       	ldi	r20, 0xFA	; 250
    15d0:	54 e4       	ldi	r21, 0x44	; 68
    15d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	8f 83       	std	Y+7, r24	; 0x07
    15dc:	98 87       	std	Y+8, r25	; 0x08
    15de:	a9 87       	std	Y+9, r26	; 0x09
    15e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15e2:	6f 81       	ldd	r22, Y+7	; 0x07
    15e4:	78 85       	ldd	r23, Y+8	; 0x08
    15e6:	89 85       	ldd	r24, Y+9	; 0x09
    15e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 e8       	ldi	r20, 0x80	; 128
    15f0:	5f e3       	ldi	r21, 0x3F	; 63
    15f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15f6:	88 23       	and	r24, r24
    15f8:	2c f4       	brge	.+10     	; 0x1604 <main+0xa02>
		__ticks = 1;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	9e 83       	std	Y+6, r25	; 0x06
    1600:	8d 83       	std	Y+5, r24	; 0x05
    1602:	3f c0       	rjmp	.+126    	; 0x1682 <main+0xa80>
	else if (__tmp > 65535)
    1604:	6f 81       	ldd	r22, Y+7	; 0x07
    1606:	78 85       	ldd	r23, Y+8	; 0x08
    1608:	89 85       	ldd	r24, Y+9	; 0x09
    160a:	9a 85       	ldd	r25, Y+10	; 0x0a
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	3f ef       	ldi	r19, 0xFF	; 255
    1610:	4f e7       	ldi	r20, 0x7F	; 127
    1612:	57 e4       	ldi	r21, 0x47	; 71
    1614:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1618:	18 16       	cp	r1, r24
    161a:	4c f5       	brge	.+82     	; 0x166e <main+0xa6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    161c:	6b 85       	ldd	r22, Y+11	; 0x0b
    161e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1620:	8d 85       	ldd	r24, Y+13	; 0x0d
    1622:	9e 85       	ldd	r25, Y+14	; 0x0e
    1624:	20 e0       	ldi	r18, 0x00	; 0
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	40 e2       	ldi	r20, 0x20	; 32
    162a:	51 e4       	ldi	r21, 0x41	; 65
    162c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	bc 01       	movw	r22, r24
    1636:	cd 01       	movw	r24, r26
    1638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	9e 83       	std	Y+6, r25	; 0x06
    1642:	8d 83       	std	Y+5, r24	; 0x05
    1644:	0f c0       	rjmp	.+30     	; 0x1664 <main+0xa62>
    1646:	88 ec       	ldi	r24, 0xC8	; 200
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	9c 83       	std	Y+4, r25	; 0x04
    164c:	8b 83       	std	Y+3, r24	; 0x03
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	9c 81       	ldd	r25, Y+4	; 0x04
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	f1 f7       	brne	.-4      	; 0x1652 <main+0xa50>
    1656:	9c 83       	std	Y+4, r25	; 0x04
    1658:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165a:	8d 81       	ldd	r24, Y+5	; 0x05
    165c:	9e 81       	ldd	r25, Y+6	; 0x06
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	9e 83       	std	Y+6, r25	; 0x06
    1662:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1664:	8d 81       	ldd	r24, Y+5	; 0x05
    1666:	9e 81       	ldd	r25, Y+6	; 0x06
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	69 f7       	brne	.-38     	; 0x1646 <main+0xa44>
    166c:	14 c0       	rjmp	.+40     	; 0x1696 <main+0xa94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    166e:	6f 81       	ldd	r22, Y+7	; 0x07
    1670:	78 85       	ldd	r23, Y+8	; 0x08
    1672:	89 85       	ldd	r24, Y+9	; 0x09
    1674:	9a 85       	ldd	r25, Y+10	; 0x0a
    1676:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	9e 83       	std	Y+6, r25	; 0x06
    1680:	8d 83       	std	Y+5, r24	; 0x05
    1682:	8d 81       	ldd	r24, Y+5	; 0x05
    1684:	9e 81       	ldd	r25, Y+6	; 0x06
    1686:	9a 83       	std	Y+2, r25	; 0x02
    1688:	89 83       	std	Y+1, r24	; 0x01
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	9a 81       	ldd	r25, Y+2	; 0x02
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	f1 f7       	brne	.-4      	; 0x168e <main+0xa8c>
    1692:	9a 83       	std	Y+2, r25	; 0x02
    1694:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(50);
					UART_sendByte(REPEAT);
    1696:	82 e0       	ldi	r24, 0x02	; 2
    1698:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <UART_sendByte>
		else
		{
			/*
			 * This block of code is used to compare the password received and the password stored in the EEPROM
			 */
			for(fail_counter = 0; fail_counter < 3; fail_counter++)
    169c:	80 91 81 00 	lds	r24, 0x0081
    16a0:	8f 5f       	subi	r24, 0xFF	; 255
    16a2:	80 93 81 00 	sts	0x0081, r24
    16a6:	80 91 81 00 	lds	r24, 0x0081
    16aa:	83 30       	cpi	r24, 0x03	; 3
    16ac:	08 f4       	brcc	.+2      	; 0x16b0 <main+0xaae>
    16ae:	55 ce       	rjmp	.-854    	; 0x135a <main+0x758>
					_delay_ms(50);
					UART_sendByte(REPEAT);
				}
			}

			if(fail_counter == 3)
    16b0:	80 91 81 00 	lds	r24, 0x0081
    16b4:	83 30       	cpi	r24, 0x03	; 3
    16b6:	19 f4       	brne	.+6      	; 0x16be <main+0xabc>
			{
				/*
				 * Lock system since failure to enter the correct password is 3
				 */
				lockSystem();
    16b8:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <lockSystem>
    16bc:	3a cc       	rjmp	.-1932   	; 0xf32 <main+0x330>
			else
			{
				/*
				 * The password is correct and therefore changing password starts
				 */
				changePass();
    16be:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <changePass>
    16c2:	37 cc       	rjmp	.-1938   	; 0xf32 <main+0x330>

000016c4 <comparePasswords>:
 *  							Function Definitions
 *----------------------------------------------------------------------------*/


uint8 comparePasswords(uint8 Val, uint8 Val2)
{
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <comparePasswords+0x6>
    16ca:	0f 92       	push	r0
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	6a 83       	std	Y+2, r22	; 0x02
	if (Val != Val2) // Passwords do not match
    16d4:	99 81       	ldd	r25, Y+1	; 0x01
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	98 17       	cp	r25, r24
    16da:	19 f0       	breq	.+6      	; 0x16e2 <comparePasswords+0x1e>
	{
		return 1;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	8b 83       	std	Y+3, r24	; 0x03
    16e0:	01 c0       	rjmp	.+2      	; 0x16e4 <comparePasswords+0x20>
	}
    return 0; // Passwords match
    16e2:	1b 82       	std	Y+3, r1	; 0x03
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	cf 91       	pop	r28
    16ee:	df 91       	pop	r29
    16f0:	08 95       	ret

000016f2 <recievePass>:


void recievePass(){
    16f2:	0f 93       	push	r16
    16f4:	1f 93       	push	r17
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	2f 97       	sbiw	r28, 0x0f	; 15
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	de bf       	out	0x3e, r29	; 62
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Wait for the HMI to be ready
	 */
	while(UART_recieveByte() != READY);
    170a:	0e 94 77 1a 	call	0x34ee	; 0x34ee <UART_recieveByte>
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	e1 f7       	brne	.-8      	; 0x170a <recievePass+0x18>

	for(uint8 i = 0; i < 5; i++)
    1712:	1f 86       	std	Y+15, r1	; 0x0f
    1714:	7e c0       	rjmp	.+252    	; 0x1812 <recievePass+0x120>
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	a8 e4       	ldi	r26, 0x48	; 72
    171c:	b2 e4       	ldi	r27, 0x42	; 66
    171e:	8b 87       	std	Y+11, r24	; 0x0b
    1720:	9c 87       	std	Y+12, r25	; 0x0c
    1722:	ad 87       	std	Y+13, r26	; 0x0d
    1724:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1726:	6b 85       	ldd	r22, Y+11	; 0x0b
    1728:	7c 85       	ldd	r23, Y+12	; 0x0c
    172a:	8d 85       	ldd	r24, Y+13	; 0x0d
    172c:	9e 85       	ldd	r25, Y+14	; 0x0e
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	4a ef       	ldi	r20, 0xFA	; 250
    1734:	54 e4       	ldi	r21, 0x44	; 68
    1736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	8f 83       	std	Y+7, r24	; 0x07
    1740:	98 87       	std	Y+8, r25	; 0x08
    1742:	a9 87       	std	Y+9, r26	; 0x09
    1744:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1746:	6f 81       	ldd	r22, Y+7	; 0x07
    1748:	78 85       	ldd	r23, Y+8	; 0x08
    174a:	89 85       	ldd	r24, Y+9	; 0x09
    174c:	9a 85       	ldd	r25, Y+10	; 0x0a
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	40 e8       	ldi	r20, 0x80	; 128
    1754:	5f e3       	ldi	r21, 0x3F	; 63
    1756:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    175a:	88 23       	and	r24, r24
    175c:	2c f4       	brge	.+10     	; 0x1768 <recievePass+0x76>
		__ticks = 1;
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	9e 83       	std	Y+6, r25	; 0x06
    1764:	8d 83       	std	Y+5, r24	; 0x05
    1766:	3f c0       	rjmp	.+126    	; 0x17e6 <recievePass+0xf4>
	else if (__tmp > 65535)
    1768:	6f 81       	ldd	r22, Y+7	; 0x07
    176a:	78 85       	ldd	r23, Y+8	; 0x08
    176c:	89 85       	ldd	r24, Y+9	; 0x09
    176e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	3f ef       	ldi	r19, 0xFF	; 255
    1774:	4f e7       	ldi	r20, 0x7F	; 127
    1776:	57 e4       	ldi	r21, 0x47	; 71
    1778:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    177c:	18 16       	cp	r1, r24
    177e:	4c f5       	brge	.+82     	; 0x17d2 <recievePass+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1780:	6b 85       	ldd	r22, Y+11	; 0x0b
    1782:	7c 85       	ldd	r23, Y+12	; 0x0c
    1784:	8d 85       	ldd	r24, Y+13	; 0x0d
    1786:	9e 85       	ldd	r25, Y+14	; 0x0e
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	40 e2       	ldi	r20, 0x20	; 32
    178e:	51 e4       	ldi	r21, 0x41	; 65
    1790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	bc 01       	movw	r22, r24
    179a:	cd 01       	movw	r24, r26
    179c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	9e 83       	std	Y+6, r25	; 0x06
    17a6:	8d 83       	std	Y+5, r24	; 0x05
    17a8:	0f c0       	rjmp	.+30     	; 0x17c8 <recievePass+0xd6>
    17aa:	88 ec       	ldi	r24, 0xC8	; 200
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	9c 83       	std	Y+4, r25	; 0x04
    17b0:	8b 83       	std	Y+3, r24	; 0x03
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	9c 81       	ldd	r25, Y+4	; 0x04
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <recievePass+0xc4>
    17ba:	9c 83       	std	Y+4, r25	; 0x04
    17bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17be:	8d 81       	ldd	r24, Y+5	; 0x05
    17c0:	9e 81       	ldd	r25, Y+6	; 0x06
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	9e 83       	std	Y+6, r25	; 0x06
    17c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17c8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ca:	9e 81       	ldd	r25, Y+6	; 0x06
    17cc:	00 97       	sbiw	r24, 0x00	; 0
    17ce:	69 f7       	brne	.-38     	; 0x17aa <recievePass+0xb8>
    17d0:	14 c0       	rjmp	.+40     	; 0x17fa <recievePass+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d2:	6f 81       	ldd	r22, Y+7	; 0x07
    17d4:	78 85       	ldd	r23, Y+8	; 0x08
    17d6:	89 85       	ldd	r24, Y+9	; 0x09
    17d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	9e 83       	std	Y+6, r25	; 0x06
    17e4:	8d 83       	std	Y+5, r24	; 0x05
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
    17e8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ea:	9a 83       	std	Y+2, r25	; 0x02
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	9a 81       	ldd	r25, Y+2	; 0x02
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	f1 f7       	brne	.-4      	; 0x17f2 <recievePass+0x100>
    17f6:	9a 83       	std	Y+2, r25	; 0x02
    17f8:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(50);
		Pass[i] = UART_recieveByte();
    17fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    17fc:	08 2f       	mov	r16, r24
    17fe:	10 e0       	ldi	r17, 0x00	; 0
    1800:	0e 94 77 1a 	call	0x34ee	; 0x34ee <UART_recieveByte>
    1804:	f8 01       	movw	r30, r16
    1806:	ee 57       	subi	r30, 0x7E	; 126
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	80 83       	st	Z, r24
	/*
	 * Wait for the HMI to be ready
	 */
	while(UART_recieveByte() != READY);

	for(uint8 i = 0; i < 5; i++)
    180c:	8f 85       	ldd	r24, Y+15	; 0x0f
    180e:	8f 5f       	subi	r24, 0xFF	; 255
    1810:	8f 87       	std	Y+15, r24	; 0x0f
    1812:	8f 85       	ldd	r24, Y+15	; 0x0f
    1814:	85 30       	cpi	r24, 0x05	; 5
    1816:	08 f4       	brcc	.+2      	; 0x181a <recievePass+0x128>
    1818:	7e cf       	rjmp	.-260    	; 0x1716 <recievePass+0x24>
	{
		_delay_ms(50);
		Pass[i] = UART_recieveByte();
		// Receive the password
	}
}
    181a:	2f 96       	adiw	r28, 0x0f	; 15
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	08 95       	ret

00001830 <openDoor>:

void openDoor()
{
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	6c 97       	sbiw	r28, 0x1c	; 28
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
	timerCalculations();
    1844:	0e 94 1a 10 	call	0x2034	; 0x2034 <timerCalculations>
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	a8 ec       	ldi	r26, 0xC8	; 200
    184e:	b2 e4       	ldi	r27, 0x42	; 66
    1850:	89 8f       	std	Y+25, r24	; 0x19
    1852:	9a 8f       	std	Y+26, r25	; 0x1a
    1854:	ab 8f       	std	Y+27, r26	; 0x1b
    1856:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1858:	69 8d       	ldd	r22, Y+25	; 0x19
    185a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    185c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    185e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	4a ef       	ldi	r20, 0xFA	; 250
    1866:	54 e4       	ldi	r21, 0x44	; 68
    1868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	8d 8b       	std	Y+21, r24	; 0x15
    1872:	9e 8b       	std	Y+22, r25	; 0x16
    1874:	af 8b       	std	Y+23, r26	; 0x17
    1876:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1878:	6d 89       	ldd	r22, Y+21	; 0x15
    187a:	7e 89       	ldd	r23, Y+22	; 0x16
    187c:	8f 89       	ldd	r24, Y+23	; 0x17
    187e:	98 8d       	ldd	r25, Y+24	; 0x18
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e8       	ldi	r20, 0x80	; 128
    1886:	5f e3       	ldi	r21, 0x3F	; 63
    1888:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    188c:	88 23       	and	r24, r24
    188e:	2c f4       	brge	.+10     	; 0x189a <openDoor+0x6a>
		__ticks = 1;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	9c 8b       	std	Y+20, r25	; 0x14
    1896:	8b 8b       	std	Y+19, r24	; 0x13
    1898:	3f c0       	rjmp	.+126    	; 0x1918 <openDoor+0xe8>
	else if (__tmp > 65535)
    189a:	6d 89       	ldd	r22, Y+21	; 0x15
    189c:	7e 89       	ldd	r23, Y+22	; 0x16
    189e:	8f 89       	ldd	r24, Y+23	; 0x17
    18a0:	98 8d       	ldd	r25, Y+24	; 0x18
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	3f ef       	ldi	r19, 0xFF	; 255
    18a6:	4f e7       	ldi	r20, 0x7F	; 127
    18a8:	57 e4       	ldi	r21, 0x47	; 71
    18aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ae:	18 16       	cp	r1, r24
    18b0:	4c f5       	brge	.+82     	; 0x1904 <openDoor+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b2:	69 8d       	ldd	r22, Y+25	; 0x19
    18b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e2       	ldi	r20, 0x20	; 32
    18c0:	51 e4       	ldi	r21, 0x41	; 65
    18c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	bc 01       	movw	r22, r24
    18cc:	cd 01       	movw	r24, r26
    18ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	9c 8b       	std	Y+20, r25	; 0x14
    18d8:	8b 8b       	std	Y+19, r24	; 0x13
    18da:	0f c0       	rjmp	.+30     	; 0x18fa <openDoor+0xca>
    18dc:	88 ec       	ldi	r24, 0xC8	; 200
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	9a 8b       	std	Y+18, r25	; 0x12
    18e2:	89 8b       	std	Y+17, r24	; 0x11
    18e4:	89 89       	ldd	r24, Y+17	; 0x11
    18e6:	9a 89       	ldd	r25, Y+18	; 0x12
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <openDoor+0xb8>
    18ec:	9a 8b       	std	Y+18, r25	; 0x12
    18ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f0:	8b 89       	ldd	r24, Y+19	; 0x13
    18f2:	9c 89       	ldd	r25, Y+20	; 0x14
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	9c 8b       	std	Y+20, r25	; 0x14
    18f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fa:	8b 89       	ldd	r24, Y+19	; 0x13
    18fc:	9c 89       	ldd	r25, Y+20	; 0x14
    18fe:	00 97       	sbiw	r24, 0x00	; 0
    1900:	69 f7       	brne	.-38     	; 0x18dc <openDoor+0xac>
    1902:	14 c0       	rjmp	.+40     	; 0x192c <openDoor+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1904:	6d 89       	ldd	r22, Y+21	; 0x15
    1906:	7e 89       	ldd	r23, Y+22	; 0x16
    1908:	8f 89       	ldd	r24, Y+23	; 0x17
    190a:	98 8d       	ldd	r25, Y+24	; 0x18
    190c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	9c 8b       	std	Y+20, r25	; 0x14
    1916:	8b 8b       	std	Y+19, r24	; 0x13
    1918:	8b 89       	ldd	r24, Y+19	; 0x13
    191a:	9c 89       	ldd	r25, Y+20	; 0x14
    191c:	98 8b       	std	Y+16, r25	; 0x10
    191e:	8f 87       	std	Y+15, r24	; 0x0f
    1920:	8f 85       	ldd	r24, Y+15	; 0x0f
    1922:	98 89       	ldd	r25, Y+16	; 0x10
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	f1 f7       	brne	.-4      	; 0x1924 <openDoor+0xf4>
    1928:	98 8b       	std	Y+16, r25	; 0x10
    192a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(100);
	calc = (DOORTIME*CPU_FREQ)/(timerMode_num * timerClock_num);
    192c:	80 91 88 00 	lds	r24, 0x0088
    1930:	90 91 89 00 	lds	r25, 0x0089
    1934:	a0 91 8a 00 	lds	r26, 0x008A
    1938:	b0 91 8b 00 	lds	r27, 0x008B
    193c:	20 91 8c 00 	lds	r18, 0x008C
    1940:	30 91 8d 00 	lds	r19, 0x008D
    1944:	40 91 8e 00 	lds	r20, 0x008E
    1948:	50 91 8f 00 	lds	r21, 0x008F
    194c:	bc 01       	movw	r22, r24
    194e:	cd 01       	movw	r24, r26
    1950:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__mulsi3>
    1954:	9b 01       	movw	r18, r22
    1956:	ac 01       	movw	r20, r24
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	9e e0       	ldi	r25, 0x0E	; 14
    195c:	a7 e2       	ldi	r26, 0x27	; 39
    195e:	b7 e0       	ldi	r27, 0x07	; 7
    1960:	bc 01       	movw	r22, r24
    1962:	cd 01       	movw	r24, r26
    1964:	0e 94 11 1b 	call	0x3622	; 0x3622 <__udivmodsi4>
    1968:	da 01       	movw	r26, r20
    196a:	c9 01       	movw	r24, r18
    196c:	80 93 90 00 	sts	0x0090, r24
    1970:	90 93 91 00 	sts	0x0091, r25
    1974:	a0 93 92 00 	sts	0x0092, r26
    1978:	b0 93 93 00 	sts	0x0093, r27
	/*
	 * Start the timer and set callback function
	 */
	g_tick = 0;
    197c:	10 92 7d 00 	sts	0x007D, r1
    1980:	10 92 7e 00 	sts	0x007E, r1
    1984:	10 92 7f 00 	sts	0x007F, r1
    1988:	10 92 80 00 	sts	0x0080, r1
	g_flag = 0;
    198c:	10 92 7c 00 	sts	0x007C, r1
	Timer_setCallBack(timer_callBack, Timer_Configurations.timer_ID);
    1990:	20 91 77 00 	lds	r18, 0x0077
    1994:	87 ec       	ldi	r24, 0xC7	; 199
    1996:	95 e0       	ldi	r25, 0x05	; 5
    1998:	62 2f       	mov	r22, r18
    199a:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <Timer_setCallBack>
	Timer_init(&Timer_Configurations);
    199e:	81 e7       	ldi	r24, 0x71	; 113
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <Timer_init>

	/*
	 * Rotate until the timer activates flag, which is in 15 seconds
	 */
	DcMotor_Rotate(CW, 255);
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	6f ef       	ldi	r22, 0xFF	; 255
    19aa:	0e 94 93 15 	call	0x2b26	; 0x2b26 <DcMotor_Rotate>
	while(!g_flag);
    19ae:	80 91 7c 00 	lds	r24, 0x007C
    19b2:	88 23       	and	r24, r24
    19b4:	e1 f3       	breq	.-8      	; 0x19ae <openDoor+0x17e>
	DcMotor_Rotate(STOP, 255);
    19b6:	82 e0       	ldi	r24, 0x02	; 2
    19b8:	6f ef       	ldi	r22, 0xFF	; 255
    19ba:	0e 94 93 15 	call	0x2b26	; 0x2b26 <DcMotor_Rotate>
    19be:	72 c0       	rjmp	.+228    	; 0x1aa4 <openDoor+0x274>

	/*
	 * Wait till people pass
	 */
	while(PIR_getValue())
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	a8 e4       	ldi	r26, 0x48	; 72
    19c6:	b2 e4       	ldi	r27, 0x42	; 66
    19c8:	8b 87       	std	Y+11, r24	; 0x0b
    19ca:	9c 87       	std	Y+12, r25	; 0x0c
    19cc:	ad 87       	std	Y+13, r26	; 0x0d
    19ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	4a ef       	ldi	r20, 0xFA	; 250
    19de:	54 e4       	ldi	r21, 0x44	; 68
    19e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	8f 83       	std	Y+7, r24	; 0x07
    19ea:	98 87       	std	Y+8, r25	; 0x08
    19ec:	a9 87       	std	Y+9, r26	; 0x09
    19ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19f0:	6f 81       	ldd	r22, Y+7	; 0x07
    19f2:	78 85       	ldd	r23, Y+8	; 0x08
    19f4:	89 85       	ldd	r24, Y+9	; 0x09
    19f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	40 e8       	ldi	r20, 0x80	; 128
    19fe:	5f e3       	ldi	r21, 0x3F	; 63
    1a00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a04:	88 23       	and	r24, r24
    1a06:	2c f4       	brge	.+10     	; 0x1a12 <openDoor+0x1e2>
		__ticks = 1;
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	9e 83       	std	Y+6, r25	; 0x06
    1a0e:	8d 83       	std	Y+5, r24	; 0x05
    1a10:	3f c0       	rjmp	.+126    	; 0x1a90 <openDoor+0x260>
	else if (__tmp > 65535)
    1a12:	6f 81       	ldd	r22, Y+7	; 0x07
    1a14:	78 85       	ldd	r23, Y+8	; 0x08
    1a16:	89 85       	ldd	r24, Y+9	; 0x09
    1a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	3f ef       	ldi	r19, 0xFF	; 255
    1a1e:	4f e7       	ldi	r20, 0x7F	; 127
    1a20:	57 e4       	ldi	r21, 0x47	; 71
    1a22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a26:	18 16       	cp	r1, r24
    1a28:	4c f5       	brge	.+82     	; 0x1a7c <openDoor+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	40 e2       	ldi	r20, 0x20	; 32
    1a38:	51 e4       	ldi	r21, 0x41	; 65
    1a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	bc 01       	movw	r22, r24
    1a44:	cd 01       	movw	r24, r26
    1a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	9e 83       	std	Y+6, r25	; 0x06
    1a50:	8d 83       	std	Y+5, r24	; 0x05
    1a52:	0f c0       	rjmp	.+30     	; 0x1a72 <openDoor+0x242>
    1a54:	88 ec       	ldi	r24, 0xC8	; 200
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	9c 83       	std	Y+4, r25	; 0x04
    1a5a:	8b 83       	std	Y+3, r24	; 0x03
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	f1 f7       	brne	.-4      	; 0x1a60 <openDoor+0x230>
    1a64:	9c 83       	std	Y+4, r25	; 0x04
    1a66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a68:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	9e 83       	std	Y+6, r25	; 0x06
    1a70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a72:	8d 81       	ldd	r24, Y+5	; 0x05
    1a74:	9e 81       	ldd	r25, Y+6	; 0x06
    1a76:	00 97       	sbiw	r24, 0x00	; 0
    1a78:	69 f7       	brne	.-38     	; 0x1a54 <openDoor+0x224>
    1a7a:	14 c0       	rjmp	.+40     	; 0x1aa4 <openDoor+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7e:	78 85       	ldd	r23, Y+8	; 0x08
    1a80:	89 85       	ldd	r24, Y+9	; 0x09
    1a82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	9e 83       	std	Y+6, r25	; 0x06
    1a8e:	8d 83       	std	Y+5, r24	; 0x05
    1a90:	8d 81       	ldd	r24, Y+5	; 0x05
    1a92:	9e 81       	ldd	r25, Y+6	; 0x06
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	89 83       	std	Y+1, r24	; 0x01
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9c:	01 97       	sbiw	r24, 0x01	; 1
    1a9e:	f1 f7       	brne	.-4      	; 0x1a9c <openDoor+0x26c>
    1aa0:	9a 83       	std	Y+2, r25	; 0x02
    1aa2:	89 83       	std	Y+1, r24	; 0x01
    1aa4:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <PIR_getValue>
    1aa8:	88 23       	and	r24, r24
    1aaa:	09 f0       	breq	.+2      	; 0x1aae <openDoor+0x27e>
    1aac:	89 cf       	rjmp	.-238    	; 0x19c0 <openDoor+0x190>
	_delay_ms(50);

	/*
	 * Tell the HMI that people have passed and it is ready to close the door
	 */
	UART_sendByte(READY);
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <UART_sendByte>

	UART_sendByte(NO_PEOPLE);
    1ab4:	86 e0       	ldi	r24, 0x06	; 6
    1ab6:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <UART_sendByte>

	g_flag = 0;
    1aba:	10 92 7c 00 	sts	0x007C, r1
	g_tick = 0;
    1abe:	10 92 7d 00 	sts	0x007D, r1
    1ac2:	10 92 7e 00 	sts	0x007E, r1
    1ac6:	10 92 7f 00 	sts	0x007F, r1
    1aca:	10 92 80 00 	sts	0x0080, r1

	/*
	 * Rotate anti-clockwise until the timer activates flag, which is in 15 seconds
	 */
	DcMotor_Rotate(ACW, 255);
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	6f ef       	ldi	r22, 0xFF	; 255
    1ad2:	0e 94 93 15 	call	0x2b26	; 0x2b26 <DcMotor_Rotate>
	while(!g_flag);
    1ad6:	80 91 7c 00 	lds	r24, 0x007C
    1ada:	88 23       	and	r24, r24
    1adc:	e1 f3       	breq	.-8      	; 0x1ad6 <openDoor+0x2a6>
	DcMotor_Rotate(STOP, 255);
    1ade:	82 e0       	ldi	r24, 0x02	; 2
    1ae0:	6f ef       	ldi	r22, 0xFF	; 255
    1ae2:	0e 94 93 15 	call	0x2b26	; 0x2b26 <DcMotor_Rotate>
	Timer_deinit(Timer_Configurations.timer_ID);
    1ae6:	80 91 77 00 	lds	r24, 0x0077
    1aea:	0e 94 79 18 	call	0x30f2	; 0x30f2 <Timer_deinit>
}
    1aee:	6c 96       	adiw	r28, 0x1c	; 28
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	de bf       	out	0x3e, r29	; 62
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	cd bf       	out	0x3d, r28	; 61
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	08 95       	ret

00001b00 <lockSystem>:

void lockSystem()
{
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	2e 97       	sbiw	r28, 0x0e	; 14
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	f8 94       	cli
    1b0e:	de bf       	out	0x3e, r29	; 62
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	cd bf       	out	0x3d, r28	; 61
	timerCalculations();
    1b14:	0e 94 1a 10 	call	0x2034	; 0x2034 <timerCalculations>
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	a8 ec       	ldi	r26, 0xC8	; 200
    1b1e:	b2 e4       	ldi	r27, 0x42	; 66
    1b20:	8b 87       	std	Y+11, r24	; 0x0b
    1b22:	9c 87       	std	Y+12, r25	; 0x0c
    1b24:	ad 87       	std	Y+13, r26	; 0x0d
    1b26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	4a ef       	ldi	r20, 0xFA	; 250
    1b36:	54 e4       	ldi	r21, 0x44	; 68
    1b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	8f 83       	std	Y+7, r24	; 0x07
    1b42:	98 87       	std	Y+8, r25	; 0x08
    1b44:	a9 87       	std	Y+9, r26	; 0x09
    1b46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b48:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4a:	78 85       	ldd	r23, Y+8	; 0x08
    1b4c:	89 85       	ldd	r24, Y+9	; 0x09
    1b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	40 e8       	ldi	r20, 0x80	; 128
    1b56:	5f e3       	ldi	r21, 0x3F	; 63
    1b58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b5c:	88 23       	and	r24, r24
    1b5e:	2c f4       	brge	.+10     	; 0x1b6a <lockSystem+0x6a>
		__ticks = 1;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	9e 83       	std	Y+6, r25	; 0x06
    1b66:	8d 83       	std	Y+5, r24	; 0x05
    1b68:	3f c0       	rjmp	.+126    	; 0x1be8 <lockSystem+0xe8>
	else if (__tmp > 65535)
    1b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6c:	78 85       	ldd	r23, Y+8	; 0x08
    1b6e:	89 85       	ldd	r24, Y+9	; 0x09
    1b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	3f ef       	ldi	r19, 0xFF	; 255
    1b76:	4f e7       	ldi	r20, 0x7F	; 127
    1b78:	57 e4       	ldi	r21, 0x47	; 71
    1b7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b7e:	18 16       	cp	r1, r24
    1b80:	4c f5       	brge	.+82     	; 0x1bd4 <lockSystem+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e2       	ldi	r20, 0x20	; 32
    1b90:	51 e4       	ldi	r21, 0x41	; 65
    1b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	bc 01       	movw	r22, r24
    1b9c:	cd 01       	movw	r24, r26
    1b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	9e 83       	std	Y+6, r25	; 0x06
    1ba8:	8d 83       	std	Y+5, r24	; 0x05
    1baa:	0f c0       	rjmp	.+30     	; 0x1bca <lockSystem+0xca>
    1bac:	88 ec       	ldi	r24, 0xC8	; 200
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	9c 83       	std	Y+4, r25	; 0x04
    1bb2:	8b 83       	std	Y+3, r24	; 0x03
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	f1 f7       	brne	.-4      	; 0x1bb8 <lockSystem+0xb8>
    1bbc:	9c 83       	std	Y+4, r25	; 0x04
    1bbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	9e 83       	std	Y+6, r25	; 0x06
    1bc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bca:	8d 81       	ldd	r24, Y+5	; 0x05
    1bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bce:	00 97       	sbiw	r24, 0x00	; 0
    1bd0:	69 f7       	brne	.-38     	; 0x1bac <lockSystem+0xac>
    1bd2:	14 c0       	rjmp	.+40     	; 0x1bfc <lockSystem+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd6:	78 85       	ldd	r23, Y+8	; 0x08
    1bd8:	89 85       	ldd	r24, Y+9	; 0x09
    1bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	9e 83       	std	Y+6, r25	; 0x06
    1be6:	8d 83       	std	Y+5, r24	; 0x05
    1be8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bea:	9e 81       	ldd	r25, Y+6	; 0x06
    1bec:	9a 83       	std	Y+2, r25	; 0x02
    1bee:	89 83       	std	Y+1, r24	; 0x01
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <lockSystem+0xf4>
    1bf8:	9a 83       	std	Y+2, r25	; 0x02
    1bfa:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(100);
	calc = (LOCKTIME*CPU_FREQ)/(timerMode_num * timerClock_num);
    1bfc:	80 91 88 00 	lds	r24, 0x0088
    1c00:	90 91 89 00 	lds	r25, 0x0089
    1c04:	a0 91 8a 00 	lds	r26, 0x008A
    1c08:	b0 91 8b 00 	lds	r27, 0x008B
    1c0c:	20 91 8c 00 	lds	r18, 0x008C
    1c10:	30 91 8d 00 	lds	r19, 0x008D
    1c14:	40 91 8e 00 	lds	r20, 0x008E
    1c18:	50 91 8f 00 	lds	r21, 0x008F
    1c1c:	bc 01       	movw	r22, r24
    1c1e:	cd 01       	movw	r24, r26
    1c20:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <__mulsi3>
    1c24:	9b 01       	movw	r18, r22
    1c26:	ac 01       	movw	r20, r24
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	98 e3       	ldi	r25, 0x38	; 56
    1c2c:	ac e9       	ldi	r26, 0x9C	; 156
    1c2e:	bc e1       	ldi	r27, 0x1C	; 28
    1c30:	bc 01       	movw	r22, r24
    1c32:	cd 01       	movw	r24, r26
    1c34:	0e 94 11 1b 	call	0x3622	; 0x3622 <__udivmodsi4>
    1c38:	da 01       	movw	r26, r20
    1c3a:	c9 01       	movw	r24, r18
    1c3c:	80 93 90 00 	sts	0x0090, r24
    1c40:	90 93 91 00 	sts	0x0091, r25
    1c44:	a0 93 92 00 	sts	0x0092, r26
    1c48:	b0 93 93 00 	sts	0x0093, r27

	/*
	 * Activate buzzer alarm
	 */
	BUZZER_on();
    1c4c:	0e 94 af 05 	call	0xb5e	; 0xb5e <BUZZER_on>
	/*
	 * Start the timer and set callback function
	 */

	Timer_setCallBack(timer_callBack, Timer_Configurations.timer_ID);
    1c50:	20 91 77 00 	lds	r18, 0x0077
    1c54:	87 ec       	ldi	r24, 0xC7	; 199
    1c56:	95 e0       	ldi	r25, 0x05	; 5
    1c58:	62 2f       	mov	r22, r18
    1c5a:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <Timer_setCallBack>
	Timer_init(&Timer_Configurations);
    1c5e:	81 e7       	ldi	r24, 0x71	; 113
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <Timer_init>
	g_tick = 0;
    1c66:	10 92 7d 00 	sts	0x007D, r1
    1c6a:	10 92 7e 00 	sts	0x007E, r1
    1c6e:	10 92 7f 00 	sts	0x007F, r1
    1c72:	10 92 80 00 	sts	0x0080, r1
	g_flag = 0;
    1c76:	10 92 7c 00 	sts	0x007C, r1
	/*
	 * Wait for timer to raise flag, 60 seconds
	 */
	while(!g_flag);
    1c7a:	80 91 7c 00 	lds	r24, 0x007C
    1c7e:	88 23       	and	r24, r24
    1c80:	e1 f3       	breq	.-8      	; 0x1c7a <lockSystem+0x17a>

	Timer_deinit(Timer_Configurations.timer_ID);
    1c82:	80 91 77 00 	lds	r24, 0x0077
    1c86:	0e 94 79 18 	call	0x30f2	; 0x30f2 <Timer_deinit>
	/*
	 * deactivate buzzer alarm
	 */
	BUZZER_off();
    1c8a:	0e 94 bb 05 	call	0xb76	; 0xb76 <BUZZER_off>
}
    1c8e:	2e 96       	adiw	r28, 0x0e	; 14
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	cf 91       	pop	r28
    1c9c:	df 91       	pop	r29
    1c9e:	08 95       	ret

00001ca0 <firstPass>:

uint8 firstPass(void)
{
    1ca0:	1f 93       	push	r17
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	60 97       	sbiw	r28, 0x10	; 16
    1cac:	0f b6       	in	r0, 0x3f	; 63
    1cae:	f8 94       	cli
    1cb0:	de bf       	out	0x3e, r29	; 62
    1cb2:	0f be       	out	0x3f, r0	; 63
    1cb4:	cd bf       	out	0x3d, r28	; 61
	recievePass();
    1cb6:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <recievePass>

	/*
	 * This following block of code is to receive and write the password in the eeprom
	 * if incorrect, the for loop is exited and the process is reset
	 */
	while(UART_recieveByte() != READY);
    1cba:	0e 94 77 1a 	call	0x34ee	; 0x34ee <UART_recieveByte>
    1cbe:	81 30       	cpi	r24, 0x01	; 1
    1cc0:	e1 f7       	brne	.-8      	; 0x1cba <firstPass+0x1a>

	for(uint8 i = 0; i < 5; i++)
    1cc2:	1f 86       	std	Y+15, r1	; 0x0f
    1cc4:	9c c0       	rjmp	.+312    	; 0x1dfe <firstPass+0x15e>
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	a8 e4       	ldi	r26, 0x48	; 72
    1ccc:	b2 e4       	ldi	r27, 0x42	; 66
    1cce:	8b 87       	std	Y+11, r24	; 0x0b
    1cd0:	9c 87       	std	Y+12, r25	; 0x0c
    1cd2:	ad 87       	std	Y+13, r26	; 0x0d
    1cd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	4a ef       	ldi	r20, 0xFA	; 250
    1ce4:	54 e4       	ldi	r21, 0x44	; 68
    1ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	8f 83       	std	Y+7, r24	; 0x07
    1cf0:	98 87       	std	Y+8, r25	; 0x08
    1cf2:	a9 87       	std	Y+9, r26	; 0x09
    1cf4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf8:	78 85       	ldd	r23, Y+8	; 0x08
    1cfa:	89 85       	ldd	r24, Y+9	; 0x09
    1cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e8       	ldi	r20, 0x80	; 128
    1d04:	5f e3       	ldi	r21, 0x3F	; 63
    1d06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d0a:	88 23       	and	r24, r24
    1d0c:	2c f4       	brge	.+10     	; 0x1d18 <firstPass+0x78>
		__ticks = 1;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	9e 83       	std	Y+6, r25	; 0x06
    1d14:	8d 83       	std	Y+5, r24	; 0x05
    1d16:	3f c0       	rjmp	.+126    	; 0x1d96 <firstPass+0xf6>
	else if (__tmp > 65535)
    1d18:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1a:	78 85       	ldd	r23, Y+8	; 0x08
    1d1c:	89 85       	ldd	r24, Y+9	; 0x09
    1d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	3f ef       	ldi	r19, 0xFF	; 255
    1d24:	4f e7       	ldi	r20, 0x7F	; 127
    1d26:	57 e4       	ldi	r21, 0x47	; 71
    1d28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d2c:	18 16       	cp	r1, r24
    1d2e:	4c f5       	brge	.+82     	; 0x1d82 <firstPass+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	40 e2       	ldi	r20, 0x20	; 32
    1d3e:	51 e4       	ldi	r21, 0x41	; 65
    1d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	bc 01       	movw	r22, r24
    1d4a:	cd 01       	movw	r24, r26
    1d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	9e 83       	std	Y+6, r25	; 0x06
    1d56:	8d 83       	std	Y+5, r24	; 0x05
    1d58:	0f c0       	rjmp	.+30     	; 0x1d78 <firstPass+0xd8>
    1d5a:	88 ec       	ldi	r24, 0xC8	; 200
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	9c 83       	std	Y+4, r25	; 0x04
    1d60:	8b 83       	std	Y+3, r24	; 0x03
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	9c 81       	ldd	r25, Y+4	; 0x04
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <firstPass+0xc6>
    1d6a:	9c 83       	std	Y+4, r25	; 0x04
    1d6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	9e 81       	ldd	r25, Y+6	; 0x06
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	9e 83       	std	Y+6, r25	; 0x06
    1d76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d78:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7c:	00 97       	sbiw	r24, 0x00	; 0
    1d7e:	69 f7       	brne	.-38     	; 0x1d5a <firstPass+0xba>
    1d80:	14 c0       	rjmp	.+40     	; 0x1daa <firstPass+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d82:	6f 81       	ldd	r22, Y+7	; 0x07
    1d84:	78 85       	ldd	r23, Y+8	; 0x08
    1d86:	89 85       	ldd	r24, Y+9	; 0x09
    1d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	9e 83       	std	Y+6, r25	; 0x06
    1d94:	8d 83       	std	Y+5, r24	; 0x05
    1d96:	8d 81       	ldd	r24, Y+5	; 0x05
    1d98:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9a:	9a 83       	std	Y+2, r25	; 0x02
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	9a 81       	ldd	r25, Y+2	; 0x02
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <firstPass+0x102>
    1da6:	9a 83       	std	Y+2, r25	; 0x02
    1da8:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(50);
		if(comparePasswords(Pass[i], UART_recieveByte()))
    1daa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dac:	88 2f       	mov	r24, r24
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	fc 01       	movw	r30, r24
    1db2:	ee 57       	subi	r30, 0x7E	; 126
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	10 81       	ld	r17, Z
    1db8:	0e 94 77 1a 	call	0x34ee	; 0x34ee <UART_recieveByte>
    1dbc:	98 2f       	mov	r25, r24
    1dbe:	81 2f       	mov	r24, r17
    1dc0:	69 2f       	mov	r22, r25
    1dc2:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <comparePasswords>
    1dc6:	88 23       	and	r24, r24
    1dc8:	31 f0       	breq	.+12     	; 0x1dd6 <firstPass+0x136>
		{
			/*
			 * Break the loop since the bytes don't match and reset
			 */
			status = 0;
    1dca:	10 92 7a 00 	sts	0x007A, r1
			return status;
    1dce:	80 91 7a 00 	lds	r24, 0x007A
    1dd2:	88 8b       	std	Y+16, r24	; 0x10
    1dd4:	1b c0       	rjmp	.+54     	; 0x1e0c <firstPass+0x16c>
		}
		else
		{
			status = 1;
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	80 93 7a 00 	sts	0x007A, r24
			EEPROM_writeByte(EEPROM_ADDRESS+i,Pass[i]);
    1ddc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dde:	48 2f       	mov	r20, r24
    1de0:	50 e0       	ldi	r21, 0x00	; 0
    1de2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1de4:	88 2f       	mov	r24, r24
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	fc 01       	movw	r30, r24
    1dea:	ee 57       	subi	r30, 0x7E	; 126
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	20 81       	ld	r18, Z
    1df0:	ca 01       	movw	r24, r20
    1df2:	62 2f       	mov	r22, r18
    1df4:	0e 94 94 11 	call	0x2328	; 0x2328 <EEPROM_writeByte>
	 * This following block of code is to receive and write the password in the eeprom
	 * if incorrect, the for loop is exited and the process is reset
	 */
	while(UART_recieveByte() != READY);

	for(uint8 i = 0; i < 5; i++)
    1df8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dfa:	8f 5f       	subi	r24, 0xFF	; 255
    1dfc:	8f 87       	std	Y+15, r24	; 0x0f
    1dfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e00:	85 30       	cpi	r24, 0x05	; 5
    1e02:	08 f4       	brcc	.+2      	; 0x1e06 <firstPass+0x166>
    1e04:	60 cf       	rjmp	.-320    	; 0x1cc6 <firstPass+0x26>
		{
			status = 1;
			EEPROM_writeByte(EEPROM_ADDRESS+i,Pass[i]);
		}
	}
	return status;
    1e06:	80 91 7a 00 	lds	r24, 0x007A
    1e0a:	88 8b       	std	Y+16, r24	; 0x10
    1e0c:	88 89       	ldd	r24, Y+16	; 0x10
}
    1e0e:	60 96       	adiw	r28, 0x10	; 16
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	1f 91       	pop	r17
    1e20:	08 95       	ret

00001e22 <changePass>:

void changePass()
{
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	6c 97       	sbiw	r28, 0x1c	; 28
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	f8 94       	cli
    1e30:	de bf       	out	0x3e, r29	; 62
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	cd bf       	out	0x3d, r28	; 61
	{
		/*
		 * If status is one, meaning the passwords are matching, send to the other MC that there is no need to repeat
		 * the process and we can move on to the main system
		 */
		if(firstPass())
    1e36:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <firstPass>
    1e3a:	88 23       	and	r24, r24
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <changePass+0x1e>
    1e3e:	81 c0       	rjmp	.+258    	; 0x1f42 <changePass+0x120>
		{
			UART_sendByte(READY);
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <UART_sendByte>
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	a8 e4       	ldi	r26, 0x48	; 72
    1e4c:	b2 e4       	ldi	r27, 0x42	; 66
    1e4e:	89 8f       	std	Y+25, r24	; 0x19
    1e50:	9a 8f       	std	Y+26, r25	; 0x1a
    1e52:	ab 8f       	std	Y+27, r26	; 0x1b
    1e54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e56:	69 8d       	ldd	r22, Y+25	; 0x19
    1e58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	4a ef       	ldi	r20, 0xFA	; 250
    1e64:	54 e4       	ldi	r21, 0x44	; 68
    1e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	8d 8b       	std	Y+21, r24	; 0x15
    1e70:	9e 8b       	std	Y+22, r25	; 0x16
    1e72:	af 8b       	std	Y+23, r26	; 0x17
    1e74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e76:	6d 89       	ldd	r22, Y+21	; 0x15
    1e78:	7e 89       	ldd	r23, Y+22	; 0x16
    1e7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e8       	ldi	r20, 0x80	; 128
    1e84:	5f e3       	ldi	r21, 0x3F	; 63
    1e86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e8a:	88 23       	and	r24, r24
    1e8c:	2c f4       	brge	.+10     	; 0x1e98 <changePass+0x76>
		__ticks = 1;
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	9c 8b       	std	Y+20, r25	; 0x14
    1e94:	8b 8b       	std	Y+19, r24	; 0x13
    1e96:	3f c0       	rjmp	.+126    	; 0x1f16 <changePass+0xf4>
	else if (__tmp > 65535)
    1e98:	6d 89       	ldd	r22, Y+21	; 0x15
    1e9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	3f ef       	ldi	r19, 0xFF	; 255
    1ea4:	4f e7       	ldi	r20, 0x7F	; 127
    1ea6:	57 e4       	ldi	r21, 0x47	; 71
    1ea8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eac:	18 16       	cp	r1, r24
    1eae:	4c f5       	brge	.+82     	; 0x1f02 <changePass+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb0:	69 8d       	ldd	r22, Y+25	; 0x19
    1eb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e2       	ldi	r20, 0x20	; 32
    1ebe:	51 e4       	ldi	r21, 0x41	; 65
    1ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	bc 01       	movw	r22, r24
    1eca:	cd 01       	movw	r24, r26
    1ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	9c 8b       	std	Y+20, r25	; 0x14
    1ed6:	8b 8b       	std	Y+19, r24	; 0x13
    1ed8:	0f c0       	rjmp	.+30     	; 0x1ef8 <changePass+0xd6>
    1eda:	88 ec       	ldi	r24, 0xC8	; 200
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	9a 8b       	std	Y+18, r25	; 0x12
    1ee0:	89 8b       	std	Y+17, r24	; 0x11
    1ee2:	89 89       	ldd	r24, Y+17	; 0x11
    1ee4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	f1 f7       	brne	.-4      	; 0x1ee6 <changePass+0xc4>
    1eea:	9a 8b       	std	Y+18, r25	; 0x12
    1eec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eee:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	9c 8b       	std	Y+20, r25	; 0x14
    1ef6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef8:	8b 89       	ldd	r24, Y+19	; 0x13
    1efa:	9c 89       	ldd	r25, Y+20	; 0x14
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	69 f7       	brne	.-38     	; 0x1eda <changePass+0xb8>
    1f00:	14 c0       	rjmp	.+40     	; 0x1f2a <changePass+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f02:	6d 89       	ldd	r22, Y+21	; 0x15
    1f04:	7e 89       	ldd	r23, Y+22	; 0x16
    1f06:	8f 89       	ldd	r24, Y+23	; 0x17
    1f08:	98 8d       	ldd	r25, Y+24	; 0x18
    1f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	9c 8b       	std	Y+20, r25	; 0x14
    1f14:	8b 8b       	std	Y+19, r24	; 0x13
    1f16:	8b 89       	ldd	r24, Y+19	; 0x13
    1f18:	9c 89       	ldd	r25, Y+20	; 0x14
    1f1a:	98 8b       	std	Y+16, r25	; 0x10
    1f1c:	8f 87       	std	Y+15, r24	; 0x0f
    1f1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f20:	98 89       	ldd	r25, Y+16	; 0x10
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	f1 f7       	brne	.-4      	; 0x1f22 <changePass+0x100>
    1f26:	98 8b       	std	Y+16, r25	; 0x10
    1f28:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(50);
			UART_sendByte(NO_REPEAT);
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <UART_sendByte>
			UART_sendByte(READY);
			_delay_ms(50);
			UART_sendByte(REPEAT);
		}
	}
}
    1f30:	6c 96       	adiw	r28, 0x1c	; 28
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	cd bf       	out	0x3d, r28	; 61
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	08 95       	ret
			UART_sendByte(NO_REPEAT);
			break;
		}
		else
		{
			UART_sendByte(READY);
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <UART_sendByte>
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	a8 e4       	ldi	r26, 0x48	; 72
    1f4e:	b2 e4       	ldi	r27, 0x42	; 66
    1f50:	8b 87       	std	Y+11, r24	; 0x0b
    1f52:	9c 87       	std	Y+12, r25	; 0x0c
    1f54:	ad 87       	std	Y+13, r26	; 0x0d
    1f56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	4a ef       	ldi	r20, 0xFA	; 250
    1f66:	54 e4       	ldi	r21, 0x44	; 68
    1f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	8f 83       	std	Y+7, r24	; 0x07
    1f72:	98 87       	std	Y+8, r25	; 0x08
    1f74:	a9 87       	std	Y+9, r26	; 0x09
    1f76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f78:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7a:	78 85       	ldd	r23, Y+8	; 0x08
    1f7c:	89 85       	ldd	r24, Y+9	; 0x09
    1f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e8       	ldi	r20, 0x80	; 128
    1f86:	5f e3       	ldi	r21, 0x3F	; 63
    1f88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f8c:	88 23       	and	r24, r24
    1f8e:	2c f4       	brge	.+10     	; 0x1f9a <changePass+0x178>
		__ticks = 1;
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	9e 83       	std	Y+6, r25	; 0x06
    1f96:	8d 83       	std	Y+5, r24	; 0x05
    1f98:	3f c0       	rjmp	.+126    	; 0x2018 <changePass+0x1f6>
	else if (__tmp > 65535)
    1f9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f9c:	78 85       	ldd	r23, Y+8	; 0x08
    1f9e:	89 85       	ldd	r24, Y+9	; 0x09
    1fa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	3f ef       	ldi	r19, 0xFF	; 255
    1fa6:	4f e7       	ldi	r20, 0x7F	; 127
    1fa8:	57 e4       	ldi	r21, 0x47	; 71
    1faa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fae:	18 16       	cp	r1, r24
    1fb0:	4c f5       	brge	.+82     	; 0x2004 <changePass+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	40 e2       	ldi	r20, 0x20	; 32
    1fc0:	51 e4       	ldi	r21, 0x41	; 65
    1fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	bc 01       	movw	r22, r24
    1fcc:	cd 01       	movw	r24, r26
    1fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	9e 83       	std	Y+6, r25	; 0x06
    1fd8:	8d 83       	std	Y+5, r24	; 0x05
    1fda:	0f c0       	rjmp	.+30     	; 0x1ffa <changePass+0x1d8>
    1fdc:	88 ec       	ldi	r24, 0xC8	; 200
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	9c 83       	std	Y+4, r25	; 0x04
    1fe2:	8b 83       	std	Y+3, r24	; 0x03
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	f1 f7       	brne	.-4      	; 0x1fe8 <changePass+0x1c6>
    1fec:	9c 83       	std	Y+4, r25	; 0x04
    1fee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	9e 83       	std	Y+6, r25	; 0x06
    1ff8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	69 f7       	brne	.-38     	; 0x1fdc <changePass+0x1ba>
    2002:	14 c0       	rjmp	.+40     	; 0x202c <changePass+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2004:	6f 81       	ldd	r22, Y+7	; 0x07
    2006:	78 85       	ldd	r23, Y+8	; 0x08
    2008:	89 85       	ldd	r24, Y+9	; 0x09
    200a:	9a 85       	ldd	r25, Y+10	; 0x0a
    200c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	9e 83       	std	Y+6, r25	; 0x06
    2016:	8d 83       	std	Y+5, r24	; 0x05
    2018:	8d 81       	ldd	r24, Y+5	; 0x05
    201a:	9e 81       	ldd	r25, Y+6	; 0x06
    201c:	9a 83       	std	Y+2, r25	; 0x02
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	9a 81       	ldd	r25, Y+2	; 0x02
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	f1 f7       	brne	.-4      	; 0x2024 <changePass+0x202>
    2028:	9a 83       	std	Y+2, r25	; 0x02
    202a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);
			UART_sendByte(REPEAT);
    202c:	82 e0       	ldi	r24, 0x02	; 2
    202e:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <UART_sendByte>
    2032:	01 cf       	rjmp	.-510    	; 0x1e36 <changePass+0x14>

00002034 <timerCalculations>:
		}
	}
}

void timerCalculations()
{
    2034:	ef 92       	push	r14
    2036:	ff 92       	push	r15
    2038:	0f 93       	push	r16
    203a:	1f 93       	push	r17
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	60 97       	sbiw	r28, 0x10	; 16
    2046:	0f b6       	in	r0, 0x3f	; 63
    2048:	f8 94       	cli
    204a:	de bf       	out	0x3e, r29	; 62
    204c:	0f be       	out	0x3f, r0	; 63
    204e:	cd bf       	out	0x3d, r28	; 61
	timerMode_num = Timer_Configurations.timer_compare_MatchValue - Timer_Configurations.timer_InitialValue;
    2050:	20 91 73 00 	lds	r18, 0x0073
    2054:	30 91 74 00 	lds	r19, 0x0074
    2058:	40 91 75 00 	lds	r20, 0x0075
    205c:	50 91 76 00 	lds	r21, 0x0076
    2060:	80 91 71 00 	lds	r24, 0x0071
    2064:	90 91 72 00 	lds	r25, 0x0072
    2068:	cc 01       	movw	r24, r24
    206a:	a0 e0       	ldi	r26, 0x00	; 0
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	79 01       	movw	r14, r18
    2070:	8a 01       	movw	r16, r20
    2072:	e8 1a       	sub	r14, r24
    2074:	f9 0a       	sbc	r15, r25
    2076:	0a 0b       	sbc	r16, r26
    2078:	1b 0b       	sbc	r17, r27
    207a:	d8 01       	movw	r26, r16
    207c:	c7 01       	movw	r24, r14
    207e:	80 93 88 00 	sts	0x0088, r24
    2082:	90 93 89 00 	sts	0x0089, r25
    2086:	a0 93 8a 00 	sts	0x008A, r26
    208a:	b0 93 8b 00 	sts	0x008B, r27

	if(Timer_Configurations.timer_mode == MODE_normal)
    208e:	80 91 79 00 	lds	r24, 0x0079
    2092:	88 23       	and	r24, r24
    2094:	79 f5       	brne	.+94     	; 0x20f4 <timerCalculations+0xc0>
	{
		if(Timer_Configurations.timer_ID == TIMER_timer1)
    2096:	80 91 77 00 	lds	r24, 0x0077
    209a:	81 30       	cpi	r24, 0x01	; 1
    209c:	c1 f4       	brne	.+48     	; 0x20ce <timerCalculations+0x9a>
		{
			timerMode_num = 65535 - Timer_Configurations.timer_InitialValue;
    209e:	80 91 71 00 	lds	r24, 0x0071
    20a2:	90 91 72 00 	lds	r25, 0x0072
    20a6:	9c 01       	movw	r18, r24
    20a8:	40 e0       	ldi	r20, 0x00	; 0
    20aa:	50 e0       	ldi	r21, 0x00	; 0
    20ac:	8f ef       	ldi	r24, 0xFF	; 255
    20ae:	9f ef       	ldi	r25, 0xFF	; 255
    20b0:	a0 e0       	ldi	r26, 0x00	; 0
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	82 1b       	sub	r24, r18
    20b6:	93 0b       	sbc	r25, r19
    20b8:	a4 0b       	sbc	r26, r20
    20ba:	b5 0b       	sbc	r27, r21
    20bc:	80 93 88 00 	sts	0x0088, r24
    20c0:	90 93 89 00 	sts	0x0089, r25
    20c4:	a0 93 8a 00 	sts	0x008A, r26
    20c8:	b0 93 8b 00 	sts	0x008B, r27
    20cc:	13 c0       	rjmp	.+38     	; 0x20f4 <timerCalculations+0xc0>
		}
		else
		{
			timerMode_num = 255 - Timer_Configurations.timer_InitialValue;
    20ce:	20 91 71 00 	lds	r18, 0x0071
    20d2:	30 91 72 00 	lds	r19, 0x0072
    20d6:	8f ef       	ldi	r24, 0xFF	; 255
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	82 1b       	sub	r24, r18
    20dc:	93 0b       	sbc	r25, r19
    20de:	cc 01       	movw	r24, r24
    20e0:	a0 e0       	ldi	r26, 0x00	; 0
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	80 93 88 00 	sts	0x0088, r24
    20e8:	90 93 89 00 	sts	0x0089, r25
    20ec:	a0 93 8a 00 	sts	0x008A, r26
    20f0:	b0 93 8b 00 	sts	0x008B, r27
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	a8 ec       	ldi	r26, 0xC8	; 200
    20fa:	b2 e4       	ldi	r27, 0x42	; 66
    20fc:	8b 87       	std	Y+11, r24	; 0x0b
    20fe:	9c 87       	std	Y+12, r25	; 0x0c
    2100:	ad 87       	std	Y+13, r26	; 0x0d
    2102:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2104:	6b 85       	ldd	r22, Y+11	; 0x0b
    2106:	7c 85       	ldd	r23, Y+12	; 0x0c
    2108:	8d 85       	ldd	r24, Y+13	; 0x0d
    210a:	9e 85       	ldd	r25, Y+14	; 0x0e
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	4a ef       	ldi	r20, 0xFA	; 250
    2112:	54 e4       	ldi	r21, 0x44	; 68
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	8f 83       	std	Y+7, r24	; 0x07
    211e:	98 87       	std	Y+8, r25	; 0x08
    2120:	a9 87       	std	Y+9, r26	; 0x09
    2122:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2124:	6f 81       	ldd	r22, Y+7	; 0x07
    2126:	78 85       	ldd	r23, Y+8	; 0x08
    2128:	89 85       	ldd	r24, Y+9	; 0x09
    212a:	9a 85       	ldd	r25, Y+10	; 0x0a
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e8       	ldi	r20, 0x80	; 128
    2132:	5f e3       	ldi	r21, 0x3F	; 63
    2134:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2138:	88 23       	and	r24, r24
    213a:	2c f4       	brge	.+10     	; 0x2146 <timerCalculations+0x112>
		__ticks = 1;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	9e 83       	std	Y+6, r25	; 0x06
    2142:	8d 83       	std	Y+5, r24	; 0x05
    2144:	3f c0       	rjmp	.+126    	; 0x21c4 <timerCalculations+0x190>
	else if (__tmp > 65535)
    2146:	6f 81       	ldd	r22, Y+7	; 0x07
    2148:	78 85       	ldd	r23, Y+8	; 0x08
    214a:	89 85       	ldd	r24, Y+9	; 0x09
    214c:	9a 85       	ldd	r25, Y+10	; 0x0a
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	3f ef       	ldi	r19, 0xFF	; 255
    2152:	4f e7       	ldi	r20, 0x7F	; 127
    2154:	57 e4       	ldi	r21, 0x47	; 71
    2156:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    215a:	18 16       	cp	r1, r24
    215c:	4c f5       	brge	.+82     	; 0x21b0 <timerCalculations+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2160:	7c 85       	ldd	r23, Y+12	; 0x0c
    2162:	8d 85       	ldd	r24, Y+13	; 0x0d
    2164:	9e 85       	ldd	r25, Y+14	; 0x0e
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e2       	ldi	r20, 0x20	; 32
    216c:	51 e4       	ldi	r21, 0x41	; 65
    216e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	9e 83       	std	Y+6, r25	; 0x06
    2184:	8d 83       	std	Y+5, r24	; 0x05
    2186:	0f c0       	rjmp	.+30     	; 0x21a6 <timerCalculations+0x172>
    2188:	88 ec       	ldi	r24, 0xC8	; 200
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	9c 83       	std	Y+4, r25	; 0x04
    218e:	8b 83       	std	Y+3, r24	; 0x03
    2190:	8b 81       	ldd	r24, Y+3	; 0x03
    2192:	9c 81       	ldd	r25, Y+4	; 0x04
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	f1 f7       	brne	.-4      	; 0x2194 <timerCalculations+0x160>
    2198:	9c 83       	std	Y+4, r25	; 0x04
    219a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219c:	8d 81       	ldd	r24, Y+5	; 0x05
    219e:	9e 81       	ldd	r25, Y+6	; 0x06
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	9e 83       	std	Y+6, r25	; 0x06
    21a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a6:	8d 81       	ldd	r24, Y+5	; 0x05
    21a8:	9e 81       	ldd	r25, Y+6	; 0x06
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	69 f7       	brne	.-38     	; 0x2188 <timerCalculations+0x154>
    21ae:	14 c0       	rjmp	.+40     	; 0x21d8 <timerCalculations+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b0:	6f 81       	ldd	r22, Y+7	; 0x07
    21b2:	78 85       	ldd	r23, Y+8	; 0x08
    21b4:	89 85       	ldd	r24, Y+9	; 0x09
    21b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	8d 83       	std	Y+5, r24	; 0x05
    21c4:	8d 81       	ldd	r24, Y+5	; 0x05
    21c6:	9e 81       	ldd	r25, Y+6	; 0x06
    21c8:	9a 83       	std	Y+2, r25	; 0x02
    21ca:	89 83       	std	Y+1, r24	; 0x01
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	9a 81       	ldd	r25, Y+2	; 0x02
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <timerCalculations+0x19c>
    21d4:	9a 83       	std	Y+2, r25	; 0x02
    21d6:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	_delay_ms(100);

	switch(Timer_Configurations.timer_clock)
    21d8:	80 91 78 00 	lds	r24, 0x0078
    21dc:	08 2f       	mov	r16, r24
    21de:	10 e0       	ldi	r17, 0x00	; 0
    21e0:	18 8b       	std	Y+16, r17	; 0x10
    21e2:	0f 87       	std	Y+15, r16	; 0x0f
    21e4:	2f 85       	ldd	r18, Y+15	; 0x0f
    21e6:	38 89       	ldd	r19, Y+16	; 0x10
    21e8:	23 30       	cpi	r18, 0x03	; 3
    21ea:	31 05       	cpc	r19, r1
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <timerCalculations+0x1bc>
    21ee:	4f c0       	rjmp	.+158    	; 0x228e <timerCalculations+0x25a>
    21f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f2:	98 89       	ldd	r25, Y+16	; 0x10
    21f4:	84 30       	cpi	r24, 0x04	; 4
    21f6:	91 05       	cpc	r25, r1
    21f8:	7c f4       	brge	.+30     	; 0x2218 <timerCalculations+0x1e4>
    21fa:	0f 85       	ldd	r16, Y+15	; 0x0f
    21fc:	18 89       	ldd	r17, Y+16	; 0x10
    21fe:	01 30       	cpi	r16, 0x01	; 1
    2200:	11 05       	cpc	r17, r1
    2202:	59 f1       	breq	.+86     	; 0x225a <timerCalculations+0x226>
    2204:	2f 85       	ldd	r18, Y+15	; 0x0f
    2206:	38 89       	ldd	r19, Y+16	; 0x10
    2208:	22 30       	cpi	r18, 0x02	; 2
    220a:	31 05       	cpc	r19, r1
    220c:	9c f5       	brge	.+102    	; 0x2274 <timerCalculations+0x240>
    220e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2210:	98 89       	ldd	r25, Y+16	; 0x10
    2212:	00 97       	sbiw	r24, 0x00	; 0
    2214:	c9 f0       	breq	.+50     	; 0x2248 <timerCalculations+0x214>
    2216:	7b c0       	rjmp	.+246    	; 0x230e <timerCalculations+0x2da>
    2218:	0f 85       	ldd	r16, Y+15	; 0x0f
    221a:	18 89       	ldd	r17, Y+16	; 0x10
    221c:	05 30       	cpi	r16, 0x05	; 5
    221e:	11 05       	cpc	r17, r1
    2220:	09 f4       	brne	.+2      	; 0x2224 <timerCalculations+0x1f0>
    2222:	4f c0       	rjmp	.+158    	; 0x22c2 <timerCalculations+0x28e>
    2224:	2f 85       	ldd	r18, Y+15	; 0x0f
    2226:	38 89       	ldd	r19, Y+16	; 0x10
    2228:	25 30       	cpi	r18, 0x05	; 5
    222a:	31 05       	cpc	r19, r1
    222c:	ec f1       	brlt	.+122    	; 0x22a8 <timerCalculations+0x274>
    222e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2230:	98 89       	ldd	r25, Y+16	; 0x10
    2232:	86 30       	cpi	r24, 0x06	; 6
    2234:	91 05       	cpc	r25, r1
    2236:	09 f4       	brne	.+2      	; 0x223a <timerCalculations+0x206>
    2238:	51 c0       	rjmp	.+162    	; 0x22dc <timerCalculations+0x2a8>
    223a:	0f 85       	ldd	r16, Y+15	; 0x0f
    223c:	18 89       	ldd	r17, Y+16	; 0x10
    223e:	07 30       	cpi	r16, 0x07	; 7
    2240:	11 05       	cpc	r17, r1
    2242:	09 f4       	brne	.+2      	; 0x2246 <timerCalculations+0x212>
    2244:	58 c0       	rjmp	.+176    	; 0x22f6 <timerCalculations+0x2c2>
    2246:	63 c0       	rjmp	.+198    	; 0x230e <timerCalculations+0x2da>
	{
		case NO_CLOCK:
			timerClock_num = 0;
    2248:	10 92 8c 00 	sts	0x008C, r1
    224c:	10 92 8d 00 	sts	0x008D, r1
    2250:	10 92 8e 00 	sts	0x008E, r1
    2254:	10 92 8f 00 	sts	0x008F, r1
    2258:	5a c0       	rjmp	.+180    	; 0x230e <timerCalculations+0x2da>
			break;
		case F_CPU_CLOCK:
			timerClock_num = 1;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	a0 e0       	ldi	r26, 0x00	; 0
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	80 93 8c 00 	sts	0x008C, r24
    2266:	90 93 8d 00 	sts	0x008D, r25
    226a:	a0 93 8e 00 	sts	0x008E, r26
    226e:	b0 93 8f 00 	sts	0x008F, r27
    2272:	4d c0       	rjmp	.+154    	; 0x230e <timerCalculations+0x2da>
			break;
		case F_CPU_8:
			timerClock_num = 8;
    2274:	88 e0       	ldi	r24, 0x08	; 8
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	a0 e0       	ldi	r26, 0x00	; 0
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	80 93 8c 00 	sts	0x008C, r24
    2280:	90 93 8d 00 	sts	0x008D, r25
    2284:	a0 93 8e 00 	sts	0x008E, r26
    2288:	b0 93 8f 00 	sts	0x008F, r27
    228c:	40 c0       	rjmp	.+128    	; 0x230e <timerCalculations+0x2da>
			break;
		case F_CPU_32_T2:
			timerClock_num = 32;
    228e:	80 e2       	ldi	r24, 0x20	; 32
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	a0 e0       	ldi	r26, 0x00	; 0
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	80 93 8c 00 	sts	0x008C, r24
    229a:	90 93 8d 00 	sts	0x008D, r25
    229e:	a0 93 8e 00 	sts	0x008E, r26
    22a2:	b0 93 8f 00 	sts	0x008F, r27
    22a6:	33 c0       	rjmp	.+102    	; 0x230e <timerCalculations+0x2da>
			break;
		case F_CPU_64:
			timerClock_num = 64;
    22a8:	80 e4       	ldi	r24, 0x40	; 64
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	a0 e0       	ldi	r26, 0x00	; 0
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	80 93 8c 00 	sts	0x008C, r24
    22b4:	90 93 8d 00 	sts	0x008D, r25
    22b8:	a0 93 8e 00 	sts	0x008E, r26
    22bc:	b0 93 8f 00 	sts	0x008F, r27
    22c0:	26 c0       	rjmp	.+76     	; 0x230e <timerCalculations+0x2da>
			break;
		case F_CPU_128_T2:
			timerClock_num = 128;
    22c2:	80 e8       	ldi	r24, 0x80	; 128
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	a0 e0       	ldi	r26, 0x00	; 0
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	80 93 8c 00 	sts	0x008C, r24
    22ce:	90 93 8d 00 	sts	0x008D, r25
    22d2:	a0 93 8e 00 	sts	0x008E, r26
    22d6:	b0 93 8f 00 	sts	0x008F, r27
    22da:	19 c0       	rjmp	.+50     	; 0x230e <timerCalculations+0x2da>
			break;
		case F_CPU_256:
			timerClock_num = 256;
    22dc:	80 e0       	ldi	r24, 0x00	; 0
    22de:	91 e0       	ldi	r25, 0x01	; 1
    22e0:	a0 e0       	ldi	r26, 0x00	; 0
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	80 93 8c 00 	sts	0x008C, r24
    22e8:	90 93 8d 00 	sts	0x008D, r25
    22ec:	a0 93 8e 00 	sts	0x008E, r26
    22f0:	b0 93 8f 00 	sts	0x008F, r27
    22f4:	0c c0       	rjmp	.+24     	; 0x230e <timerCalculations+0x2da>
			break;
		case F_CPU_1024:
			timerClock_num = 1024;
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	94 e0       	ldi	r25, 0x04	; 4
    22fa:	a0 e0       	ldi	r26, 0x00	; 0
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	80 93 8c 00 	sts	0x008C, r24
    2302:	90 93 8d 00 	sts	0x008D, r25
    2306:	a0 93 8e 00 	sts	0x008E, r26
    230a:	b0 93 8f 00 	sts	0x008F, r27
			break;
	}
}
    230e:	60 96       	adiw	r28, 0x10	; 16
    2310:	0f b6       	in	r0, 0x3f	; 63
    2312:	f8 94       	cli
    2314:	de bf       	out	0x3e, r29	; 62
    2316:	0f be       	out	0x3f, r0	; 63
    2318:	cd bf       	out	0x3d, r28	; 61
    231a:	cf 91       	pop	r28
    231c:	df 91       	pop	r29
    231e:	1f 91       	pop	r17
    2320:	0f 91       	pop	r16
    2322:	ff 90       	pop	r15
    2324:	ef 90       	pop	r14
    2326:	08 95       	ret

00002328 <EEPROM_writeByte>:
/*------------------------------------------------------------------------------
 *  							Function Definitions
 *----------------------------------------------------------------------------*/

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    2328:	df 93       	push	r29
    232a:	cf 93       	push	r28
    232c:	00 d0       	rcall	.+0      	; 0x232e <EEPROM_writeByte+0x6>
    232e:	00 d0       	rcall	.+0      	; 0x2330 <EEPROM_writeByte+0x8>
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	9a 83       	std	Y+2, r25	; 0x02
    2336:	89 83       	std	Y+1, r24	; 0x01
    2338:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    233a:	0e 94 1b 19 	call	0x3236	; 0x3236 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    233e:	0e 94 73 19 	call	0x32e6	; 0x32e6 <TWI_getStatus>
    2342:	88 30       	cpi	r24, 0x08	; 8
    2344:	11 f0       	breq	.+4      	; 0x234a <EEPROM_writeByte+0x22>
        return ERROR;
    2346:	1c 82       	std	Y+4, r1	; 0x04
    2348:	28 c0       	rjmp	.+80     	; 0x239a <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	9a 81       	ldd	r25, Y+2	; 0x02
    234e:	80 70       	andi	r24, 0x00	; 0
    2350:	97 70       	andi	r25, 0x07	; 7
    2352:	88 0f       	add	r24, r24
    2354:	89 2f       	mov	r24, r25
    2356:	88 1f       	adc	r24, r24
    2358:	99 0b       	sbc	r25, r25
    235a:	91 95       	neg	r25
    235c:	80 6a       	ori	r24, 0xA0	; 160
    235e:	0e 94 36 19 	call	0x326c	; 0x326c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2362:	0e 94 73 19 	call	0x32e6	; 0x32e6 <TWI_getStatus>
    2366:	88 31       	cpi	r24, 0x18	; 24
    2368:	11 f0       	breq	.+4      	; 0x236e <EEPROM_writeByte+0x46>
        return ERROR; 
    236a:	1c 82       	std	Y+4, r1	; 0x04
    236c:	16 c0       	rjmp	.+44     	; 0x239a <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	0e 94 36 19 	call	0x326c	; 0x326c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2374:	0e 94 73 19 	call	0x32e6	; 0x32e6 <TWI_getStatus>
    2378:	88 32       	cpi	r24, 0x28	; 40
    237a:	11 f0       	breq	.+4      	; 0x2380 <EEPROM_writeByte+0x58>
        return ERROR;
    237c:	1c 82       	std	Y+4, r1	; 0x04
    237e:	0d c0       	rjmp	.+26     	; 0x239a <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	0e 94 36 19 	call	0x326c	; 0x326c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2386:	0e 94 73 19 	call	0x32e6	; 0x32e6 <TWI_getStatus>
    238a:	88 32       	cpi	r24, 0x28	; 40
    238c:	11 f0       	breq	.+4      	; 0x2392 <EEPROM_writeByte+0x6a>
        return ERROR;
    238e:	1c 82       	std	Y+4, r1	; 0x04
    2390:	04 c0       	rjmp	.+8      	; 0x239a <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    2392:	0e 94 2b 19 	call	0x3256	; 0x3256 <TWI_stop>
	
    return SUCCESS;
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	8c 83       	std	Y+4, r24	; 0x04
    239a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	cf 91       	pop	r28
    23a6:	df 91       	pop	r29
    23a8:	08 95       	ret

000023aa <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    23aa:	df 93       	push	r29
    23ac:	cf 93       	push	r28
    23ae:	00 d0       	rcall	.+0      	; 0x23b0 <EEPROM_readByte+0x6>
    23b0:	00 d0       	rcall	.+0      	; 0x23b2 <EEPROM_readByte+0x8>
    23b2:	0f 92       	push	r0
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	9a 83       	std	Y+2, r25	; 0x02
    23ba:	89 83       	std	Y+1, r24	; 0x01
    23bc:	7c 83       	std	Y+4, r23	; 0x04
    23be:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    23c0:	0e 94 1b 19 	call	0x3236	; 0x3236 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    23c4:	0e 94 73 19 	call	0x32e6	; 0x32e6 <TWI_getStatus>
    23c8:	88 30       	cpi	r24, 0x08	; 8
    23ca:	11 f0       	breq	.+4      	; 0x23d0 <EEPROM_readByte+0x26>
        return ERROR;
    23cc:	1d 82       	std	Y+5, r1	; 0x05
    23ce:	44 c0       	rjmp	.+136    	; 0x2458 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	9a 81       	ldd	r25, Y+2	; 0x02
    23d4:	80 70       	andi	r24, 0x00	; 0
    23d6:	97 70       	andi	r25, 0x07	; 7
    23d8:	88 0f       	add	r24, r24
    23da:	89 2f       	mov	r24, r25
    23dc:	88 1f       	adc	r24, r24
    23de:	99 0b       	sbc	r25, r25
    23e0:	91 95       	neg	r25
    23e2:	80 6a       	ori	r24, 0xA0	; 160
    23e4:	0e 94 36 19 	call	0x326c	; 0x326c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    23e8:	0e 94 73 19 	call	0x32e6	; 0x32e6 <TWI_getStatus>
    23ec:	88 31       	cpi	r24, 0x18	; 24
    23ee:	11 f0       	breq	.+4      	; 0x23f4 <EEPROM_readByte+0x4a>
        return ERROR;
    23f0:	1d 82       	std	Y+5, r1	; 0x05
    23f2:	32 c0       	rjmp	.+100    	; 0x2458 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    23f4:	89 81       	ldd	r24, Y+1	; 0x01
    23f6:	0e 94 36 19 	call	0x326c	; 0x326c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    23fa:	0e 94 73 19 	call	0x32e6	; 0x32e6 <TWI_getStatus>
    23fe:	88 32       	cpi	r24, 0x28	; 40
    2400:	11 f0       	breq	.+4      	; 0x2406 <EEPROM_readByte+0x5c>
        return ERROR;
    2402:	1d 82       	std	Y+5, r1	; 0x05
    2404:	29 c0       	rjmp	.+82     	; 0x2458 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    2406:	0e 94 1b 19 	call	0x3236	; 0x3236 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    240a:	0e 94 73 19 	call	0x32e6	; 0x32e6 <TWI_getStatus>
    240e:	80 31       	cpi	r24, 0x10	; 16
    2410:	11 f0       	breq	.+4      	; 0x2416 <EEPROM_readByte+0x6c>
        return ERROR;
    2412:	1d 82       	std	Y+5, r1	; 0x05
    2414:	21 c0       	rjmp	.+66     	; 0x2458 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	9a 81       	ldd	r25, Y+2	; 0x02
    241a:	80 70       	andi	r24, 0x00	; 0
    241c:	97 70       	andi	r25, 0x07	; 7
    241e:	88 0f       	add	r24, r24
    2420:	89 2f       	mov	r24, r25
    2422:	88 1f       	adc	r24, r24
    2424:	99 0b       	sbc	r25, r25
    2426:	91 95       	neg	r25
    2428:	81 6a       	ori	r24, 0xA1	; 161
    242a:	0e 94 36 19 	call	0x326c	; 0x326c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    242e:	0e 94 73 19 	call	0x32e6	; 0x32e6 <TWI_getStatus>
    2432:	80 34       	cpi	r24, 0x40	; 64
    2434:	11 f0       	breq	.+4      	; 0x243a <EEPROM_readByte+0x90>
        return ERROR;
    2436:	1d 82       	std	Y+5, r1	; 0x05
    2438:	0f c0       	rjmp	.+30     	; 0x2458 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    243a:	0e 94 60 19 	call	0x32c0	; 0x32c0 <TWI_readByteWithNACK>
    243e:	eb 81       	ldd	r30, Y+3	; 0x03
    2440:	fc 81       	ldd	r31, Y+4	; 0x04
    2442:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    2444:	0e 94 73 19 	call	0x32e6	; 0x32e6 <TWI_getStatus>
    2448:	88 35       	cpi	r24, 0x58	; 88
    244a:	11 f0       	breq	.+4      	; 0x2450 <EEPROM_readByte+0xa6>
        return ERROR;
    244c:	1d 82       	std	Y+5, r1	; 0x05
    244e:	04 c0       	rjmp	.+8      	; 0x2458 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    2450:	0e 94 2b 19 	call	0x3256	; 0x3256 <TWI_stop>

    return SUCCESS;
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	8d 83       	std	Y+5, r24	; 0x05
    2458:	8d 81       	ldd	r24, Y+5	; 0x05
}
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	0f 90       	pop	r0
    2462:	0f 90       	pop	r0
    2464:	cf 91       	pop	r28
    2466:	df 91       	pop	r29
    2468:	08 95       	ret

0000246a <GPIO_setupPinDirection>:
 * Description :
 * Set up the DDR of a certain pin (A, B, C or D) to either become an output or an input
 * if an wrong value is given, the function will ignore
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	00 d0       	rcall	.+0      	; 0x2470 <GPIO_setupPinDirection+0x6>
    2470:	00 d0       	rcall	.+0      	; 0x2472 <GPIO_setupPinDirection+0x8>
    2472:	0f 92       	push	r0
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
    2478:	89 83       	std	Y+1, r24	; 0x01
    247a:	6a 83       	std	Y+2, r22	; 0x02
    247c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    247e:	8a 81       	ldd	r24, Y+2	; 0x02
    2480:	88 30       	cpi	r24, 0x08	; 8
    2482:	08 f0       	brcs	.+2      	; 0x2486 <GPIO_setupPinDirection+0x1c>
    2484:	d5 c0       	rjmp	.+426    	; 0x2630 <GPIO_setupPinDirection+0x1c6>
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	84 30       	cpi	r24, 0x04	; 4
    248a:	08 f0       	brcs	.+2      	; 0x248e <GPIO_setupPinDirection+0x24>
    248c:	d1 c0       	rjmp	.+418    	; 0x2630 <GPIO_setupPinDirection+0x1c6>
		/* Ignore */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	28 2f       	mov	r18, r24
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	3d 83       	std	Y+5, r19	; 0x05
    2496:	2c 83       	std	Y+4, r18	; 0x04
    2498:	8c 81       	ldd	r24, Y+4	; 0x04
    249a:	9d 81       	ldd	r25, Y+5	; 0x05
    249c:	81 30       	cpi	r24, 0x01	; 1
    249e:	91 05       	cpc	r25, r1
    24a0:	09 f4       	brne	.+2      	; 0x24a4 <GPIO_setupPinDirection+0x3a>
    24a2:	43 c0       	rjmp	.+134    	; 0x252a <GPIO_setupPinDirection+0xc0>
    24a4:	2c 81       	ldd	r18, Y+4	; 0x04
    24a6:	3d 81       	ldd	r19, Y+5	; 0x05
    24a8:	22 30       	cpi	r18, 0x02	; 2
    24aa:	31 05       	cpc	r19, r1
    24ac:	2c f4       	brge	.+10     	; 0x24b8 <GPIO_setupPinDirection+0x4e>
    24ae:	8c 81       	ldd	r24, Y+4	; 0x04
    24b0:	9d 81       	ldd	r25, Y+5	; 0x05
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	71 f0       	breq	.+28     	; 0x24d2 <GPIO_setupPinDirection+0x68>
    24b6:	bc c0       	rjmp	.+376    	; 0x2630 <GPIO_setupPinDirection+0x1c6>
    24b8:	2c 81       	ldd	r18, Y+4	; 0x04
    24ba:	3d 81       	ldd	r19, Y+5	; 0x05
    24bc:	22 30       	cpi	r18, 0x02	; 2
    24be:	31 05       	cpc	r19, r1
    24c0:	09 f4       	brne	.+2      	; 0x24c4 <GPIO_setupPinDirection+0x5a>
    24c2:	5f c0       	rjmp	.+190    	; 0x2582 <GPIO_setupPinDirection+0x118>
    24c4:	8c 81       	ldd	r24, Y+4	; 0x04
    24c6:	9d 81       	ldd	r25, Y+5	; 0x05
    24c8:	83 30       	cpi	r24, 0x03	; 3
    24ca:	91 05       	cpc	r25, r1
    24cc:	09 f4       	brne	.+2      	; 0x24d0 <GPIO_setupPinDirection+0x66>
    24ce:	85 c0       	rjmp	.+266    	; 0x25da <GPIO_setupPinDirection+0x170>
    24d0:	af c0       	rjmp	.+350    	; 0x2630 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    24d2:	8b 81       	ldd	r24, Y+3	; 0x03
    24d4:	81 30       	cpi	r24, 0x01	; 1
    24d6:	a1 f4       	brne	.+40     	; 0x2500 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    24d8:	aa e3       	ldi	r26, 0x3A	; 58
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	ea e3       	ldi	r30, 0x3A	; 58
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	48 2f       	mov	r20, r24
    24e4:	8a 81       	ldd	r24, Y+2	; 0x02
    24e6:	28 2f       	mov	r18, r24
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	02 2e       	mov	r0, r18
    24f0:	02 c0       	rjmp	.+4      	; 0x24f6 <GPIO_setupPinDirection+0x8c>
    24f2:	88 0f       	add	r24, r24
    24f4:	99 1f       	adc	r25, r25
    24f6:	0a 94       	dec	r0
    24f8:	e2 f7       	brpl	.-8      	; 0x24f2 <GPIO_setupPinDirection+0x88>
    24fa:	84 2b       	or	r24, r20
    24fc:	8c 93       	st	X, r24
    24fe:	98 c0       	rjmp	.+304    	; 0x2630 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2500:	aa e3       	ldi	r26, 0x3A	; 58
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	ea e3       	ldi	r30, 0x3A	; 58
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	48 2f       	mov	r20, r24
    250c:	8a 81       	ldd	r24, Y+2	; 0x02
    250e:	28 2f       	mov	r18, r24
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	02 2e       	mov	r0, r18
    2518:	02 c0       	rjmp	.+4      	; 0x251e <GPIO_setupPinDirection+0xb4>
    251a:	88 0f       	add	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	0a 94       	dec	r0
    2520:	e2 f7       	brpl	.-8      	; 0x251a <GPIO_setupPinDirection+0xb0>
    2522:	80 95       	com	r24
    2524:	84 23       	and	r24, r20
    2526:	8c 93       	st	X, r24
    2528:	83 c0       	rjmp	.+262    	; 0x2630 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	81 30       	cpi	r24, 0x01	; 1
    252e:	a1 f4       	brne	.+40     	; 0x2558 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2530:	a7 e3       	ldi	r26, 0x37	; 55
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	e7 e3       	ldi	r30, 0x37	; 55
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	48 2f       	mov	r20, r24
    253c:	8a 81       	ldd	r24, Y+2	; 0x02
    253e:	28 2f       	mov	r18, r24
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	02 2e       	mov	r0, r18
    2548:	02 c0       	rjmp	.+4      	; 0x254e <GPIO_setupPinDirection+0xe4>
    254a:	88 0f       	add	r24, r24
    254c:	99 1f       	adc	r25, r25
    254e:	0a 94       	dec	r0
    2550:	e2 f7       	brpl	.-8      	; 0x254a <GPIO_setupPinDirection+0xe0>
    2552:	84 2b       	or	r24, r20
    2554:	8c 93       	st	X, r24
    2556:	6c c0       	rjmp	.+216    	; 0x2630 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2558:	a7 e3       	ldi	r26, 0x37	; 55
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	e7 e3       	ldi	r30, 0x37	; 55
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	48 2f       	mov	r20, r24
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	28 2f       	mov	r18, r24
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	02 2e       	mov	r0, r18
    2570:	02 c0       	rjmp	.+4      	; 0x2576 <GPIO_setupPinDirection+0x10c>
    2572:	88 0f       	add	r24, r24
    2574:	99 1f       	adc	r25, r25
    2576:	0a 94       	dec	r0
    2578:	e2 f7       	brpl	.-8      	; 0x2572 <GPIO_setupPinDirection+0x108>
    257a:	80 95       	com	r24
    257c:	84 23       	and	r24, r20
    257e:	8c 93       	st	X, r24
    2580:	57 c0       	rjmp	.+174    	; 0x2630 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2582:	8b 81       	ldd	r24, Y+3	; 0x03
    2584:	81 30       	cpi	r24, 0x01	; 1
    2586:	a1 f4       	brne	.+40     	; 0x25b0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2588:	a4 e3       	ldi	r26, 0x34	; 52
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	e4 e3       	ldi	r30, 0x34	; 52
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	48 2f       	mov	r20, r24
    2594:	8a 81       	ldd	r24, Y+2	; 0x02
    2596:	28 2f       	mov	r18, r24
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	02 2e       	mov	r0, r18
    25a0:	02 c0       	rjmp	.+4      	; 0x25a6 <GPIO_setupPinDirection+0x13c>
    25a2:	88 0f       	add	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	0a 94       	dec	r0
    25a8:	e2 f7       	brpl	.-8      	; 0x25a2 <GPIO_setupPinDirection+0x138>
    25aa:	84 2b       	or	r24, r20
    25ac:	8c 93       	st	X, r24
    25ae:	40 c0       	rjmp	.+128    	; 0x2630 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    25b0:	a4 e3       	ldi	r26, 0x34	; 52
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	e4 e3       	ldi	r30, 0x34	; 52
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	80 81       	ld	r24, Z
    25ba:	48 2f       	mov	r20, r24
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	28 2f       	mov	r18, r24
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	02 2e       	mov	r0, r18
    25c8:	02 c0       	rjmp	.+4      	; 0x25ce <GPIO_setupPinDirection+0x164>
    25ca:	88 0f       	add	r24, r24
    25cc:	99 1f       	adc	r25, r25
    25ce:	0a 94       	dec	r0
    25d0:	e2 f7       	brpl	.-8      	; 0x25ca <GPIO_setupPinDirection+0x160>
    25d2:	80 95       	com	r24
    25d4:	84 23       	and	r24, r20
    25d6:	8c 93       	st	X, r24
    25d8:	2b c0       	rjmp	.+86     	; 0x2630 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    25da:	8b 81       	ldd	r24, Y+3	; 0x03
    25dc:	81 30       	cpi	r24, 0x01	; 1
    25de:	a1 f4       	brne	.+40     	; 0x2608 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    25e0:	a1 e3       	ldi	r26, 0x31	; 49
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	e1 e3       	ldi	r30, 0x31	; 49
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	48 2f       	mov	r20, r24
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	28 2f       	mov	r18, r24
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	02 2e       	mov	r0, r18
    25f8:	02 c0       	rjmp	.+4      	; 0x25fe <GPIO_setupPinDirection+0x194>
    25fa:	88 0f       	add	r24, r24
    25fc:	99 1f       	adc	r25, r25
    25fe:	0a 94       	dec	r0
    2600:	e2 f7       	brpl	.-8      	; 0x25fa <GPIO_setupPinDirection+0x190>
    2602:	84 2b       	or	r24, r20
    2604:	8c 93       	st	X, r24
    2606:	14 c0       	rjmp	.+40     	; 0x2630 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2608:	a1 e3       	ldi	r26, 0x31	; 49
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	e1 e3       	ldi	r30, 0x31	; 49
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	48 2f       	mov	r20, r24
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	28 2f       	mov	r18, r24
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	02 2e       	mov	r0, r18
    2620:	02 c0       	rjmp	.+4      	; 0x2626 <GPIO_setupPinDirection+0x1bc>
    2622:	88 0f       	add	r24, r24
    2624:	99 1f       	adc	r25, r25
    2626:	0a 94       	dec	r0
    2628:	e2 f7       	brpl	.-8      	; 0x2622 <GPIO_setupPinDirection+0x1b8>
    262a:	80 95       	com	r24
    262c:	84 23       	and	r24, r20
    262e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2630:	0f 90       	pop	r0
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	08 95       	ret

00002640 <GPIO_writePin>:
 * Description :
 * Change the value of the following pin to either be 1 or 0
 * if an wrong value is given, the function will ignore
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2640:	df 93       	push	r29
    2642:	cf 93       	push	r28
    2644:	00 d0       	rcall	.+0      	; 0x2646 <GPIO_writePin+0x6>
    2646:	00 d0       	rcall	.+0      	; 0x2648 <GPIO_writePin+0x8>
    2648:	0f 92       	push	r0
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	89 83       	std	Y+1, r24	; 0x01
    2650:	6a 83       	std	Y+2, r22	; 0x02
    2652:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2654:	8a 81       	ldd	r24, Y+2	; 0x02
    2656:	88 30       	cpi	r24, 0x08	; 8
    2658:	08 f0       	brcs	.+2      	; 0x265c <GPIO_writePin+0x1c>
    265a:	d5 c0       	rjmp	.+426    	; 0x2806 <GPIO_writePin+0x1c6>
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	84 30       	cpi	r24, 0x04	; 4
    2660:	08 f0       	brcs	.+2      	; 0x2664 <GPIO_writePin+0x24>
    2662:	d1 c0       	rjmp	.+418    	; 0x2806 <GPIO_writePin+0x1c6>
		/* Ignore */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	28 2f       	mov	r18, r24
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	3d 83       	std	Y+5, r19	; 0x05
    266c:	2c 83       	std	Y+4, r18	; 0x04
    266e:	8c 81       	ldd	r24, Y+4	; 0x04
    2670:	9d 81       	ldd	r25, Y+5	; 0x05
    2672:	81 30       	cpi	r24, 0x01	; 1
    2674:	91 05       	cpc	r25, r1
    2676:	09 f4       	brne	.+2      	; 0x267a <GPIO_writePin+0x3a>
    2678:	43 c0       	rjmp	.+134    	; 0x2700 <GPIO_writePin+0xc0>
    267a:	2c 81       	ldd	r18, Y+4	; 0x04
    267c:	3d 81       	ldd	r19, Y+5	; 0x05
    267e:	22 30       	cpi	r18, 0x02	; 2
    2680:	31 05       	cpc	r19, r1
    2682:	2c f4       	brge	.+10     	; 0x268e <GPIO_writePin+0x4e>
    2684:	8c 81       	ldd	r24, Y+4	; 0x04
    2686:	9d 81       	ldd	r25, Y+5	; 0x05
    2688:	00 97       	sbiw	r24, 0x00	; 0
    268a:	71 f0       	breq	.+28     	; 0x26a8 <GPIO_writePin+0x68>
    268c:	bc c0       	rjmp	.+376    	; 0x2806 <GPIO_writePin+0x1c6>
    268e:	2c 81       	ldd	r18, Y+4	; 0x04
    2690:	3d 81       	ldd	r19, Y+5	; 0x05
    2692:	22 30       	cpi	r18, 0x02	; 2
    2694:	31 05       	cpc	r19, r1
    2696:	09 f4       	brne	.+2      	; 0x269a <GPIO_writePin+0x5a>
    2698:	5f c0       	rjmp	.+190    	; 0x2758 <GPIO_writePin+0x118>
    269a:	8c 81       	ldd	r24, Y+4	; 0x04
    269c:	9d 81       	ldd	r25, Y+5	; 0x05
    269e:	83 30       	cpi	r24, 0x03	; 3
    26a0:	91 05       	cpc	r25, r1
    26a2:	09 f4       	brne	.+2      	; 0x26a6 <GPIO_writePin+0x66>
    26a4:	85 c0       	rjmp	.+266    	; 0x27b0 <GPIO_writePin+0x170>
    26a6:	af c0       	rjmp	.+350    	; 0x2806 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    26a8:	8b 81       	ldd	r24, Y+3	; 0x03
    26aa:	81 30       	cpi	r24, 0x01	; 1
    26ac:	a1 f4       	brne	.+40     	; 0x26d6 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    26ae:	ab e3       	ldi	r26, 0x3B	; 59
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	eb e3       	ldi	r30, 0x3B	; 59
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	48 2f       	mov	r20, r24
    26ba:	8a 81       	ldd	r24, Y+2	; 0x02
    26bc:	28 2f       	mov	r18, r24
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	02 2e       	mov	r0, r18
    26c6:	02 c0       	rjmp	.+4      	; 0x26cc <GPIO_writePin+0x8c>
    26c8:	88 0f       	add	r24, r24
    26ca:	99 1f       	adc	r25, r25
    26cc:	0a 94       	dec	r0
    26ce:	e2 f7       	brpl	.-8      	; 0x26c8 <GPIO_writePin+0x88>
    26d0:	84 2b       	or	r24, r20
    26d2:	8c 93       	st	X, r24
    26d4:	98 c0       	rjmp	.+304    	; 0x2806 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    26d6:	ab e3       	ldi	r26, 0x3B	; 59
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	eb e3       	ldi	r30, 0x3B	; 59
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	48 2f       	mov	r20, r24
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	28 2f       	mov	r18, r24
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	02 2e       	mov	r0, r18
    26ee:	02 c0       	rjmp	.+4      	; 0x26f4 <GPIO_writePin+0xb4>
    26f0:	88 0f       	add	r24, r24
    26f2:	99 1f       	adc	r25, r25
    26f4:	0a 94       	dec	r0
    26f6:	e2 f7       	brpl	.-8      	; 0x26f0 <GPIO_writePin+0xb0>
    26f8:	80 95       	com	r24
    26fa:	84 23       	and	r24, r20
    26fc:	8c 93       	st	X, r24
    26fe:	83 c0       	rjmp	.+262    	; 0x2806 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2700:	8b 81       	ldd	r24, Y+3	; 0x03
    2702:	81 30       	cpi	r24, 0x01	; 1
    2704:	a1 f4       	brne	.+40     	; 0x272e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2706:	a8 e3       	ldi	r26, 0x38	; 56
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	e8 e3       	ldi	r30, 0x38	; 56
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	80 81       	ld	r24, Z
    2710:	48 2f       	mov	r20, r24
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	28 2f       	mov	r18, r24
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	02 2e       	mov	r0, r18
    271e:	02 c0       	rjmp	.+4      	; 0x2724 <GPIO_writePin+0xe4>
    2720:	88 0f       	add	r24, r24
    2722:	99 1f       	adc	r25, r25
    2724:	0a 94       	dec	r0
    2726:	e2 f7       	brpl	.-8      	; 0x2720 <GPIO_writePin+0xe0>
    2728:	84 2b       	or	r24, r20
    272a:	8c 93       	st	X, r24
    272c:	6c c0       	rjmp	.+216    	; 0x2806 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    272e:	a8 e3       	ldi	r26, 0x38	; 56
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	e8 e3       	ldi	r30, 0x38	; 56
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	48 2f       	mov	r20, r24
    273a:	8a 81       	ldd	r24, Y+2	; 0x02
    273c:	28 2f       	mov	r18, r24
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	02 2e       	mov	r0, r18
    2746:	02 c0       	rjmp	.+4      	; 0x274c <GPIO_writePin+0x10c>
    2748:	88 0f       	add	r24, r24
    274a:	99 1f       	adc	r25, r25
    274c:	0a 94       	dec	r0
    274e:	e2 f7       	brpl	.-8      	; 0x2748 <GPIO_writePin+0x108>
    2750:	80 95       	com	r24
    2752:	84 23       	and	r24, r20
    2754:	8c 93       	st	X, r24
    2756:	57 c0       	rjmp	.+174    	; 0x2806 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2758:	8b 81       	ldd	r24, Y+3	; 0x03
    275a:	81 30       	cpi	r24, 0x01	; 1
    275c:	a1 f4       	brne	.+40     	; 0x2786 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    275e:	a5 e3       	ldi	r26, 0x35	; 53
    2760:	b0 e0       	ldi	r27, 0x00	; 0
    2762:	e5 e3       	ldi	r30, 0x35	; 53
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	80 81       	ld	r24, Z
    2768:	48 2f       	mov	r20, r24
    276a:	8a 81       	ldd	r24, Y+2	; 0x02
    276c:	28 2f       	mov	r18, r24
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	02 2e       	mov	r0, r18
    2776:	02 c0       	rjmp	.+4      	; 0x277c <GPIO_writePin+0x13c>
    2778:	88 0f       	add	r24, r24
    277a:	99 1f       	adc	r25, r25
    277c:	0a 94       	dec	r0
    277e:	e2 f7       	brpl	.-8      	; 0x2778 <GPIO_writePin+0x138>
    2780:	84 2b       	or	r24, r20
    2782:	8c 93       	st	X, r24
    2784:	40 c0       	rjmp	.+128    	; 0x2806 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2786:	a5 e3       	ldi	r26, 0x35	; 53
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	e5 e3       	ldi	r30, 0x35	; 53
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	48 2f       	mov	r20, r24
    2792:	8a 81       	ldd	r24, Y+2	; 0x02
    2794:	28 2f       	mov	r18, r24
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	02 2e       	mov	r0, r18
    279e:	02 c0       	rjmp	.+4      	; 0x27a4 <GPIO_writePin+0x164>
    27a0:	88 0f       	add	r24, r24
    27a2:	99 1f       	adc	r25, r25
    27a4:	0a 94       	dec	r0
    27a6:	e2 f7       	brpl	.-8      	; 0x27a0 <GPIO_writePin+0x160>
    27a8:	80 95       	com	r24
    27aa:	84 23       	and	r24, r20
    27ac:	8c 93       	st	X, r24
    27ae:	2b c0       	rjmp	.+86     	; 0x2806 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	81 30       	cpi	r24, 0x01	; 1
    27b4:	a1 f4       	brne	.+40     	; 0x27de <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    27b6:	a2 e3       	ldi	r26, 0x32	; 50
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	e2 e3       	ldi	r30, 0x32	; 50
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 81       	ld	r24, Z
    27c0:	48 2f       	mov	r20, r24
    27c2:	8a 81       	ldd	r24, Y+2	; 0x02
    27c4:	28 2f       	mov	r18, r24
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	02 2e       	mov	r0, r18
    27ce:	02 c0       	rjmp	.+4      	; 0x27d4 <GPIO_writePin+0x194>
    27d0:	88 0f       	add	r24, r24
    27d2:	99 1f       	adc	r25, r25
    27d4:	0a 94       	dec	r0
    27d6:	e2 f7       	brpl	.-8      	; 0x27d0 <GPIO_writePin+0x190>
    27d8:	84 2b       	or	r24, r20
    27da:	8c 93       	st	X, r24
    27dc:	14 c0       	rjmp	.+40     	; 0x2806 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    27de:	a2 e3       	ldi	r26, 0x32	; 50
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	e2 e3       	ldi	r30, 0x32	; 50
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	48 2f       	mov	r20, r24
    27ea:	8a 81       	ldd	r24, Y+2	; 0x02
    27ec:	28 2f       	mov	r18, r24
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	02 2e       	mov	r0, r18
    27f6:	02 c0       	rjmp	.+4      	; 0x27fc <GPIO_writePin+0x1bc>
    27f8:	88 0f       	add	r24, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	0a 94       	dec	r0
    27fe:	e2 f7       	brpl	.-8      	; 0x27f8 <GPIO_writePin+0x1b8>
    2800:	80 95       	com	r24
    2802:	84 23       	and	r24, r20
    2804:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	0f 90       	pop	r0
    2810:	cf 91       	pop	r28
    2812:	df 91       	pop	r29
    2814:	08 95       	ret

00002816 <GPIO_readPin>:
 * Description :
 * Read and return the current of value of the specified pin, which will be either LOGIC_HIGH or LOGIC_LOW
 * if wrong value given, the fucntion will return LOGIC_LOW
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2816:	df 93       	push	r29
    2818:	cf 93       	push	r28
    281a:	00 d0       	rcall	.+0      	; 0x281c <GPIO_readPin+0x6>
    281c:	00 d0       	rcall	.+0      	; 0x281e <GPIO_readPin+0x8>
    281e:	0f 92       	push	r0
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	8a 83       	std	Y+2, r24	; 0x02
    2826:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2828:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	88 30       	cpi	r24, 0x08	; 8
    282e:	08 f0       	brcs	.+2      	; 0x2832 <GPIO_readPin+0x1c>
    2830:	84 c0       	rjmp	.+264    	; 0x293a <GPIO_readPin+0x124>
    2832:	8a 81       	ldd	r24, Y+2	; 0x02
    2834:	84 30       	cpi	r24, 0x04	; 4
    2836:	08 f0       	brcs	.+2      	; 0x283a <GPIO_readPin+0x24>
    2838:	80 c0       	rjmp	.+256    	; 0x293a <GPIO_readPin+0x124>
		/* Ignore */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    283a:	8a 81       	ldd	r24, Y+2	; 0x02
    283c:	28 2f       	mov	r18, r24
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	3d 83       	std	Y+5, r19	; 0x05
    2842:	2c 83       	std	Y+4, r18	; 0x04
    2844:	4c 81       	ldd	r20, Y+4	; 0x04
    2846:	5d 81       	ldd	r21, Y+5	; 0x05
    2848:	41 30       	cpi	r20, 0x01	; 1
    284a:	51 05       	cpc	r21, r1
    284c:	79 f1       	breq	.+94     	; 0x28ac <GPIO_readPin+0x96>
    284e:	8c 81       	ldd	r24, Y+4	; 0x04
    2850:	9d 81       	ldd	r25, Y+5	; 0x05
    2852:	82 30       	cpi	r24, 0x02	; 2
    2854:	91 05       	cpc	r25, r1
    2856:	34 f4       	brge	.+12     	; 0x2864 <GPIO_readPin+0x4e>
    2858:	2c 81       	ldd	r18, Y+4	; 0x04
    285a:	3d 81       	ldd	r19, Y+5	; 0x05
    285c:	21 15       	cp	r18, r1
    285e:	31 05       	cpc	r19, r1
    2860:	69 f0       	breq	.+26     	; 0x287c <GPIO_readPin+0x66>
    2862:	6b c0       	rjmp	.+214    	; 0x293a <GPIO_readPin+0x124>
    2864:	4c 81       	ldd	r20, Y+4	; 0x04
    2866:	5d 81       	ldd	r21, Y+5	; 0x05
    2868:	42 30       	cpi	r20, 0x02	; 2
    286a:	51 05       	cpc	r21, r1
    286c:	b9 f1       	breq	.+110    	; 0x28dc <GPIO_readPin+0xc6>
    286e:	8c 81       	ldd	r24, Y+4	; 0x04
    2870:	9d 81       	ldd	r25, Y+5	; 0x05
    2872:	83 30       	cpi	r24, 0x03	; 3
    2874:	91 05       	cpc	r25, r1
    2876:	09 f4       	brne	.+2      	; 0x287a <GPIO_readPin+0x64>
    2878:	49 c0       	rjmp	.+146    	; 0x290c <GPIO_readPin+0xf6>
    287a:	5f c0       	rjmp	.+190    	; 0x293a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    287c:	e9 e3       	ldi	r30, 0x39	; 57
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	80 81       	ld	r24, Z
    2882:	28 2f       	mov	r18, r24
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	8b 81       	ldd	r24, Y+3	; 0x03
    2888:	88 2f       	mov	r24, r24
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	a9 01       	movw	r20, r18
    288e:	02 c0       	rjmp	.+4      	; 0x2894 <GPIO_readPin+0x7e>
    2890:	55 95       	asr	r21
    2892:	47 95       	ror	r20
    2894:	8a 95       	dec	r24
    2896:	e2 f7       	brpl	.-8      	; 0x2890 <GPIO_readPin+0x7a>
    2898:	ca 01       	movw	r24, r20
    289a:	81 70       	andi	r24, 0x01	; 1
    289c:	90 70       	andi	r25, 0x00	; 0
    289e:	88 23       	and	r24, r24
    28a0:	19 f0       	breq	.+6      	; 0x28a8 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	89 83       	std	Y+1, r24	; 0x01
    28a6:	49 c0       	rjmp	.+146    	; 0x293a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    28a8:	19 82       	std	Y+1, r1	; 0x01
    28aa:	47 c0       	rjmp	.+142    	; 0x293a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    28ac:	e6 e3       	ldi	r30, 0x36	; 54
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	80 81       	ld	r24, Z
    28b2:	28 2f       	mov	r18, r24
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	8b 81       	ldd	r24, Y+3	; 0x03
    28b8:	88 2f       	mov	r24, r24
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	a9 01       	movw	r20, r18
    28be:	02 c0       	rjmp	.+4      	; 0x28c4 <GPIO_readPin+0xae>
    28c0:	55 95       	asr	r21
    28c2:	47 95       	ror	r20
    28c4:	8a 95       	dec	r24
    28c6:	e2 f7       	brpl	.-8      	; 0x28c0 <GPIO_readPin+0xaa>
    28c8:	ca 01       	movw	r24, r20
    28ca:	81 70       	andi	r24, 0x01	; 1
    28cc:	90 70       	andi	r25, 0x00	; 0
    28ce:	88 23       	and	r24, r24
    28d0:	19 f0       	breq	.+6      	; 0x28d8 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	89 83       	std	Y+1, r24	; 0x01
    28d6:	31 c0       	rjmp	.+98     	; 0x293a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    28d8:	19 82       	std	Y+1, r1	; 0x01
    28da:	2f c0       	rjmp	.+94     	; 0x293a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    28dc:	e3 e3       	ldi	r30, 0x33	; 51
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	28 2f       	mov	r18, r24
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	8b 81       	ldd	r24, Y+3	; 0x03
    28e8:	88 2f       	mov	r24, r24
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	a9 01       	movw	r20, r18
    28ee:	02 c0       	rjmp	.+4      	; 0x28f4 <GPIO_readPin+0xde>
    28f0:	55 95       	asr	r21
    28f2:	47 95       	ror	r20
    28f4:	8a 95       	dec	r24
    28f6:	e2 f7       	brpl	.-8      	; 0x28f0 <GPIO_readPin+0xda>
    28f8:	ca 01       	movw	r24, r20
    28fa:	81 70       	andi	r24, 0x01	; 1
    28fc:	90 70       	andi	r25, 0x00	; 0
    28fe:	88 23       	and	r24, r24
    2900:	19 f0       	breq	.+6      	; 0x2908 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	89 83       	std	Y+1, r24	; 0x01
    2906:	19 c0       	rjmp	.+50     	; 0x293a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2908:	19 82       	std	Y+1, r1	; 0x01
    290a:	17 c0       	rjmp	.+46     	; 0x293a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    290c:	e0 e3       	ldi	r30, 0x30	; 48
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	8b 81       	ldd	r24, Y+3	; 0x03
    2918:	88 2f       	mov	r24, r24
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	a9 01       	movw	r20, r18
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <GPIO_readPin+0x10e>
    2920:	55 95       	asr	r21
    2922:	47 95       	ror	r20
    2924:	8a 95       	dec	r24
    2926:	e2 f7       	brpl	.-8      	; 0x2920 <GPIO_readPin+0x10a>
    2928:	ca 01       	movw	r24, r20
    292a:	81 70       	andi	r24, 0x01	; 1
    292c:	90 70       	andi	r25, 0x00	; 0
    292e:	88 23       	and	r24, r24
    2930:	19 f0       	breq	.+6      	; 0x2938 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	89 83       	std	Y+1, r24	; 0x01
    2936:	01 c0       	rjmp	.+2      	; 0x293a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2938:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    293a:	89 81       	ldd	r24, Y+1	; 0x01
}
    293c:	0f 90       	pop	r0
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	cf 91       	pop	r28
    2948:	df 91       	pop	r29
    294a:	08 95       	ret

0000294c <GPIO_setupPortDirection>:
 * Description :
 * Set up the DDR of a certain port (A, B, C or D) to either become an output or an input
 * if an wrong value is given, the function will ignore
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    294c:	df 93       	push	r29
    294e:	cf 93       	push	r28
    2950:	00 d0       	rcall	.+0      	; 0x2952 <GPIO_setupPortDirection+0x6>
    2952:	00 d0       	rcall	.+0      	; 0x2954 <GPIO_setupPortDirection+0x8>
    2954:	cd b7       	in	r28, 0x3d	; 61
    2956:	de b7       	in	r29, 0x3e	; 62
    2958:	89 83       	std	Y+1, r24	; 0x01
    295a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	84 30       	cpi	r24, 0x04	; 4
    2960:	90 f5       	brcc	.+100    	; 0x29c6 <GPIO_setupPortDirection+0x7a>
		/* Ignore */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	28 2f       	mov	r18, r24
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	3c 83       	std	Y+4, r19	; 0x04
    296a:	2b 83       	std	Y+3, r18	; 0x03
    296c:	8b 81       	ldd	r24, Y+3	; 0x03
    296e:	9c 81       	ldd	r25, Y+4	; 0x04
    2970:	81 30       	cpi	r24, 0x01	; 1
    2972:	91 05       	cpc	r25, r1
    2974:	d1 f0       	breq	.+52     	; 0x29aa <GPIO_setupPortDirection+0x5e>
    2976:	2b 81       	ldd	r18, Y+3	; 0x03
    2978:	3c 81       	ldd	r19, Y+4	; 0x04
    297a:	22 30       	cpi	r18, 0x02	; 2
    297c:	31 05       	cpc	r19, r1
    297e:	2c f4       	brge	.+10     	; 0x298a <GPIO_setupPortDirection+0x3e>
    2980:	8b 81       	ldd	r24, Y+3	; 0x03
    2982:	9c 81       	ldd	r25, Y+4	; 0x04
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	61 f0       	breq	.+24     	; 0x29a0 <GPIO_setupPortDirection+0x54>
    2988:	1e c0       	rjmp	.+60     	; 0x29c6 <GPIO_setupPortDirection+0x7a>
    298a:	2b 81       	ldd	r18, Y+3	; 0x03
    298c:	3c 81       	ldd	r19, Y+4	; 0x04
    298e:	22 30       	cpi	r18, 0x02	; 2
    2990:	31 05       	cpc	r19, r1
    2992:	81 f0       	breq	.+32     	; 0x29b4 <GPIO_setupPortDirection+0x68>
    2994:	8b 81       	ldd	r24, Y+3	; 0x03
    2996:	9c 81       	ldd	r25, Y+4	; 0x04
    2998:	83 30       	cpi	r24, 0x03	; 3
    299a:	91 05       	cpc	r25, r1
    299c:	81 f0       	breq	.+32     	; 0x29be <GPIO_setupPortDirection+0x72>
    299e:	13 c0       	rjmp	.+38     	; 0x29c6 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    29a0:	ea e3       	ldi	r30, 0x3A	; 58
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	8a 81       	ldd	r24, Y+2	; 0x02
    29a6:	80 83       	st	Z, r24
    29a8:	0e c0       	rjmp	.+28     	; 0x29c6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    29aa:	e7 e3       	ldi	r30, 0x37	; 55
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	8a 81       	ldd	r24, Y+2	; 0x02
    29b0:	80 83       	st	Z, r24
    29b2:	09 c0       	rjmp	.+18     	; 0x29c6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    29b4:	e4 e3       	ldi	r30, 0x34	; 52
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ba:	80 83       	st	Z, r24
    29bc:	04 c0       	rjmp	.+8      	; 0x29c6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    29be:	e1 e3       	ldi	r30, 0x31	; 49
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	8a 81       	ldd	r24, Y+2	; 0x02
    29c4:	80 83       	st	Z, r24
			break;
		}
	}
}
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	cf 91       	pop	r28
    29d0:	df 91       	pop	r29
    29d2:	08 95       	ret

000029d4 <GPIO_writePort>:
 * Description :
 * Change the value of the following port to either be 1 or 0
 * if an wrong value is given, the function will ignore
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    29d4:	df 93       	push	r29
    29d6:	cf 93       	push	r28
    29d8:	00 d0       	rcall	.+0      	; 0x29da <GPIO_writePort+0x6>
    29da:	00 d0       	rcall	.+0      	; 0x29dc <GPIO_writePort+0x8>
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	89 83       	std	Y+1, r24	; 0x01
    29e2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
    29e6:	84 30       	cpi	r24, 0x04	; 4
    29e8:	90 f5       	brcc	.+100    	; 0x2a4e <GPIO_writePort+0x7a>
		/* Ignore */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	28 2f       	mov	r18, r24
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	3c 83       	std	Y+4, r19	; 0x04
    29f2:	2b 83       	std	Y+3, r18	; 0x03
    29f4:	8b 81       	ldd	r24, Y+3	; 0x03
    29f6:	9c 81       	ldd	r25, Y+4	; 0x04
    29f8:	81 30       	cpi	r24, 0x01	; 1
    29fa:	91 05       	cpc	r25, r1
    29fc:	d1 f0       	breq	.+52     	; 0x2a32 <GPIO_writePort+0x5e>
    29fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2a00:	3c 81       	ldd	r19, Y+4	; 0x04
    2a02:	22 30       	cpi	r18, 0x02	; 2
    2a04:	31 05       	cpc	r19, r1
    2a06:	2c f4       	brge	.+10     	; 0x2a12 <GPIO_writePort+0x3e>
    2a08:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a0c:	00 97       	sbiw	r24, 0x00	; 0
    2a0e:	61 f0       	breq	.+24     	; 0x2a28 <GPIO_writePort+0x54>
    2a10:	1e c0       	rjmp	.+60     	; 0x2a4e <GPIO_writePort+0x7a>
    2a12:	2b 81       	ldd	r18, Y+3	; 0x03
    2a14:	3c 81       	ldd	r19, Y+4	; 0x04
    2a16:	22 30       	cpi	r18, 0x02	; 2
    2a18:	31 05       	cpc	r19, r1
    2a1a:	81 f0       	breq	.+32     	; 0x2a3c <GPIO_writePort+0x68>
    2a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a20:	83 30       	cpi	r24, 0x03	; 3
    2a22:	91 05       	cpc	r25, r1
    2a24:	81 f0       	breq	.+32     	; 0x2a46 <GPIO_writePort+0x72>
    2a26:	13 c0       	rjmp	.+38     	; 0x2a4e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2a28:	eb e3       	ldi	r30, 0x3B	; 59
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2e:	80 83       	st	Z, r24
    2a30:	0e c0       	rjmp	.+28     	; 0x2a4e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2a32:	e8 e3       	ldi	r30, 0x38	; 56
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	8a 81       	ldd	r24, Y+2	; 0x02
    2a38:	80 83       	st	Z, r24
    2a3a:	09 c0       	rjmp	.+18     	; 0x2a4e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2a3c:	e5 e3       	ldi	r30, 0x35	; 53
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	8a 81       	ldd	r24, Y+2	; 0x02
    2a42:	80 83       	st	Z, r24
    2a44:	04 c0       	rjmp	.+8      	; 0x2a4e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2a46:	e2 e3       	ldi	r30, 0x32	; 50
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4c:	80 83       	st	Z, r24
			break;
		}
	}
}
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <GPIO_readPort>:
 * Description :
 * Read and return the current of value of the specified PORT
 * if wrong value given, the fucntion will return LOGIC_LOW
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	00 d0       	rcall	.+0      	; 0x2a62 <GPIO_readPort+0x6>
    2a62:	00 d0       	rcall	.+0      	; 0x2a64 <GPIO_readPort+0x8>
    2a64:	cd b7       	in	r28, 0x3d	; 61
    2a66:	de b7       	in	r29, 0x3e	; 62
    2a68:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2a6a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6e:	84 30       	cpi	r24, 0x04	; 4
    2a70:	90 f5       	brcc	.+100    	; 0x2ad6 <GPIO_readPort+0x7a>
		/* Ignore */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	28 2f       	mov	r18, r24
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	3c 83       	std	Y+4, r19	; 0x04
    2a7a:	2b 83       	std	Y+3, r18	; 0x03
    2a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a80:	81 30       	cpi	r24, 0x01	; 1
    2a82:	91 05       	cpc	r25, r1
    2a84:	d1 f0       	breq	.+52     	; 0x2aba <GPIO_readPort+0x5e>
    2a86:	2b 81       	ldd	r18, Y+3	; 0x03
    2a88:	3c 81       	ldd	r19, Y+4	; 0x04
    2a8a:	22 30       	cpi	r18, 0x02	; 2
    2a8c:	31 05       	cpc	r19, r1
    2a8e:	2c f4       	brge	.+10     	; 0x2a9a <GPIO_readPort+0x3e>
    2a90:	8b 81       	ldd	r24, Y+3	; 0x03
    2a92:	9c 81       	ldd	r25, Y+4	; 0x04
    2a94:	00 97       	sbiw	r24, 0x00	; 0
    2a96:	61 f0       	breq	.+24     	; 0x2ab0 <GPIO_readPort+0x54>
    2a98:	1e c0       	rjmp	.+60     	; 0x2ad6 <GPIO_readPort+0x7a>
    2a9a:	2b 81       	ldd	r18, Y+3	; 0x03
    2a9c:	3c 81       	ldd	r19, Y+4	; 0x04
    2a9e:	22 30       	cpi	r18, 0x02	; 2
    2aa0:	31 05       	cpc	r19, r1
    2aa2:	81 f0       	breq	.+32     	; 0x2ac4 <GPIO_readPort+0x68>
    2aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa8:	83 30       	cpi	r24, 0x03	; 3
    2aaa:	91 05       	cpc	r25, r1
    2aac:	81 f0       	breq	.+32     	; 0x2ace <GPIO_readPort+0x72>
    2aae:	13 c0       	rjmp	.+38     	; 0x2ad6 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2ab0:	e9 e3       	ldi	r30, 0x39	; 57
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	80 81       	ld	r24, Z
    2ab6:	89 83       	std	Y+1, r24	; 0x01
    2ab8:	0e c0       	rjmp	.+28     	; 0x2ad6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2aba:	e6 e3       	ldi	r30, 0x36	; 54
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	80 81       	ld	r24, Z
    2ac0:	89 83       	std	Y+1, r24	; 0x01
    2ac2:	09 c0       	rjmp	.+18     	; 0x2ad6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2ac4:	e3 e3       	ldi	r30, 0x33	; 51
    2ac6:	f0 e0       	ldi	r31, 0x00	; 0
    2ac8:	80 81       	ld	r24, Z
    2aca:	89 83       	std	Y+1, r24	; 0x01
    2acc:	04 c0       	rjmp	.+8      	; 0x2ad6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2ace:	e0 e3       	ldi	r30, 0x30	; 48
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	80 81       	ld	r24, Z
    2ad4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2ad6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ad8:	0f 90       	pop	r0
    2ada:	0f 90       	pop	r0
    2adc:	0f 90       	pop	r0
    2ade:	0f 90       	pop	r0
    2ae0:	cf 91       	pop	r28
    2ae2:	df 91       	pop	r29
    2ae4:	08 95       	ret

00002ae6 <DcMotor_Init>:

/*
 * Description:
 * Initialize the Motor pins
 */
void DcMotor_Init(void){
    2ae6:	df 93       	push	r29
    2ae8:	cf 93       	push	r28
    2aea:	cd b7       	in	r28, 0x3d	; 61
    2aec:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Set up all ports to be output
	 */
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_EN_PIN_ID, PIN_OUTPUT);
    2aee:	83 e0       	ldi	r24, 0x03	; 3
    2af0:	63 e0       	ldi	r22, 0x03	; 3
    2af2:	41 e0       	ldi	r20, 0x01	; 1
    2af4:	0e 94 35 12 	call	0x246a	; 0x246a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_IN1_PIN_ID, PIN_OUTPUT);
    2af8:	83 e0       	ldi	r24, 0x03	; 3
    2afa:	66 e0       	ldi	r22, 0x06	; 6
    2afc:	41 e0       	ldi	r20, 0x01	; 1
    2afe:	0e 94 35 12 	call	0x246a	; 0x246a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_IN2_PIN_ID, PIN_OUTPUT);
    2b02:	83 e0       	ldi	r24, 0x03	; 3
    2b04:	67 e0       	ldi	r22, 0x07	; 7
    2b06:	41 e0       	ldi	r20, 0x01	; 1
    2b08:	0e 94 35 12 	call	0x246a	; 0x246a <GPIO_setupPinDirection>

	/*
	 * To make sure that Motor is turned off
	 */
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    2b0c:	83 e0       	ldi	r24, 0x03	; 3
    2b0e:	66 e0       	ldi	r22, 0x06	; 6
    2b10:	40 e0       	ldi	r20, 0x00	; 0
    2b12:	0e 94 20 13 	call	0x2640	; 0x2640 <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    2b16:	83 e0       	ldi	r24, 0x03	; 3
    2b18:	67 e0       	ldi	r22, 0x07	; 7
    2b1a:	40 e0       	ldi	r20, 0x00	; 0
    2b1c:	0e 94 20 13 	call	0x2640	; 0x2640 <GPIO_writePin>
}
    2b20:	cf 91       	pop	r28
    2b22:	df 91       	pop	r29
    2b24:	08 95       	ret

00002b26 <DcMotor_Rotate>:

/*
 * Description:
 * Allows the Motor to spin in a certain direction and speed based on user specifications
 */
void DcMotor_Rotate(DcMotor_State state, uint8 speed){
    2b26:	df 93       	push	r29
    2b28:	cf 93       	push	r28
    2b2a:	00 d0       	rcall	.+0      	; 0x2b2c <DcMotor_Rotate+0x6>
    2b2c:	00 d0       	rcall	.+0      	; 0x2b2e <DcMotor_Rotate+0x8>
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    2b32:	89 83       	std	Y+1, r24	; 0x01
    2b34:	6a 83       	std	Y+2, r22	; 0x02
	switch(state)
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
    2b38:	28 2f       	mov	r18, r24
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	3c 83       	std	Y+4, r19	; 0x04
    2b3e:	2b 83       	std	Y+3, r18	; 0x03
    2b40:	8b 81       	ldd	r24, Y+3	; 0x03
    2b42:	9c 81       	ldd	r25, Y+4	; 0x04
    2b44:	81 30       	cpi	r24, 0x01	; 1
    2b46:	91 05       	cpc	r25, r1
    2b48:	a1 f0       	breq	.+40     	; 0x2b72 <DcMotor_Rotate+0x4c>
    2b4a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b4c:	3c 81       	ldd	r19, Y+4	; 0x04
    2b4e:	22 30       	cpi	r18, 0x02	; 2
    2b50:	31 05       	cpc	r19, r1
    2b52:	d1 f0       	breq	.+52     	; 0x2b88 <DcMotor_Rotate+0x62>
    2b54:	8b 81       	ldd	r24, Y+3	; 0x03
    2b56:	9c 81       	ldd	r25, Y+4	; 0x04
    2b58:	00 97       	sbiw	r24, 0x00	; 0
    2b5a:	01 f5       	brne	.+64     	; 0x2b9c <DcMotor_Rotate+0x76>
	{
	case 0:
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_HIGH);
    2b5c:	83 e0       	ldi	r24, 0x03	; 3
    2b5e:	66 e0       	ldi	r22, 0x06	; 6
    2b60:	41 e0       	ldi	r20, 0x01	; 1
    2b62:	0e 94 20 13 	call	0x2640	; 0x2640 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    2b66:	83 e0       	ldi	r24, 0x03	; 3
    2b68:	67 e0       	ldi	r22, 0x07	; 7
    2b6a:	40 e0       	ldi	r20, 0x00	; 0
    2b6c:	0e 94 20 13 	call	0x2640	; 0x2640 <GPIO_writePin>
    2b70:	15 c0       	rjmp	.+42     	; 0x2b9c <DcMotor_Rotate+0x76>
		break;
	case 1:
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    2b72:	83 e0       	ldi	r24, 0x03	; 3
    2b74:	66 e0       	ldi	r22, 0x06	; 6
    2b76:	40 e0       	ldi	r20, 0x00	; 0
    2b78:	0e 94 20 13 	call	0x2640	; 0x2640 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_HIGH);
    2b7c:	83 e0       	ldi	r24, 0x03	; 3
    2b7e:	67 e0       	ldi	r22, 0x07	; 7
    2b80:	41 e0       	ldi	r20, 0x01	; 1
    2b82:	0e 94 20 13 	call	0x2640	; 0x2640 <GPIO_writePin>
    2b86:	0a c0       	rjmp	.+20     	; 0x2b9c <DcMotor_Rotate+0x76>
		break;
	case 2:
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    2b88:	83 e0       	ldi	r24, 0x03	; 3
    2b8a:	66 e0       	ldi	r22, 0x06	; 6
    2b8c:	40 e0       	ldi	r20, 0x00	; 0
    2b8e:	0e 94 20 13 	call	0x2640	; 0x2640 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    2b92:	83 e0       	ldi	r24, 0x03	; 3
    2b94:	67 e0       	ldi	r22, 0x07	; 7
    2b96:	40 e0       	ldi	r20, 0x00	; 0
    2b98:	0e 94 20 13 	call	0x2640	; 0x2640 <GPIO_writePin>
		break;
	}

	PWM_Timer0_Start(speed);
    2b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9e:	88 2f       	mov	r24, r24
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <PWM_Timer0_Start>
}
    2ba6:	0f 90       	pop	r0
    2ba8:	0f 90       	pop	r0
    2baa:	0f 90       	pop	r0
    2bac:	0f 90       	pop	r0
    2bae:	cf 91       	pop	r28
    2bb0:	df 91       	pop	r29
    2bb2:	08 95       	ret

00002bb4 <PIR_init>:

/* Description:
 * Initialize the PIR pin
 */

void PIR_init(void){
    2bb4:	df 93       	push	r29
    2bb6:	cf 93       	push	r28
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PIR_PORT_ID, PIR_PIN_ID, PIN_INPUT);
    2bbc:	82 e0       	ldi	r24, 0x02	; 2
    2bbe:	62 e0       	ldi	r22, 0x02	; 2
    2bc0:	40 e0       	ldi	r20, 0x00	; 0
    2bc2:	0e 94 35 12 	call	0x246a	; 0x246a <GPIO_setupPinDirection>
}
    2bc6:	cf 91       	pop	r28
    2bc8:	df 91       	pop	r29
    2bca:	08 95       	ret

00002bcc <PIR_getValue>:

/* Description:
 * Read value of PIR pin
 */
uint8 PIR_getValue(void){
    2bcc:	df 93       	push	r29
    2bce:	cf 93       	push	r28
    2bd0:	cd b7       	in	r28, 0x3d	; 61
    2bd2:	de b7       	in	r29, 0x3e	; 62
	return GPIO_readPin(PIR_PORT_ID ,PIR_PIN_ID);
    2bd4:	82 e0       	ldi	r24, 0x02	; 2
    2bd6:	62 e0       	ldi	r22, 0x02	; 2
    2bd8:	0e 94 0b 14 	call	0x2816	; 0x2816 <GPIO_readPin>
}
    2bdc:	cf 91       	pop	r28
    2bde:	df 91       	pop	r29
    2be0:	08 95       	ret

00002be2 <PWM_Timer0_Start>:

/* Description:
 * Initialize timer0 and start the timer
 * depending on the duty cycle a wave will be given that will be displayed on an Oscillator
 */
void PWM_Timer0_Start(uint8 duty_cycle){
    2be2:	df 93       	push	r29
    2be4:	cf 93       	push	r28
    2be6:	0f 92       	push	r0
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
    2bec:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; // Set initial value
    2bee:	e2 e5       	ldi	r30, 0x52	; 82
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	10 82       	st	Z, r1

	OCR0 = duty_cycle; // Set compare value
    2bf4:	ec e5       	ldi	r30, 0x5C	; 92
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	89 81       	ldd	r24, Y+1	; 0x01
    2bfa:	80 83       	st	Z, r24

	// GPIO_setupPinDirection(PWM_PORT_ID, PWM_PIN_ID, PIN_OUTPUT);

	DDRB  = DDRB | (1<<PB3);
    2bfc:	a7 e3       	ldi	r26, 0x37	; 55
    2bfe:	b0 e0       	ldi	r27, 0x00	; 0
    2c00:	e7 e3       	ldi	r30, 0x37	; 55
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	80 81       	ld	r24, Z
    2c06:	88 60       	ori	r24, 0x08	; 8
    2c08:	8c 93       	st	X, r24
	 * FOC0 = 0 to activate PWM mode
	 * WGM01 = 1 & WGM00 = 1 to activate fast PWM
	 * COM01 = 1 & COM00 = 0  to activate NON-INVERTING mode
	 * CS02 = 0 & CS01 = 1 & CS00 = 1 to activate 64 Prescalar
	 */
	TCCR0 = (1 << WGM01) | (1 << WGM00) | (1 << COM01) | (1 << CS01) |  (1 << CS00);
    2c0a:	e3 e5       	ldi	r30, 0x53	; 83
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	8b e6       	ldi	r24, 0x6B	; 107
    2c10:	80 83       	st	Z, r24
}
    2c12:	0f 90       	pop	r0
    2c14:	cf 91       	pop	r28
    2c16:	df 91       	pop	r29
    2c18:	08 95       	ret

00002c1a <__vector_11>:
/*------------------------------------------------------------------------------
 *  							Interrupt Service Routines
 *----------------------------------------------------------------------------*/

ISR(TIMER0_OVF_vect)
{
    2c1a:	1f 92       	push	r1
    2c1c:	0f 92       	push	r0
    2c1e:	0f b6       	in	r0, 0x3f	; 63
    2c20:	0f 92       	push	r0
    2c22:	11 24       	eor	r1, r1
    2c24:	2f 93       	push	r18
    2c26:	3f 93       	push	r19
    2c28:	4f 93       	push	r20
    2c2a:	5f 93       	push	r21
    2c2c:	6f 93       	push	r22
    2c2e:	7f 93       	push	r23
    2c30:	8f 93       	push	r24
    2c32:	9f 93       	push	r25
    2c34:	af 93       	push	r26
    2c36:	bf 93       	push	r27
    2c38:	ef 93       	push	r30
    2c3a:	ff 93       	push	r31
    2c3c:	df 93       	push	r29
    2c3e:	cf 93       	push	r28
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr[0] != NULL_PTR) {
    2c44:	80 91 94 00 	lds	r24, 0x0094
    2c48:	90 91 95 00 	lds	r25, 0x0095
    2c4c:	00 97       	sbiw	r24, 0x00	; 0
    2c4e:	29 f0       	breq	.+10     	; 0x2c5a <__vector_11+0x40>
        (*g_callBackPtr[0])();
    2c50:	e0 91 94 00 	lds	r30, 0x0094
    2c54:	f0 91 95 00 	lds	r31, 0x0095
    2c58:	09 95       	icall
    }
}
    2c5a:	cf 91       	pop	r28
    2c5c:	df 91       	pop	r29
    2c5e:	ff 91       	pop	r31
    2c60:	ef 91       	pop	r30
    2c62:	bf 91       	pop	r27
    2c64:	af 91       	pop	r26
    2c66:	9f 91       	pop	r25
    2c68:	8f 91       	pop	r24
    2c6a:	7f 91       	pop	r23
    2c6c:	6f 91       	pop	r22
    2c6e:	5f 91       	pop	r21
    2c70:	4f 91       	pop	r20
    2c72:	3f 91       	pop	r19
    2c74:	2f 91       	pop	r18
    2c76:	0f 90       	pop	r0
    2c78:	0f be       	out	0x3f, r0	; 63
    2c7a:	0f 90       	pop	r0
    2c7c:	1f 90       	pop	r1
    2c7e:	18 95       	reti

00002c80 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    2c80:	1f 92       	push	r1
    2c82:	0f 92       	push	r0
    2c84:	0f b6       	in	r0, 0x3f	; 63
    2c86:	0f 92       	push	r0
    2c88:	11 24       	eor	r1, r1
    2c8a:	2f 93       	push	r18
    2c8c:	3f 93       	push	r19
    2c8e:	4f 93       	push	r20
    2c90:	5f 93       	push	r21
    2c92:	6f 93       	push	r22
    2c94:	7f 93       	push	r23
    2c96:	8f 93       	push	r24
    2c98:	9f 93       	push	r25
    2c9a:	af 93       	push	r26
    2c9c:	bf 93       	push	r27
    2c9e:	ef 93       	push	r30
    2ca0:	ff 93       	push	r31
    2ca2:	df 93       	push	r29
    2ca4:	cf 93       	push	r28
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr[0] != NULL_PTR) {
    2caa:	80 91 94 00 	lds	r24, 0x0094
    2cae:	90 91 95 00 	lds	r25, 0x0095
    2cb2:	00 97       	sbiw	r24, 0x00	; 0
    2cb4:	29 f0       	breq	.+10     	; 0x2cc0 <__vector_10+0x40>
        (*g_callBackPtr[0])();
    2cb6:	e0 91 94 00 	lds	r30, 0x0094
    2cba:	f0 91 95 00 	lds	r31, 0x0095
    2cbe:	09 95       	icall
    }
}
    2cc0:	cf 91       	pop	r28
    2cc2:	df 91       	pop	r29
    2cc4:	ff 91       	pop	r31
    2cc6:	ef 91       	pop	r30
    2cc8:	bf 91       	pop	r27
    2cca:	af 91       	pop	r26
    2ccc:	9f 91       	pop	r25
    2cce:	8f 91       	pop	r24
    2cd0:	7f 91       	pop	r23
    2cd2:	6f 91       	pop	r22
    2cd4:	5f 91       	pop	r21
    2cd6:	4f 91       	pop	r20
    2cd8:	3f 91       	pop	r19
    2cda:	2f 91       	pop	r18
    2cdc:	0f 90       	pop	r0
    2cde:	0f be       	out	0x3f, r0	; 63
    2ce0:	0f 90       	pop	r0
    2ce2:	1f 90       	pop	r1
    2ce4:	18 95       	reti

00002ce6 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    2ce6:	1f 92       	push	r1
    2ce8:	0f 92       	push	r0
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	0f 92       	push	r0
    2cee:	11 24       	eor	r1, r1
    2cf0:	2f 93       	push	r18
    2cf2:	3f 93       	push	r19
    2cf4:	4f 93       	push	r20
    2cf6:	5f 93       	push	r21
    2cf8:	6f 93       	push	r22
    2cfa:	7f 93       	push	r23
    2cfc:	8f 93       	push	r24
    2cfe:	9f 93       	push	r25
    2d00:	af 93       	push	r26
    2d02:	bf 93       	push	r27
    2d04:	ef 93       	push	r30
    2d06:	ff 93       	push	r31
    2d08:	df 93       	push	r29
    2d0a:	cf 93       	push	r28
    2d0c:	cd b7       	in	r28, 0x3d	; 61
    2d0e:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr[1] != NULL_PTR) {
    2d10:	80 91 96 00 	lds	r24, 0x0096
    2d14:	90 91 97 00 	lds	r25, 0x0097
    2d18:	00 97       	sbiw	r24, 0x00	; 0
    2d1a:	29 f0       	breq	.+10     	; 0x2d26 <__vector_9+0x40>
        (*g_callBackPtr[1])();
    2d1c:	e0 91 96 00 	lds	r30, 0x0096
    2d20:	f0 91 97 00 	lds	r31, 0x0097
    2d24:	09 95       	icall
    }
}
    2d26:	cf 91       	pop	r28
    2d28:	df 91       	pop	r29
    2d2a:	ff 91       	pop	r31
    2d2c:	ef 91       	pop	r30
    2d2e:	bf 91       	pop	r27
    2d30:	af 91       	pop	r26
    2d32:	9f 91       	pop	r25
    2d34:	8f 91       	pop	r24
    2d36:	7f 91       	pop	r23
    2d38:	6f 91       	pop	r22
    2d3a:	5f 91       	pop	r21
    2d3c:	4f 91       	pop	r20
    2d3e:	3f 91       	pop	r19
    2d40:	2f 91       	pop	r18
    2d42:	0f 90       	pop	r0
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	0f 90       	pop	r0
    2d48:	1f 90       	pop	r1
    2d4a:	18 95       	reti

00002d4c <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    2d4c:	1f 92       	push	r1
    2d4e:	0f 92       	push	r0
    2d50:	0f b6       	in	r0, 0x3f	; 63
    2d52:	0f 92       	push	r0
    2d54:	11 24       	eor	r1, r1
    2d56:	2f 93       	push	r18
    2d58:	3f 93       	push	r19
    2d5a:	4f 93       	push	r20
    2d5c:	5f 93       	push	r21
    2d5e:	6f 93       	push	r22
    2d60:	7f 93       	push	r23
    2d62:	8f 93       	push	r24
    2d64:	9f 93       	push	r25
    2d66:	af 93       	push	r26
    2d68:	bf 93       	push	r27
    2d6a:	ef 93       	push	r30
    2d6c:	ff 93       	push	r31
    2d6e:	df 93       	push	r29
    2d70:	cf 93       	push	r28
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr[1] != NULL_PTR) {
    2d76:	80 91 96 00 	lds	r24, 0x0096
    2d7a:	90 91 97 00 	lds	r25, 0x0097
    2d7e:	00 97       	sbiw	r24, 0x00	; 0
    2d80:	29 f0       	breq	.+10     	; 0x2d8c <__vector_7+0x40>
        (*g_callBackPtr[1])();
    2d82:	e0 91 96 00 	lds	r30, 0x0096
    2d86:	f0 91 97 00 	lds	r31, 0x0097
    2d8a:	09 95       	icall
    }
}
    2d8c:	cf 91       	pop	r28
    2d8e:	df 91       	pop	r29
    2d90:	ff 91       	pop	r31
    2d92:	ef 91       	pop	r30
    2d94:	bf 91       	pop	r27
    2d96:	af 91       	pop	r26
    2d98:	9f 91       	pop	r25
    2d9a:	8f 91       	pop	r24
    2d9c:	7f 91       	pop	r23
    2d9e:	6f 91       	pop	r22
    2da0:	5f 91       	pop	r21
    2da2:	4f 91       	pop	r20
    2da4:	3f 91       	pop	r19
    2da6:	2f 91       	pop	r18
    2da8:	0f 90       	pop	r0
    2daa:	0f be       	out	0x3f, r0	; 63
    2dac:	0f 90       	pop	r0
    2dae:	1f 90       	pop	r1
    2db0:	18 95       	reti

00002db2 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    2db2:	1f 92       	push	r1
    2db4:	0f 92       	push	r0
    2db6:	0f b6       	in	r0, 0x3f	; 63
    2db8:	0f 92       	push	r0
    2dba:	11 24       	eor	r1, r1
    2dbc:	2f 93       	push	r18
    2dbe:	3f 93       	push	r19
    2dc0:	4f 93       	push	r20
    2dc2:	5f 93       	push	r21
    2dc4:	6f 93       	push	r22
    2dc6:	7f 93       	push	r23
    2dc8:	8f 93       	push	r24
    2dca:	9f 93       	push	r25
    2dcc:	af 93       	push	r26
    2dce:	bf 93       	push	r27
    2dd0:	ef 93       	push	r30
    2dd2:	ff 93       	push	r31
    2dd4:	df 93       	push	r29
    2dd6:	cf 93       	push	r28
    2dd8:	cd b7       	in	r28, 0x3d	; 61
    2dda:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr[2] != NULL_PTR) {
    2ddc:	80 91 98 00 	lds	r24, 0x0098
    2de0:	90 91 99 00 	lds	r25, 0x0099
    2de4:	00 97       	sbiw	r24, 0x00	; 0
    2de6:	29 f0       	breq	.+10     	; 0x2df2 <__vector_5+0x40>
        (*g_callBackPtr[2])();
    2de8:	e0 91 98 00 	lds	r30, 0x0098
    2dec:	f0 91 99 00 	lds	r31, 0x0099
    2df0:	09 95       	icall
    }
}
    2df2:	cf 91       	pop	r28
    2df4:	df 91       	pop	r29
    2df6:	ff 91       	pop	r31
    2df8:	ef 91       	pop	r30
    2dfa:	bf 91       	pop	r27
    2dfc:	af 91       	pop	r26
    2dfe:	9f 91       	pop	r25
    2e00:	8f 91       	pop	r24
    2e02:	7f 91       	pop	r23
    2e04:	6f 91       	pop	r22
    2e06:	5f 91       	pop	r21
    2e08:	4f 91       	pop	r20
    2e0a:	3f 91       	pop	r19
    2e0c:	2f 91       	pop	r18
    2e0e:	0f 90       	pop	r0
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	0f 90       	pop	r0
    2e14:	1f 90       	pop	r1
    2e16:	18 95       	reti

00002e18 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    2e18:	1f 92       	push	r1
    2e1a:	0f 92       	push	r0
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	0f 92       	push	r0
    2e20:	11 24       	eor	r1, r1
    2e22:	2f 93       	push	r18
    2e24:	3f 93       	push	r19
    2e26:	4f 93       	push	r20
    2e28:	5f 93       	push	r21
    2e2a:	6f 93       	push	r22
    2e2c:	7f 93       	push	r23
    2e2e:	8f 93       	push	r24
    2e30:	9f 93       	push	r25
    2e32:	af 93       	push	r26
    2e34:	bf 93       	push	r27
    2e36:	ef 93       	push	r30
    2e38:	ff 93       	push	r31
    2e3a:	df 93       	push	r29
    2e3c:	cf 93       	push	r28
    2e3e:	cd b7       	in	r28, 0x3d	; 61
    2e40:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr[2] != NULL_PTR) {
    2e42:	80 91 98 00 	lds	r24, 0x0098
    2e46:	90 91 99 00 	lds	r25, 0x0099
    2e4a:	00 97       	sbiw	r24, 0x00	; 0
    2e4c:	29 f0       	breq	.+10     	; 0x2e58 <__vector_4+0x40>
        (*g_callBackPtr[2])();
    2e4e:	e0 91 98 00 	lds	r30, 0x0098
    2e52:	f0 91 99 00 	lds	r31, 0x0099
    2e56:	09 95       	icall
    }
}
    2e58:	cf 91       	pop	r28
    2e5a:	df 91       	pop	r29
    2e5c:	ff 91       	pop	r31
    2e5e:	ef 91       	pop	r30
    2e60:	bf 91       	pop	r27
    2e62:	af 91       	pop	r26
    2e64:	9f 91       	pop	r25
    2e66:	8f 91       	pop	r24
    2e68:	7f 91       	pop	r23
    2e6a:	6f 91       	pop	r22
    2e6c:	5f 91       	pop	r21
    2e6e:	4f 91       	pop	r20
    2e70:	3f 91       	pop	r19
    2e72:	2f 91       	pop	r18
    2e74:	0f 90       	pop	r0
    2e76:	0f be       	out	0x3f, r0	; 63
    2e78:	0f 90       	pop	r0
    2e7a:	1f 90       	pop	r1
    2e7c:	18 95       	reti

00002e7e <Timer_init>:
/*
 * Description:
 * Function to initialize the timer with specific configurations
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    2e7e:	df 93       	push	r29
    2e80:	cf 93       	push	r28
    2e82:	00 d0       	rcall	.+0      	; 0x2e84 <Timer_init+0x6>
    2e84:	cd b7       	in	r28, 0x3d	; 61
    2e86:	de b7       	in	r29, 0x3e	; 62
    2e88:	9a 83       	std	Y+2, r25	; 0x02
    2e8a:	89 83       	std	Y+1, r24	; 0x01
    if (Config_Ptr->timer_ID == TIMER_timer0)
    2e8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e90:	86 81       	ldd	r24, Z+6	; 0x06
    2e92:	88 23       	and	r24, r24
    2e94:	09 f0       	breq	.+2      	; 0x2e98 <Timer_init+0x1a>
    2e96:	6c c0       	rjmp	.+216    	; 0x2f70 <Timer_init+0xf2>
    {
        TCNT0 = Config_Ptr->timer_InitialValue;
    2e98:	a2 e5       	ldi	r26, 0x52	; 82
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2ea0:	80 81       	ld	r24, Z
    2ea2:	91 81       	ldd	r25, Z+1	; 0x01
    2ea4:	8c 93       	st	X, r24

        /*
         * This calculation is used to determine prescalar since Timer 2 and 0/1 have different values of prescalar
         */
		if(Config_Ptr->timer_clock > 5)
    2ea6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ea8:	fa 81       	ldd	r31, Y+2	; 0x02
    2eaa:	87 81       	ldd	r24, Z+7	; 0x07
    2eac:	86 30       	cpi	r24, 0x06	; 6
    2eae:	70 f0       	brcs	.+28     	; 0x2ecc <Timer_init+0x4e>
			TCCR0 = (Config_Ptr->timer_clock - 2) | (TCCR0 & 0xF8);
    2eb0:	a3 e5       	ldi	r26, 0x53	; 83
    2eb2:	b0 e0       	ldi	r27, 0x00	; 0
    2eb4:	e9 81       	ldd	r30, Y+1	; 0x01
    2eb6:	fa 81       	ldd	r31, Y+2	; 0x02
    2eb8:	87 81       	ldd	r24, Z+7	; 0x07
    2eba:	82 50       	subi	r24, 0x02	; 2
    2ebc:	98 2f       	mov	r25, r24
    2ebe:	e3 e5       	ldi	r30, 0x53	; 83
    2ec0:	f0 e0       	ldi	r31, 0x00	; 0
    2ec2:	80 81       	ld	r24, Z
    2ec4:	88 7f       	andi	r24, 0xF8	; 248
    2ec6:	89 2b       	or	r24, r25
    2ec8:	8c 93       	st	X, r24
    2eca:	1f c0       	rjmp	.+62     	; 0x2f0a <Timer_init+0x8c>
		else if(Config_Ptr->timer_clock > 3)
    2ecc:	e9 81       	ldd	r30, Y+1	; 0x01
    2ece:	fa 81       	ldd	r31, Y+2	; 0x02
    2ed0:	87 81       	ldd	r24, Z+7	; 0x07
    2ed2:	84 30       	cpi	r24, 0x04	; 4
    2ed4:	70 f0       	brcs	.+28     	; 0x2ef2 <Timer_init+0x74>
			TCCR0 = (Config_Ptr->timer_clock - 1) | (TCCR0 & 0xF8);
    2ed6:	a3 e5       	ldi	r26, 0x53	; 83
    2ed8:	b0 e0       	ldi	r27, 0x00	; 0
    2eda:	e9 81       	ldd	r30, Y+1	; 0x01
    2edc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ede:	87 81       	ldd	r24, Z+7	; 0x07
    2ee0:	81 50       	subi	r24, 0x01	; 1
    2ee2:	98 2f       	mov	r25, r24
    2ee4:	e3 e5       	ldi	r30, 0x53	; 83
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	80 81       	ld	r24, Z
    2eea:	88 7f       	andi	r24, 0xF8	; 248
    2eec:	89 2b       	or	r24, r25
    2eee:	8c 93       	st	X, r24
    2ef0:	0c c0       	rjmp	.+24     	; 0x2f0a <Timer_init+0x8c>
		else
			TCCR0 = (Config_Ptr->timer_clock) | (TCCR0 & 0xF8);
    2ef2:	a3 e5       	ldi	r26, 0x53	; 83
    2ef4:	b0 e0       	ldi	r27, 0x00	; 0
    2ef6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ef8:	fa 81       	ldd	r31, Y+2	; 0x02
    2efa:	87 81       	ldd	r24, Z+7	; 0x07
    2efc:	98 2f       	mov	r25, r24
    2efe:	e3 e5       	ldi	r30, 0x53	; 83
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	80 81       	ld	r24, Z
    2f04:	88 7f       	andi	r24, 0xF8	; 248
    2f06:	89 2b       	or	r24, r25
    2f08:	8c 93       	st	X, r24

        TCCR0 |= (1 << FOC0); /* Force Output Compare for non-PWM modes */
    2f0a:	a3 e5       	ldi	r26, 0x53	; 83
    2f0c:	b0 e0       	ldi	r27, 0x00	; 0
    2f0e:	e3 e5       	ldi	r30, 0x53	; 83
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	80 81       	ld	r24, Z
    2f14:	80 68       	ori	r24, 0x80	; 128
    2f16:	8c 93       	st	X, r24

        if (Config_Ptr->timer_mode == MODE_normal)
    2f18:	e9 81       	ldd	r30, Y+1	; 0x01
    2f1a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f1c:	80 85       	ldd	r24, Z+8	; 0x08
    2f1e:	88 23       	and	r24, r24
    2f20:	41 f4       	brne	.+16     	; 0x2f32 <Timer_init+0xb4>
        {
        	/*
        	 * Flag of Normal mode to 1
        	 */
			TIMSK |= 1 << TOIE0;
    2f22:	a9 e5       	ldi	r26, 0x59	; 89
    2f24:	b0 e0       	ldi	r27, 0x00	; 0
    2f26:	e9 e5       	ldi	r30, 0x59	; 89
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	80 81       	ld	r24, Z
    2f2c:	81 60       	ori	r24, 0x01	; 1
    2f2e:	8c 93       	st	X, r24
    2f30:	db c0       	rjmp	.+438    	; 0x30e8 <Timer_init+0x26a>
        }
        else if (Config_Ptr->timer_mode == MODE_CTC)
    2f32:	e9 81       	ldd	r30, Y+1	; 0x01
    2f34:	fa 81       	ldd	r31, Y+2	; 0x02
    2f36:	80 85       	ldd	r24, Z+8	; 0x08
    2f38:	81 30       	cpi	r24, 0x01	; 1
    2f3a:	09 f0       	breq	.+2      	; 0x2f3e <Timer_init+0xc0>
    2f3c:	d5 c0       	rjmp	.+426    	; 0x30e8 <Timer_init+0x26a>
        	/*
        	 * WGM01 = 1 to activate Compare mode
        	 * Flag of Compare mode to 1
        	 * Set the OCR0 to the inputed compare value
        	 */
        	TCCR0 |= 1 << WGM01;
    2f3e:	a3 e5       	ldi	r26, 0x53	; 83
    2f40:	b0 e0       	ldi	r27, 0x00	; 0
    2f42:	e3 e5       	ldi	r30, 0x53	; 83
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	80 81       	ld	r24, Z
    2f48:	88 60       	ori	r24, 0x08	; 8
    2f4a:	8c 93       	st	X, r24

            OCR0 = Config_Ptr->timer_compare_MatchValue;
    2f4c:	2c e5       	ldi	r18, 0x5C	; 92
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	e9 81       	ldd	r30, Y+1	; 0x01
    2f52:	fa 81       	ldd	r31, Y+2	; 0x02
    2f54:	82 81       	ldd	r24, Z+2	; 0x02
    2f56:	93 81       	ldd	r25, Z+3	; 0x03
    2f58:	a4 81       	ldd	r26, Z+4	; 0x04
    2f5a:	b5 81       	ldd	r27, Z+5	; 0x05
    2f5c:	f9 01       	movw	r30, r18
    2f5e:	80 83       	st	Z, r24

            TIMSK |= 1 << OCIE0;
    2f60:	a9 e5       	ldi	r26, 0x59	; 89
    2f62:	b0 e0       	ldi	r27, 0x00	; 0
    2f64:	e9 e5       	ldi	r30, 0x59	; 89
    2f66:	f0 e0       	ldi	r31, 0x00	; 0
    2f68:	80 81       	ld	r24, Z
    2f6a:	82 60       	ori	r24, 0x02	; 2
    2f6c:	8c 93       	st	X, r24
    2f6e:	bc c0       	rjmp	.+376    	; 0x30e8 <Timer_init+0x26a>
        }
    }

    else if (Config_Ptr->timer_ID == TIMER_timer1)
    2f70:	e9 81       	ldd	r30, Y+1	; 0x01
    2f72:	fa 81       	ldd	r31, Y+2	; 0x02
    2f74:	86 81       	ldd	r24, Z+6	; 0x06
    2f76:	81 30       	cpi	r24, 0x01	; 1
    2f78:	09 f0       	breq	.+2      	; 0x2f7c <Timer_init+0xfe>
    2f7a:	6c c0       	rjmp	.+216    	; 0x3054 <Timer_init+0x1d6>
    {
        TCNT1 = Config_Ptr->timer_InitialValue;
    2f7c:	ac e4       	ldi	r26, 0x4C	; 76
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	e9 81       	ldd	r30, Y+1	; 0x01
    2f82:	fa 81       	ldd	r31, Y+2	; 0x02
    2f84:	80 81       	ld	r24, Z
    2f86:	91 81       	ldd	r25, Z+1	; 0x01
    2f88:	11 96       	adiw	r26, 0x01	; 1
    2f8a:	9c 93       	st	X, r25
    2f8c:	8e 93       	st	-X, r24

        TCCR1A = 1 << FOC1A; /* Force Output Compare for non-PWM modes */
    2f8e:	ef e4       	ldi	r30, 0x4F	; 79
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	88 e0       	ldi	r24, 0x08	; 8
    2f94:	80 83       	st	Z, r24

        /*
         * This calculation is used to determine prescalar since Timer 2 and 0/1 have different values of prescalar
         */
		if(Config_Ptr->timer_clock > 5)
    2f96:	e9 81       	ldd	r30, Y+1	; 0x01
    2f98:	fa 81       	ldd	r31, Y+2	; 0x02
    2f9a:	87 81       	ldd	r24, Z+7	; 0x07
    2f9c:	86 30       	cpi	r24, 0x06	; 6
    2f9e:	70 f0       	brcs	.+28     	; 0x2fbc <Timer_init+0x13e>
			TCCR1B = (Config_Ptr->timer_clock - 2) | (TCCR1B & 0xF8);
    2fa0:	ae e4       	ldi	r26, 0x4E	; 78
    2fa2:	b0 e0       	ldi	r27, 0x00	; 0
    2fa4:	e9 81       	ldd	r30, Y+1	; 0x01
    2fa6:	fa 81       	ldd	r31, Y+2	; 0x02
    2fa8:	87 81       	ldd	r24, Z+7	; 0x07
    2faa:	82 50       	subi	r24, 0x02	; 2
    2fac:	98 2f       	mov	r25, r24
    2fae:	ee e4       	ldi	r30, 0x4E	; 78
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	80 81       	ld	r24, Z
    2fb4:	88 7f       	andi	r24, 0xF8	; 248
    2fb6:	89 2b       	or	r24, r25
    2fb8:	8c 93       	st	X, r24
    2fba:	1f c0       	rjmp	.+62     	; 0x2ffa <Timer_init+0x17c>
		else if(Config_Ptr->timer_clock > 3)
    2fbc:	e9 81       	ldd	r30, Y+1	; 0x01
    2fbe:	fa 81       	ldd	r31, Y+2	; 0x02
    2fc0:	87 81       	ldd	r24, Z+7	; 0x07
    2fc2:	84 30       	cpi	r24, 0x04	; 4
    2fc4:	70 f0       	brcs	.+28     	; 0x2fe2 <Timer_init+0x164>
			TCCR1B = (Config_Ptr->timer_clock - 1) | (TCCR1B & 0xF8);
    2fc6:	ae e4       	ldi	r26, 0x4E	; 78
    2fc8:	b0 e0       	ldi	r27, 0x00	; 0
    2fca:	e9 81       	ldd	r30, Y+1	; 0x01
    2fcc:	fa 81       	ldd	r31, Y+2	; 0x02
    2fce:	87 81       	ldd	r24, Z+7	; 0x07
    2fd0:	81 50       	subi	r24, 0x01	; 1
    2fd2:	98 2f       	mov	r25, r24
    2fd4:	ee e4       	ldi	r30, 0x4E	; 78
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	80 81       	ld	r24, Z
    2fda:	88 7f       	andi	r24, 0xF8	; 248
    2fdc:	89 2b       	or	r24, r25
    2fde:	8c 93       	st	X, r24
    2fe0:	0c c0       	rjmp	.+24     	; 0x2ffa <Timer_init+0x17c>
		else
			TCCR1B = (Config_Ptr->timer_clock) | (TCCR1B & 0xF8);
    2fe2:	ae e4       	ldi	r26, 0x4E	; 78
    2fe4:	b0 e0       	ldi	r27, 0x00	; 0
    2fe6:	e9 81       	ldd	r30, Y+1	; 0x01
    2fe8:	fa 81       	ldd	r31, Y+2	; 0x02
    2fea:	87 81       	ldd	r24, Z+7	; 0x07
    2fec:	98 2f       	mov	r25, r24
    2fee:	ee e4       	ldi	r30, 0x4E	; 78
    2ff0:	f0 e0       	ldi	r31, 0x00	; 0
    2ff2:	80 81       	ld	r24, Z
    2ff4:	88 7f       	andi	r24, 0xF8	; 248
    2ff6:	89 2b       	or	r24, r25
    2ff8:	8c 93       	st	X, r24

        if (Config_Ptr->timer_mode == MODE_normal)
    2ffa:	e9 81       	ldd	r30, Y+1	; 0x01
    2ffc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ffe:	80 85       	ldd	r24, Z+8	; 0x08
    3000:	88 23       	and	r24, r24
    3002:	41 f4       	brne	.+16     	; 0x3014 <Timer_init+0x196>
        {
        	/*
        	 * Flag of Normal mode to 1
        	 */
        	TIMSK |= 1 << TOIE1;
    3004:	a9 e5       	ldi	r26, 0x59	; 89
    3006:	b0 e0       	ldi	r27, 0x00	; 0
    3008:	e9 e5       	ldi	r30, 0x59	; 89
    300a:	f0 e0       	ldi	r31, 0x00	; 0
    300c:	80 81       	ld	r24, Z
    300e:	84 60       	ori	r24, 0x04	; 4
    3010:	8c 93       	st	X, r24
    3012:	6a c0       	rjmp	.+212    	; 0x30e8 <Timer_init+0x26a>
        }
        else if (Config_Ptr->timer_mode == MODE_CTC)
    3014:	e9 81       	ldd	r30, Y+1	; 0x01
    3016:	fa 81       	ldd	r31, Y+2	; 0x02
    3018:	80 85       	ldd	r24, Z+8	; 0x08
    301a:	81 30       	cpi	r24, 0x01	; 1
    301c:	09 f0       	breq	.+2      	; 0x3020 <Timer_init+0x1a2>
    301e:	64 c0       	rjmp	.+200    	; 0x30e8 <Timer_init+0x26a>
        	/*
        	 * WGM12 = 1 to activate Compare mode
        	 * Flag of Compare mode to 1
        	 * Set the OCR1A to the inputed compare value
        	 */
            OCR1A = Config_Ptr->timer_compare_MatchValue;
    3020:	2a e4       	ldi	r18, 0x4A	; 74
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	e9 81       	ldd	r30, Y+1	; 0x01
    3026:	fa 81       	ldd	r31, Y+2	; 0x02
    3028:	82 81       	ldd	r24, Z+2	; 0x02
    302a:	93 81       	ldd	r25, Z+3	; 0x03
    302c:	a4 81       	ldd	r26, Z+4	; 0x04
    302e:	b5 81       	ldd	r27, Z+5	; 0x05
    3030:	f9 01       	movw	r30, r18
    3032:	91 83       	std	Z+1, r25	; 0x01
    3034:	80 83       	st	Z, r24
            TIMSK |= 1 << OCIE1A;
    3036:	a9 e5       	ldi	r26, 0x59	; 89
    3038:	b0 e0       	ldi	r27, 0x00	; 0
    303a:	e9 e5       	ldi	r30, 0x59	; 89
    303c:	f0 e0       	ldi	r31, 0x00	; 0
    303e:	80 81       	ld	r24, Z
    3040:	80 61       	ori	r24, 0x10	; 16
    3042:	8c 93       	st	X, r24
        	TCCR1B |= 1 << WGM12;
    3044:	ae e4       	ldi	r26, 0x4E	; 78
    3046:	b0 e0       	ldi	r27, 0x00	; 0
    3048:	ee e4       	ldi	r30, 0x4E	; 78
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	80 81       	ld	r24, Z
    304e:	88 60       	ori	r24, 0x08	; 8
    3050:	8c 93       	st	X, r24
    3052:	4a c0       	rjmp	.+148    	; 0x30e8 <Timer_init+0x26a>
        }
    }

    else if (Config_Ptr->timer_ID == TIMER_timer2)
    3054:	e9 81       	ldd	r30, Y+1	; 0x01
    3056:	fa 81       	ldd	r31, Y+2	; 0x02
    3058:	86 81       	ldd	r24, Z+6	; 0x06
    305a:	82 30       	cpi	r24, 0x02	; 2
    305c:	09 f0       	breq	.+2      	; 0x3060 <Timer_init+0x1e2>
    305e:	44 c0       	rjmp	.+136    	; 0x30e8 <Timer_init+0x26a>
    {
		TCNT2 = Config_Ptr->timer_InitialValue;
    3060:	a4 e4       	ldi	r26, 0x44	; 68
    3062:	b0 e0       	ldi	r27, 0x00	; 0
    3064:	e9 81       	ldd	r30, Y+1	; 0x01
    3066:	fa 81       	ldd	r31, Y+2	; 0x02
    3068:	80 81       	ld	r24, Z
    306a:	91 81       	ldd	r25, Z+1	; 0x01
    306c:	8c 93       	st	X, r24

		/*
		 * Set PreScalar
		 */
		TCCR2 = (Config_Ptr->timer_clock) | (TCCR0 & 0xF8);
    306e:	a5 e4       	ldi	r26, 0x45	; 69
    3070:	b0 e0       	ldi	r27, 0x00	; 0
    3072:	e9 81       	ldd	r30, Y+1	; 0x01
    3074:	fa 81       	ldd	r31, Y+2	; 0x02
    3076:	87 81       	ldd	r24, Z+7	; 0x07
    3078:	98 2f       	mov	r25, r24
    307a:	e3 e5       	ldi	r30, 0x53	; 83
    307c:	f0 e0       	ldi	r31, 0x00	; 0
    307e:	80 81       	ld	r24, Z
    3080:	88 7f       	andi	r24, 0xF8	; 248
    3082:	89 2b       	or	r24, r25
    3084:	8c 93       	st	X, r24

		TCCR2 |= (1 << FOC2); /* Force Output Compare for non-PWM modes */
    3086:	a5 e4       	ldi	r26, 0x45	; 69
    3088:	b0 e0       	ldi	r27, 0x00	; 0
    308a:	e5 e4       	ldi	r30, 0x45	; 69
    308c:	f0 e0       	ldi	r31, 0x00	; 0
    308e:	80 81       	ld	r24, Z
    3090:	80 68       	ori	r24, 0x80	; 128
    3092:	8c 93       	st	X, r24

		if (Config_Ptr->timer_mode == MODE_normal)
    3094:	e9 81       	ldd	r30, Y+1	; 0x01
    3096:	fa 81       	ldd	r31, Y+2	; 0x02
    3098:	80 85       	ldd	r24, Z+8	; 0x08
    309a:	88 23       	and	r24, r24
    309c:	41 f4       	brne	.+16     	; 0x30ae <Timer_init+0x230>
		{
			/*
			 * Set the Normal mode flag to 1
			 */
			TIMSK |= 1 << TOIE2;
    309e:	a9 e5       	ldi	r26, 0x59	; 89
    30a0:	b0 e0       	ldi	r27, 0x00	; 0
    30a2:	e9 e5       	ldi	r30, 0x59	; 89
    30a4:	f0 e0       	ldi	r31, 0x00	; 0
    30a6:	80 81       	ld	r24, Z
    30a8:	80 64       	ori	r24, 0x40	; 64
    30aa:	8c 93       	st	X, r24
    30ac:	1d c0       	rjmp	.+58     	; 0x30e8 <Timer_init+0x26a>
		}
		else if (Config_Ptr->timer_mode == MODE_CTC)
    30ae:	e9 81       	ldd	r30, Y+1	; 0x01
    30b0:	fa 81       	ldd	r31, Y+2	; 0x02
    30b2:	80 85       	ldd	r24, Z+8	; 0x08
    30b4:	81 30       	cpi	r24, 0x01	; 1
    30b6:	c1 f4       	brne	.+48     	; 0x30e8 <Timer_init+0x26a>
        	/*
        	 * WGM21 = 1 to activate Compare mode
        	 * Flag of Compare mode to 1
        	 * Set the OCR2 to the inputed compare value
        	 */
			TCCR2 |= 1 << WGM21;
    30b8:	a5 e4       	ldi	r26, 0x45	; 69
    30ba:	b0 e0       	ldi	r27, 0x00	; 0
    30bc:	e5 e4       	ldi	r30, 0x45	; 69
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	80 81       	ld	r24, Z
    30c2:	88 60       	ori	r24, 0x08	; 8
    30c4:	8c 93       	st	X, r24

			OCR2 = Config_Ptr->timer_compare_MatchValue;
    30c6:	23 e4       	ldi	r18, 0x43	; 67
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	e9 81       	ldd	r30, Y+1	; 0x01
    30cc:	fa 81       	ldd	r31, Y+2	; 0x02
    30ce:	82 81       	ldd	r24, Z+2	; 0x02
    30d0:	93 81       	ldd	r25, Z+3	; 0x03
    30d2:	a4 81       	ldd	r26, Z+4	; 0x04
    30d4:	b5 81       	ldd	r27, Z+5	; 0x05
    30d6:	f9 01       	movw	r30, r18
    30d8:	80 83       	st	Z, r24

			TIMSK |= 1 << OCIE2;
    30da:	a9 e5       	ldi	r26, 0x59	; 89
    30dc:	b0 e0       	ldi	r27, 0x00	; 0
    30de:	e9 e5       	ldi	r30, 0x59	; 89
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	80 81       	ld	r24, Z
    30e4:	80 68       	ori	r24, 0x80	; 128
    30e6:	8c 93       	st	X, r24
		}
	}
}
    30e8:	0f 90       	pop	r0
    30ea:	0f 90       	pop	r0
    30ec:	cf 91       	pop	r28
    30ee:	df 91       	pop	r29
    30f0:	08 95       	ret

000030f2 <Timer_deinit>:
/*
 * Description:
 * Function to de-initialize the timer with specific configurations
 */
void Timer_deinit(Timer_ID_Type timer_type)
{
    30f2:	df 93       	push	r29
    30f4:	cf 93       	push	r28
    30f6:	0f 92       	push	r0
    30f8:	cd b7       	in	r28, 0x3d	; 61
    30fa:	de b7       	in	r29, 0x3e	; 62
    30fc:	89 83       	std	Y+1, r24	; 0x01
    if (timer_type == TIMER_timer0)
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
    3100:	88 23       	and	r24, r24
    3102:	c1 f4       	brne	.+48     	; 0x3134 <Timer_deinit+0x42>
    {
        TCCR0 = 0x00;
    3104:	e3 e5       	ldi	r30, 0x53	; 83
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	10 82       	st	Z, r1
        TCNT0 = 0x00;
    310a:	e2 e5       	ldi	r30, 0x52	; 82
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	10 82       	st	Z, r1
        OCR0 = 0x00;
    3110:	ec e5       	ldi	r30, 0x5C	; 92
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	10 82       	st	Z, r1
        TIMSK &= ~(1 << TOIE0);
    3116:	a9 e5       	ldi	r26, 0x59	; 89
    3118:	b0 e0       	ldi	r27, 0x00	; 0
    311a:	e9 e5       	ldi	r30, 0x59	; 89
    311c:	f0 e0       	ldi	r31, 0x00	; 0
    311e:	80 81       	ld	r24, Z
    3120:	8e 7f       	andi	r24, 0xFE	; 254
    3122:	8c 93       	st	X, r24
        TIMSK &= ~(1 << OCIE0);
    3124:	a9 e5       	ldi	r26, 0x59	; 89
    3126:	b0 e0       	ldi	r27, 0x00	; 0
    3128:	e9 e5       	ldi	r30, 0x59	; 89
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	80 81       	ld	r24, Z
    312e:	8d 7f       	andi	r24, 0xFD	; 253
    3130:	8c 93       	st	X, r24
    3132:	3a c0       	rjmp	.+116    	; 0x31a8 <Timer_deinit+0xb6>
    }
    else if (timer_type == TIMER_timer1)
    3134:	89 81       	ldd	r24, Y+1	; 0x01
    3136:	81 30       	cpi	r24, 0x01	; 1
    3138:	e9 f4       	brne	.+58     	; 0x3174 <Timer_deinit+0x82>
    {
        TCCR1A = 0x00;
    313a:	ef e4       	ldi	r30, 0x4F	; 79
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	10 82       	st	Z, r1
        TCCR1B = 0x00;
    3140:	ee e4       	ldi	r30, 0x4E	; 78
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	10 82       	st	Z, r1
        TCNT1 = 0x00;
    3146:	ec e4       	ldi	r30, 0x4C	; 76
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	11 82       	std	Z+1, r1	; 0x01
    314c:	10 82       	st	Z, r1
        OCR1A = 0x00;
    314e:	ea e4       	ldi	r30, 0x4A	; 74
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	11 82       	std	Z+1, r1	; 0x01
    3154:	10 82       	st	Z, r1
        TIMSK &= ~(1 << TOIE1);
    3156:	a9 e5       	ldi	r26, 0x59	; 89
    3158:	b0 e0       	ldi	r27, 0x00	; 0
    315a:	e9 e5       	ldi	r30, 0x59	; 89
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	80 81       	ld	r24, Z
    3160:	8b 7f       	andi	r24, 0xFB	; 251
    3162:	8c 93       	st	X, r24
        TIMSK &= ~(1 << OCIE1A);
    3164:	a9 e5       	ldi	r26, 0x59	; 89
    3166:	b0 e0       	ldi	r27, 0x00	; 0
    3168:	e9 e5       	ldi	r30, 0x59	; 89
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	80 81       	ld	r24, Z
    316e:	8f 7e       	andi	r24, 0xEF	; 239
    3170:	8c 93       	st	X, r24
    3172:	1a c0       	rjmp	.+52     	; 0x31a8 <Timer_deinit+0xb6>
    }
    else if (timer_type == TIMER_timer2)
    3174:	89 81       	ldd	r24, Y+1	; 0x01
    3176:	82 30       	cpi	r24, 0x02	; 2
    3178:	b9 f4       	brne	.+46     	; 0x31a8 <Timer_deinit+0xb6>
    {
        TCCR2 = 0x00;
    317a:	e5 e4       	ldi	r30, 0x45	; 69
    317c:	f0 e0       	ldi	r31, 0x00	; 0
    317e:	10 82       	st	Z, r1
        TCNT2 = 0x00;
    3180:	e4 e4       	ldi	r30, 0x44	; 68
    3182:	f0 e0       	ldi	r31, 0x00	; 0
    3184:	10 82       	st	Z, r1
        OCR2 = 0x00;
    3186:	e3 e4       	ldi	r30, 0x43	; 67
    3188:	f0 e0       	ldi	r31, 0x00	; 0
    318a:	10 82       	st	Z, r1
        TIMSK &= ~(1 << TOIE2);
    318c:	a9 e5       	ldi	r26, 0x59	; 89
    318e:	b0 e0       	ldi	r27, 0x00	; 0
    3190:	e9 e5       	ldi	r30, 0x59	; 89
    3192:	f0 e0       	ldi	r31, 0x00	; 0
    3194:	80 81       	ld	r24, Z
    3196:	8f 7b       	andi	r24, 0xBF	; 191
    3198:	8c 93       	st	X, r24
        TIMSK &= ~(1 << OCIE2);
    319a:	a9 e5       	ldi	r26, 0x59	; 89
    319c:	b0 e0       	ldi	r27, 0x00	; 0
    319e:	e9 e5       	ldi	r30, 0x59	; 89
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	80 81       	ld	r24, Z
    31a4:	8f 77       	andi	r24, 0x7F	; 127
    31a6:	8c 93       	st	X, r24
    }
}
    31a8:	0f 90       	pop	r0
    31aa:	cf 91       	pop	r28
    31ac:	df 91       	pop	r29
    31ae:	08 95       	ret

000031b0 <Timer_setCallBack>:
/*
 * Description:
 * Function to set the callback function for a specific timer
 * */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID)
{
    31b0:	df 93       	push	r29
    31b2:	cf 93       	push	r28
    31b4:	00 d0       	rcall	.+0      	; 0x31b6 <Timer_setCallBack+0x6>
    31b6:	0f 92       	push	r0
    31b8:	cd b7       	in	r28, 0x3d	; 61
    31ba:	de b7       	in	r29, 0x3e	; 62
    31bc:	9a 83       	std	Y+2, r25	; 0x02
    31be:	89 83       	std	Y+1, r24	; 0x01
    31c0:	6b 83       	std	Y+3, r22	; 0x03
    g_callBackPtr[a_timer_ID] = a_ptr;
    31c2:	8b 81       	ldd	r24, Y+3	; 0x03
    31c4:	88 2f       	mov	r24, r24
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	29 81       	ldd	r18, Y+1	; 0x01
    31ca:	3a 81       	ldd	r19, Y+2	; 0x02
    31cc:	88 0f       	add	r24, r24
    31ce:	99 1f       	adc	r25, r25
    31d0:	fc 01       	movw	r30, r24
    31d2:	ec 56       	subi	r30, 0x6C	; 108
    31d4:	ff 4f       	sbci	r31, 0xFF	; 255
    31d6:	31 83       	std	Z+1, r19	; 0x01
    31d8:	20 83       	st	Z, r18
}
    31da:	0f 90       	pop	r0
    31dc:	0f 90       	pop	r0
    31de:	0f 90       	pop	r0
    31e0:	cf 91       	pop	r28
    31e2:	df 91       	pop	r29
    31e4:	08 95       	ret

000031e6 <TWI_init>:
/*------------------------------------------------------------------------------
 *  							Function Definitions
 *----------------------------------------------------------------------------*/

void TWI_init(const TWI_ConfigType *Config_Ptr)
{
    31e6:	df 93       	push	r29
    31e8:	cf 93       	push	r28
    31ea:	00 d0       	rcall	.+0      	; 0x31ec <TWI_init+0x6>
    31ec:	cd b7       	in	r28, 0x3d	; 61
    31ee:	de b7       	in	r29, 0x3e	; 62
    31f0:	9a 83       	std	Y+2, r25	; 0x02
    31f2:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = Config_Ptr->bit_rate;
    31f4:	a0 e2       	ldi	r26, 0x20	; 32
    31f6:	b0 e0       	ldi	r27, 0x00	; 0
    31f8:	e9 81       	ldd	r30, Y+1	; 0x01
    31fa:	fa 81       	ldd	r31, Y+2	; 0x02
    31fc:	81 81       	ldd	r24, Z+1	; 0x01
    31fe:	8c 93       	st	X, r24
	TWSR = 0x00;
    3200:	e1 e2       	ldi	r30, 0x21	; 33
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	10 82       	st	Z, r1
	
    /*
     * Two Wire Bus address Address
     */
    TWAR |= Config_Ptr->address << TWA0;
    3206:	a2 e2       	ldi	r26, 0x22	; 34
    3208:	b0 e0       	ldi	r27, 0x00	; 0
    320a:	e2 e2       	ldi	r30, 0x22	; 34
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	80 81       	ld	r24, Z
    3210:	28 2f       	mov	r18, r24
    3212:	e9 81       	ldd	r30, Y+1	; 0x01
    3214:	fa 81       	ldd	r31, Y+2	; 0x02
    3216:	80 81       	ld	r24, Z
    3218:	88 2f       	mov	r24, r24
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	88 0f       	add	r24, r24
    321e:	99 1f       	adc	r25, r25
    3220:	82 2b       	or	r24, r18
    3222:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    3224:	e6 e5       	ldi	r30, 0x56	; 86
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	84 e0       	ldi	r24, 0x04	; 4
    322a:	80 83       	st	Z, r24
}
    322c:	0f 90       	pop	r0
    322e:	0f 90       	pop	r0
    3230:	cf 91       	pop	r28
    3232:	df 91       	pop	r29
    3234:	08 95       	ret

00003236 <TWI_start>:

void TWI_start(void)
{
    3236:	df 93       	push	r29
    3238:	cf 93       	push	r28
    323a:	cd b7       	in	r28, 0x3d	; 61
    323c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    323e:	e6 e5       	ldi	r30, 0x56	; 86
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	84 ea       	ldi	r24, 0xA4	; 164
    3244:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3246:	e6 e5       	ldi	r30, 0x56	; 86
    3248:	f0 e0       	ldi	r31, 0x00	; 0
    324a:	80 81       	ld	r24, Z
    324c:	88 23       	and	r24, r24
    324e:	dc f7       	brge	.-10     	; 0x3246 <TWI_start+0x10>
}
    3250:	cf 91       	pop	r28
    3252:	df 91       	pop	r29
    3254:	08 95       	ret

00003256 <TWI_stop>:

void TWI_stop(void)
{
    3256:	df 93       	push	r29
    3258:	cf 93       	push	r28
    325a:	cd b7       	in	r28, 0x3d	; 61
    325c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    325e:	e6 e5       	ldi	r30, 0x56	; 86
    3260:	f0 e0       	ldi	r31, 0x00	; 0
    3262:	84 e9       	ldi	r24, 0x94	; 148
    3264:	80 83       	st	Z, r24
}
    3266:	cf 91       	pop	r28
    3268:	df 91       	pop	r29
    326a:	08 95       	ret

0000326c <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    326c:	df 93       	push	r29
    326e:	cf 93       	push	r28
    3270:	0f 92       	push	r0
    3272:	cd b7       	in	r28, 0x3d	; 61
    3274:	de b7       	in	r29, 0x3e	; 62
    3276:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    3278:	e3 e2       	ldi	r30, 0x23	; 35
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	89 81       	ldd	r24, Y+1	; 0x01
    327e:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    3280:	e6 e5       	ldi	r30, 0x56	; 86
    3282:	f0 e0       	ldi	r31, 0x00	; 0
    3284:	84 e8       	ldi	r24, 0x84	; 132
    3286:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3288:	e6 e5       	ldi	r30, 0x56	; 86
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	80 81       	ld	r24, Z
    328e:	88 23       	and	r24, r24
    3290:	dc f7       	brge	.-10     	; 0x3288 <TWI_writeByte+0x1c>
}
    3292:	0f 90       	pop	r0
    3294:	cf 91       	pop	r28
    3296:	df 91       	pop	r29
    3298:	08 95       	ret

0000329a <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    329a:	df 93       	push	r29
    329c:	cf 93       	push	r28
    329e:	cd b7       	in	r28, 0x3d	; 61
    32a0:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    32a2:	e6 e5       	ldi	r30, 0x56	; 86
    32a4:	f0 e0       	ldi	r31, 0x00	; 0
    32a6:	84 ec       	ldi	r24, 0xC4	; 196
    32a8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    32aa:	e6 e5       	ldi	r30, 0x56	; 86
    32ac:	f0 e0       	ldi	r31, 0x00	; 0
    32ae:	80 81       	ld	r24, Z
    32b0:	88 23       	and	r24, r24
    32b2:	dc f7       	brge	.-10     	; 0x32aa <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    32b4:	e3 e2       	ldi	r30, 0x23	; 35
    32b6:	f0 e0       	ldi	r31, 0x00	; 0
    32b8:	80 81       	ld	r24, Z
}
    32ba:	cf 91       	pop	r28
    32bc:	df 91       	pop	r29
    32be:	08 95       	ret

000032c0 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    32c0:	df 93       	push	r29
    32c2:	cf 93       	push	r28
    32c4:	cd b7       	in	r28, 0x3d	; 61
    32c6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    32c8:	e6 e5       	ldi	r30, 0x56	; 86
    32ca:	f0 e0       	ldi	r31, 0x00	; 0
    32cc:	84 e8       	ldi	r24, 0x84	; 132
    32ce:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    32d0:	e6 e5       	ldi	r30, 0x56	; 86
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	80 81       	ld	r24, Z
    32d6:	88 23       	and	r24, r24
    32d8:	dc f7       	brge	.-10     	; 0x32d0 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    32da:	e3 e2       	ldi	r30, 0x23	; 35
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	80 81       	ld	r24, Z
}
    32e0:	cf 91       	pop	r28
    32e2:	df 91       	pop	r29
    32e4:	08 95       	ret

000032e6 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    32e6:	df 93       	push	r29
    32e8:	cf 93       	push	r28
    32ea:	0f 92       	push	r0
    32ec:	cd b7       	in	r28, 0x3d	; 61
    32ee:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    32f0:	e1 e2       	ldi	r30, 0x21	; 33
    32f2:	f0 e0       	ldi	r31, 0x00	; 0
    32f4:	80 81       	ld	r24, Z
    32f6:	88 7f       	andi	r24, 0xF8	; 248
    32f8:	89 83       	std	Y+1, r24	; 0x01
    return status;
    32fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    32fc:	0f 90       	pop	r0
    32fe:	cf 91       	pop	r28
    3300:	df 91       	pop	r29
    3302:	08 95       	ret

00003304 <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(const UART_ConfigType * Config_Ptr)
{
    3304:	df 93       	push	r29
    3306:	cf 93       	push	r28
    3308:	cd b7       	in	r28, 0x3d	; 61
    330a:	de b7       	in	r29, 0x3e	; 62
    330c:	28 97       	sbiw	r28, 0x08	; 8
    330e:	0f b6       	in	r0, 0x3f	; 63
    3310:	f8 94       	cli
    3312:	de bf       	out	0x3e, r29	; 62
    3314:	0f be       	out	0x3f, r0	; 63
    3316:	cd bf       	out	0x3d, r28	; 61
    3318:	9c 83       	std	Y+4, r25	; 0x04
    331a:	8b 83       	std	Y+3, r24	; 0x03
    uint16 ubrr_value = 0;
    331c:	1a 82       	std	Y+2, r1	; 0x02
    331e:	19 82       	std	Y+1, r1	; 0x01

    /* U2X = 1 for double transmission speed */
    UCSRA = (1<<U2X);
    3320:	eb e2       	ldi	r30, 0x2B	; 43
    3322:	f0 e0       	ldi	r31, 0x00	; 0
    3324:	82 e0       	ldi	r24, 0x02	; 2
    3326:	80 83       	st	Z, r24

    /* Enable Receiver and Transmitter */
    UCSRB = (1<<RXEN) | (1<<TXEN);
    3328:	ea e2       	ldi	r30, 0x2A	; 42
    332a:	f0 e0       	ldi	r31, 0x00	; 0
    332c:	88 e1       	ldi	r24, 0x18	; 24
    332e:	80 83       	st	Z, r24

    /* UCSRC settings - URSEL must be 1 to write to UCSRC */
    UCSRC = (1<<URSEL);
    3330:	e0 e4       	ldi	r30, 0x40	; 64
    3332:	f0 e0       	ldi	r31, 0x00	; 0
    3334:	80 e8       	ldi	r24, 0x80	; 128
    3336:	80 83       	st	Z, r24

    /* Set the number of data bits */
    switch(Config_Ptr->bit_data)
    3338:	eb 81       	ldd	r30, Y+3	; 0x03
    333a:	fc 81       	ldd	r31, Y+4	; 0x04
    333c:	80 81       	ld	r24, Z
    333e:	28 2f       	mov	r18, r24
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	38 87       	std	Y+8, r19	; 0x08
    3344:	2f 83       	std	Y+7, r18	; 0x07
    3346:	8f 81       	ldd	r24, Y+7	; 0x07
    3348:	98 85       	ldd	r25, Y+8	; 0x08
    334a:	82 30       	cpi	r24, 0x02	; 2
    334c:	91 05       	cpc	r25, r1
    334e:	19 f1       	breq	.+70     	; 0x3396 <UART_init+0x92>
    3350:	2f 81       	ldd	r18, Y+7	; 0x07
    3352:	38 85       	ldd	r19, Y+8	; 0x08
    3354:	23 30       	cpi	r18, 0x03	; 3
    3356:	31 05       	cpc	r19, r1
    3358:	5c f4       	brge	.+22     	; 0x3370 <UART_init+0x6c>
    335a:	8f 81       	ldd	r24, Y+7	; 0x07
    335c:	98 85       	ldd	r25, Y+8	; 0x08
    335e:	00 97       	sbiw	r24, 0x00	; 0
    3360:	09 f4       	brne	.+2      	; 0x3364 <UART_init+0x60>
    3362:	45 c0       	rjmp	.+138    	; 0x33ee <UART_init+0xea>
    3364:	2f 81       	ldd	r18, Y+7	; 0x07
    3366:	38 85       	ldd	r19, Y+8	; 0x08
    3368:	21 30       	cpi	r18, 0x01	; 1
    336a:	31 05       	cpc	r19, r1
    336c:	61 f0       	breq	.+24     	; 0x3386 <UART_init+0x82>
    336e:	3f c0       	rjmp	.+126    	; 0x33ee <UART_init+0xea>
    3370:	8f 81       	ldd	r24, Y+7	; 0x07
    3372:	98 85       	ldd	r25, Y+8	; 0x08
    3374:	83 30       	cpi	r24, 0x03	; 3
    3376:	91 05       	cpc	r25, r1
    3378:	b1 f0       	breq	.+44     	; 0x33a6 <UART_init+0xa2>
    337a:	2f 81       	ldd	r18, Y+7	; 0x07
    337c:	38 85       	ldd	r19, Y+8	; 0x08
    337e:	24 30       	cpi	r18, 0x04	; 4
    3380:	31 05       	cpc	r19, r1
    3382:	01 f1       	breq	.+64     	; 0x33c4 <UART_init+0xc0>
    3384:	34 c0       	rjmp	.+104    	; 0x33ee <UART_init+0xea>
    {
        case UART_5_BITS:
            break;
        case UART_6_BITS:
        	UCSRC |= 1 << UCSZ0;
    3386:	a0 e4       	ldi	r26, 0x40	; 64
    3388:	b0 e0       	ldi	r27, 0x00	; 0
    338a:	e0 e4       	ldi	r30, 0x40	; 64
    338c:	f0 e0       	ldi	r31, 0x00	; 0
    338e:	80 81       	ld	r24, Z
    3390:	82 60       	ori	r24, 0x02	; 2
    3392:	8c 93       	st	X, r24
    3394:	2c c0       	rjmp	.+88     	; 0x33ee <UART_init+0xea>
            break;
        case UART_7_BITS:
        	UCSRC |= 1 << UCSZ1;
    3396:	a0 e4       	ldi	r26, 0x40	; 64
    3398:	b0 e0       	ldi	r27, 0x00	; 0
    339a:	e0 e4       	ldi	r30, 0x40	; 64
    339c:	f0 e0       	ldi	r31, 0x00	; 0
    339e:	80 81       	ld	r24, Z
    33a0:	84 60       	ori	r24, 0x04	; 4
    33a2:	8c 93       	st	X, r24
    33a4:	24 c0       	rjmp	.+72     	; 0x33ee <UART_init+0xea>
            break;
        case UART_8_BITS:
        	UCSRC |= 1 << UCSZ1;
    33a6:	a0 e4       	ldi	r26, 0x40	; 64
    33a8:	b0 e0       	ldi	r27, 0x00	; 0
    33aa:	e0 e4       	ldi	r30, 0x40	; 64
    33ac:	f0 e0       	ldi	r31, 0x00	; 0
    33ae:	80 81       	ld	r24, Z
    33b0:	84 60       	ori	r24, 0x04	; 4
    33b2:	8c 93       	st	X, r24
        	UCSRC |= 1 << UCSZ0;
    33b4:	a0 e4       	ldi	r26, 0x40	; 64
    33b6:	b0 e0       	ldi	r27, 0x00	; 0
    33b8:	e0 e4       	ldi	r30, 0x40	; 64
    33ba:	f0 e0       	ldi	r31, 0x00	; 0
    33bc:	80 81       	ld	r24, Z
    33be:	82 60       	ori	r24, 0x02	; 2
    33c0:	8c 93       	st	X, r24
    33c2:	15 c0       	rjmp	.+42     	; 0x33ee <UART_init+0xea>
            break;
        case UART_9_BITS:
        	UCSRC |= 1 << UCSZ1;
    33c4:	a0 e4       	ldi	r26, 0x40	; 64
    33c6:	b0 e0       	ldi	r27, 0x00	; 0
    33c8:	e0 e4       	ldi	r30, 0x40	; 64
    33ca:	f0 e0       	ldi	r31, 0x00	; 0
    33cc:	80 81       	ld	r24, Z
    33ce:	84 60       	ori	r24, 0x04	; 4
    33d0:	8c 93       	st	X, r24
        	UCSRC |= 1 << UCSZ0;
    33d2:	a0 e4       	ldi	r26, 0x40	; 64
    33d4:	b0 e0       	ldi	r27, 0x00	; 0
    33d6:	e0 e4       	ldi	r30, 0x40	; 64
    33d8:	f0 e0       	ldi	r31, 0x00	; 0
    33da:	80 81       	ld	r24, Z
    33dc:	82 60       	ori	r24, 0x02	; 2
    33de:	8c 93       	st	X, r24
        	UCSRC |= 1 << UCSZ2;
    33e0:	a0 e4       	ldi	r26, 0x40	; 64
    33e2:	b0 e0       	ldi	r27, 0x00	; 0
    33e4:	e0 e4       	ldi	r30, 0x40	; 64
    33e6:	f0 e0       	ldi	r31, 0x00	; 0
    33e8:	80 81       	ld	r24, Z
    33ea:	84 60       	ori	r24, 0x04	; 4
    33ec:	8c 93       	st	X, r24
            break;
    }

    /* Set parity mode */
    switch(Config_Ptr->parity)
    33ee:	eb 81       	ldd	r30, Y+3	; 0x03
    33f0:	fc 81       	ldd	r31, Y+4	; 0x04
    33f2:	81 81       	ldd	r24, Z+1	; 0x01
    33f4:	28 2f       	mov	r18, r24
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	3e 83       	std	Y+6, r19	; 0x06
    33fa:	2d 83       	std	Y+5, r18	; 0x05
    33fc:	8d 81       	ldd	r24, Y+5	; 0x05
    33fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3400:	81 30       	cpi	r24, 0x01	; 1
    3402:	91 05       	cpc	r25, r1
    3404:	31 f0       	breq	.+12     	; 0x3412 <UART_init+0x10e>
    3406:	2d 81       	ldd	r18, Y+5	; 0x05
    3408:	3e 81       	ldd	r19, Y+6	; 0x06
    340a:	22 30       	cpi	r18, 0x02	; 2
    340c:	31 05       	cpc	r19, r1
    340e:	49 f0       	breq	.+18     	; 0x3422 <UART_init+0x11e>
    3410:	16 c0       	rjmp	.+44     	; 0x343e <UART_init+0x13a>
    {
        case UART_NO_PARITY:
            break;
        case UART_EVEN_PARITY:
        	UCSRC |= 1 << UPM1;
    3412:	a0 e4       	ldi	r26, 0x40	; 64
    3414:	b0 e0       	ldi	r27, 0x00	; 0
    3416:	e0 e4       	ldi	r30, 0x40	; 64
    3418:	f0 e0       	ldi	r31, 0x00	; 0
    341a:	80 81       	ld	r24, Z
    341c:	80 62       	ori	r24, 0x20	; 32
    341e:	8c 93       	st	X, r24
    3420:	0e c0       	rjmp	.+28     	; 0x343e <UART_init+0x13a>
            break;
        case UART_ODD_PARITY:
        	UCSRC |= 1 << UPM0;
    3422:	a0 e4       	ldi	r26, 0x40	; 64
    3424:	b0 e0       	ldi	r27, 0x00	; 0
    3426:	e0 e4       	ldi	r30, 0x40	; 64
    3428:	f0 e0       	ldi	r31, 0x00	; 0
    342a:	80 81       	ld	r24, Z
    342c:	80 61       	ori	r24, 0x10	; 16
    342e:	8c 93       	st	X, r24
        	UCSRC |= 1 << UPM1;
    3430:	a0 e4       	ldi	r26, 0x40	; 64
    3432:	b0 e0       	ldi	r27, 0x00	; 0
    3434:	e0 e4       	ldi	r30, 0x40	; 64
    3436:	f0 e0       	ldi	r31, 0x00	; 0
    3438:	80 81       	ld	r24, Z
    343a:	80 62       	ori	r24, 0x20	; 32
    343c:	8c 93       	st	X, r24
            break;
    }

    /* Set stop bit(s) */
    if(Config_Ptr->stop_bit == UART_TWO_STOP_BITS)
    343e:	eb 81       	ldd	r30, Y+3	; 0x03
    3440:	fc 81       	ldd	r31, Y+4	; 0x04
    3442:	82 81       	ldd	r24, Z+2	; 0x02
    3444:	81 30       	cpi	r24, 0x01	; 1
    3446:	39 f4       	brne	.+14     	; 0x3456 <UART_init+0x152>
    {
       	UCSRC |= 1 << USBS;
    3448:	a0 e4       	ldi	r26, 0x40	; 64
    344a:	b0 e0       	ldi	r27, 0x00	; 0
    344c:	e0 e4       	ldi	r30, 0x40	; 64
    344e:	f0 e0       	ldi	r31, 0x00	; 0
    3450:	80 81       	ld	r24, Z
    3452:	88 60       	ori	r24, 0x08	; 8
    3454:	8c 93       	st	X, r24
    }

    /* Calculate the UBRR value for the given baud rate */
    ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    3456:	eb 81       	ldd	r30, Y+3	; 0x03
    3458:	fc 81       	ldd	r31, Y+4	; 0x04
    345a:	83 81       	ldd	r24, Z+3	; 0x03
    345c:	94 81       	ldd	r25, Z+4	; 0x04
    345e:	a5 81       	ldd	r26, Z+5	; 0x05
    3460:	b6 81       	ldd	r27, Z+6	; 0x06
    3462:	88 0f       	add	r24, r24
    3464:	99 1f       	adc	r25, r25
    3466:	aa 1f       	adc	r26, r26
    3468:	bb 1f       	adc	r27, r27
    346a:	88 0f       	add	r24, r24
    346c:	99 1f       	adc	r25, r25
    346e:	aa 1f       	adc	r26, r26
    3470:	bb 1f       	adc	r27, r27
    3472:	88 0f       	add	r24, r24
    3474:	99 1f       	adc	r25, r25
    3476:	aa 1f       	adc	r26, r26
    3478:	bb 1f       	adc	r27, r27
    347a:	9c 01       	movw	r18, r24
    347c:	ad 01       	movw	r20, r26
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	92 e1       	ldi	r25, 0x12	; 18
    3482:	aa e7       	ldi	r26, 0x7A	; 122
    3484:	b0 e0       	ldi	r27, 0x00	; 0
    3486:	bc 01       	movw	r22, r24
    3488:	cd 01       	movw	r24, r26
    348a:	0e 94 11 1b 	call	0x3622	; 0x3622 <__udivmodsi4>
    348e:	da 01       	movw	r26, r20
    3490:	c9 01       	movw	r24, r18
    3492:	01 97       	sbiw	r24, 0x01	; 1
    3494:	9a 83       	std	Y+2, r25	; 0x02
    3496:	89 83       	std	Y+1, r24	; 0x01

    /* Set the baud rate */
    UBRRH = ubrr_value >> 8;
    3498:	e0 e4       	ldi	r30, 0x40	; 64
    349a:	f0 e0       	ldi	r31, 0x00	; 0
    349c:	89 81       	ldd	r24, Y+1	; 0x01
    349e:	9a 81       	ldd	r25, Y+2	; 0x02
    34a0:	89 2f       	mov	r24, r25
    34a2:	99 27       	eor	r25, r25
    34a4:	80 83       	st	Z, r24
    UBRRL = ubrr_value;
    34a6:	e9 e2       	ldi	r30, 0x29	; 41
    34a8:	f0 e0       	ldi	r31, 0x00	; 0
    34aa:	89 81       	ldd	r24, Y+1	; 0x01
    34ac:	80 83       	st	Z, r24
}
    34ae:	28 96       	adiw	r28, 0x08	; 8
    34b0:	0f b6       	in	r0, 0x3f	; 63
    34b2:	f8 94       	cli
    34b4:	de bf       	out	0x3e, r29	; 62
    34b6:	0f be       	out	0x3f, r0	; 63
    34b8:	cd bf       	out	0x3d, r28	; 61
    34ba:	cf 91       	pop	r28
    34bc:	df 91       	pop	r29
    34be:	08 95       	ret

000034c0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    34c0:	df 93       	push	r29
    34c2:	cf 93       	push	r28
    34c4:	0f 92       	push	r0
    34c6:	cd b7       	in	r28, 0x3d	; 61
    34c8:	de b7       	in	r29, 0x3e	; 62
    34ca:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    34cc:	eb e2       	ldi	r30, 0x2B	; 43
    34ce:	f0 e0       	ldi	r31, 0x00	; 0
    34d0:	80 81       	ld	r24, Z
    34d2:	88 2f       	mov	r24, r24
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	80 72       	andi	r24, 0x20	; 32
    34d8:	90 70       	andi	r25, 0x00	; 0
    34da:	00 97       	sbiw	r24, 0x00	; 0
    34dc:	b9 f3       	breq	.-18     	; 0x34cc <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    34de:	ec e2       	ldi	r30, 0x2C	; 44
    34e0:	f0 e0       	ldi	r31, 0x00	; 0
    34e2:	89 81       	ldd	r24, Y+1	; 0x01
    34e4:	80 83       	st	Z, r24
}
    34e6:	0f 90       	pop	r0
    34e8:	cf 91       	pop	r28
    34ea:	df 91       	pop	r29
    34ec:	08 95       	ret

000034ee <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    34ee:	df 93       	push	r29
    34f0:	cf 93       	push	r28
    34f2:	cd b7       	in	r28, 0x3d	; 61
    34f4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    34f6:	eb e2       	ldi	r30, 0x2B	; 43
    34f8:	f0 e0       	ldi	r31, 0x00	; 0
    34fa:	80 81       	ld	r24, Z
    34fc:	88 23       	and	r24, r24
    34fe:	dc f7       	brge	.-10     	; 0x34f6 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3500:	ec e2       	ldi	r30, 0x2C	; 44
    3502:	f0 e0       	ldi	r31, 0x00	; 0
    3504:	80 81       	ld	r24, Z
}
    3506:	cf 91       	pop	r28
    3508:	df 91       	pop	r29
    350a:	08 95       	ret

0000350c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    350c:	df 93       	push	r29
    350e:	cf 93       	push	r28
    3510:	00 d0       	rcall	.+0      	; 0x3512 <UART_sendString+0x6>
    3512:	0f 92       	push	r0
    3514:	cd b7       	in	r28, 0x3d	; 61
    3516:	de b7       	in	r29, 0x3e	; 62
    3518:	9b 83       	std	Y+3, r25	; 0x03
    351a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    351c:	19 82       	std	Y+1, r1	; 0x01
    351e:	0e c0       	rjmp	.+28     	; 0x353c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3520:	89 81       	ldd	r24, Y+1	; 0x01
    3522:	28 2f       	mov	r18, r24
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	8a 81       	ldd	r24, Y+2	; 0x02
    3528:	9b 81       	ldd	r25, Y+3	; 0x03
    352a:	fc 01       	movw	r30, r24
    352c:	e2 0f       	add	r30, r18
    352e:	f3 1f       	adc	r31, r19
    3530:	80 81       	ld	r24, Z
    3532:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <UART_sendByte>
		i++;
    3536:	89 81       	ldd	r24, Y+1	; 0x01
    3538:	8f 5f       	subi	r24, 0xFF	; 255
    353a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    353c:	89 81       	ldd	r24, Y+1	; 0x01
    353e:	28 2f       	mov	r18, r24
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	8a 81       	ldd	r24, Y+2	; 0x02
    3544:	9b 81       	ldd	r25, Y+3	; 0x03
    3546:	fc 01       	movw	r30, r24
    3548:	e2 0f       	add	r30, r18
    354a:	f3 1f       	adc	r31, r19
    354c:	80 81       	ld	r24, Z
    354e:	88 23       	and	r24, r24
    3550:	39 f7       	brne	.-50     	; 0x3520 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    3552:	0f 90       	pop	r0
    3554:	0f 90       	pop	r0
    3556:	0f 90       	pop	r0
    3558:	cf 91       	pop	r28
    355a:	df 91       	pop	r29
    355c:	08 95       	ret

0000355e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    355e:	0f 93       	push	r16
    3560:	1f 93       	push	r17
    3562:	df 93       	push	r29
    3564:	cf 93       	push	r28
    3566:	00 d0       	rcall	.+0      	; 0x3568 <UART_receiveString+0xa>
    3568:	0f 92       	push	r0
    356a:	cd b7       	in	r28, 0x3d	; 61
    356c:	de b7       	in	r29, 0x3e	; 62
    356e:	9b 83       	std	Y+3, r25	; 0x03
    3570:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3572:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3574:	89 81       	ldd	r24, Y+1	; 0x01
    3576:	28 2f       	mov	r18, r24
    3578:	30 e0       	ldi	r19, 0x00	; 0
    357a:	8a 81       	ldd	r24, Y+2	; 0x02
    357c:	9b 81       	ldd	r25, Y+3	; 0x03
    357e:	8c 01       	movw	r16, r24
    3580:	02 0f       	add	r16, r18
    3582:	13 1f       	adc	r17, r19
    3584:	0e 94 77 1a 	call	0x34ee	; 0x34ee <UART_recieveByte>
    3588:	f8 01       	movw	r30, r16
    358a:	80 83       	st	Z, r24
    358c:	0f c0       	rjmp	.+30     	; 0x35ac <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    358e:	89 81       	ldd	r24, Y+1	; 0x01
    3590:	8f 5f       	subi	r24, 0xFF	; 255
    3592:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3594:	89 81       	ldd	r24, Y+1	; 0x01
    3596:	28 2f       	mov	r18, r24
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	8a 81       	ldd	r24, Y+2	; 0x02
    359c:	9b 81       	ldd	r25, Y+3	; 0x03
    359e:	8c 01       	movw	r16, r24
    35a0:	02 0f       	add	r16, r18
    35a2:	13 1f       	adc	r17, r19
    35a4:	0e 94 77 1a 	call	0x34ee	; 0x34ee <UART_recieveByte>
    35a8:	f8 01       	movw	r30, r16
    35aa:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    35ac:	89 81       	ldd	r24, Y+1	; 0x01
    35ae:	28 2f       	mov	r18, r24
    35b0:	30 e0       	ldi	r19, 0x00	; 0
    35b2:	8a 81       	ldd	r24, Y+2	; 0x02
    35b4:	9b 81       	ldd	r25, Y+3	; 0x03
    35b6:	fc 01       	movw	r30, r24
    35b8:	e2 0f       	add	r30, r18
    35ba:	f3 1f       	adc	r31, r19
    35bc:	80 81       	ld	r24, Z
    35be:	83 32       	cpi	r24, 0x23	; 35
    35c0:	31 f7       	brne	.-52     	; 0x358e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    35c2:	89 81       	ldd	r24, Y+1	; 0x01
    35c4:	28 2f       	mov	r18, r24
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ca:	9b 81       	ldd	r25, Y+3	; 0x03
    35cc:	fc 01       	movw	r30, r24
    35ce:	e2 0f       	add	r30, r18
    35d0:	f3 1f       	adc	r31, r19
    35d2:	10 82       	st	Z, r1
}
    35d4:	0f 90       	pop	r0
    35d6:	0f 90       	pop	r0
    35d8:	0f 90       	pop	r0
    35da:	cf 91       	pop	r28
    35dc:	df 91       	pop	r29
    35de:	1f 91       	pop	r17
    35e0:	0f 91       	pop	r16
    35e2:	08 95       	ret

000035e4 <__mulsi3>:
    35e4:	62 9f       	mul	r22, r18
    35e6:	d0 01       	movw	r26, r0
    35e8:	73 9f       	mul	r23, r19
    35ea:	f0 01       	movw	r30, r0
    35ec:	82 9f       	mul	r24, r18
    35ee:	e0 0d       	add	r30, r0
    35f0:	f1 1d       	adc	r31, r1
    35f2:	64 9f       	mul	r22, r20
    35f4:	e0 0d       	add	r30, r0
    35f6:	f1 1d       	adc	r31, r1
    35f8:	92 9f       	mul	r25, r18
    35fa:	f0 0d       	add	r31, r0
    35fc:	83 9f       	mul	r24, r19
    35fe:	f0 0d       	add	r31, r0
    3600:	74 9f       	mul	r23, r20
    3602:	f0 0d       	add	r31, r0
    3604:	65 9f       	mul	r22, r21
    3606:	f0 0d       	add	r31, r0
    3608:	99 27       	eor	r25, r25
    360a:	72 9f       	mul	r23, r18
    360c:	b0 0d       	add	r27, r0
    360e:	e1 1d       	adc	r30, r1
    3610:	f9 1f       	adc	r31, r25
    3612:	63 9f       	mul	r22, r19
    3614:	b0 0d       	add	r27, r0
    3616:	e1 1d       	adc	r30, r1
    3618:	f9 1f       	adc	r31, r25
    361a:	bd 01       	movw	r22, r26
    361c:	cf 01       	movw	r24, r30
    361e:	11 24       	eor	r1, r1
    3620:	08 95       	ret

00003622 <__udivmodsi4>:
    3622:	a1 e2       	ldi	r26, 0x21	; 33
    3624:	1a 2e       	mov	r1, r26
    3626:	aa 1b       	sub	r26, r26
    3628:	bb 1b       	sub	r27, r27
    362a:	fd 01       	movw	r30, r26
    362c:	0d c0       	rjmp	.+26     	; 0x3648 <__udivmodsi4_ep>

0000362e <__udivmodsi4_loop>:
    362e:	aa 1f       	adc	r26, r26
    3630:	bb 1f       	adc	r27, r27
    3632:	ee 1f       	adc	r30, r30
    3634:	ff 1f       	adc	r31, r31
    3636:	a2 17       	cp	r26, r18
    3638:	b3 07       	cpc	r27, r19
    363a:	e4 07       	cpc	r30, r20
    363c:	f5 07       	cpc	r31, r21
    363e:	20 f0       	brcs	.+8      	; 0x3648 <__udivmodsi4_ep>
    3640:	a2 1b       	sub	r26, r18
    3642:	b3 0b       	sbc	r27, r19
    3644:	e4 0b       	sbc	r30, r20
    3646:	f5 0b       	sbc	r31, r21

00003648 <__udivmodsi4_ep>:
    3648:	66 1f       	adc	r22, r22
    364a:	77 1f       	adc	r23, r23
    364c:	88 1f       	adc	r24, r24
    364e:	99 1f       	adc	r25, r25
    3650:	1a 94       	dec	r1
    3652:	69 f7       	brne	.-38     	; 0x362e <__udivmodsi4_loop>
    3654:	60 95       	com	r22
    3656:	70 95       	com	r23
    3658:	80 95       	com	r24
    365a:	90 95       	com	r25
    365c:	9b 01       	movw	r18, r22
    365e:	ac 01       	movw	r20, r24
    3660:	bd 01       	movw	r22, r26
    3662:	cf 01       	movw	r24, r30
    3664:	08 95       	ret

00003666 <__prologue_saves__>:
    3666:	2f 92       	push	r2
    3668:	3f 92       	push	r3
    366a:	4f 92       	push	r4
    366c:	5f 92       	push	r5
    366e:	6f 92       	push	r6
    3670:	7f 92       	push	r7
    3672:	8f 92       	push	r8
    3674:	9f 92       	push	r9
    3676:	af 92       	push	r10
    3678:	bf 92       	push	r11
    367a:	cf 92       	push	r12
    367c:	df 92       	push	r13
    367e:	ef 92       	push	r14
    3680:	ff 92       	push	r15
    3682:	0f 93       	push	r16
    3684:	1f 93       	push	r17
    3686:	cf 93       	push	r28
    3688:	df 93       	push	r29
    368a:	cd b7       	in	r28, 0x3d	; 61
    368c:	de b7       	in	r29, 0x3e	; 62
    368e:	ca 1b       	sub	r28, r26
    3690:	db 0b       	sbc	r29, r27
    3692:	0f b6       	in	r0, 0x3f	; 63
    3694:	f8 94       	cli
    3696:	de bf       	out	0x3e, r29	; 62
    3698:	0f be       	out	0x3f, r0	; 63
    369a:	cd bf       	out	0x3d, r28	; 61
    369c:	09 94       	ijmp

0000369e <__epilogue_restores__>:
    369e:	2a 88       	ldd	r2, Y+18	; 0x12
    36a0:	39 88       	ldd	r3, Y+17	; 0x11
    36a2:	48 88       	ldd	r4, Y+16	; 0x10
    36a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    36a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    36a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    36aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    36ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    36ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    36b0:	b9 84       	ldd	r11, Y+9	; 0x09
    36b2:	c8 84       	ldd	r12, Y+8	; 0x08
    36b4:	df 80       	ldd	r13, Y+7	; 0x07
    36b6:	ee 80       	ldd	r14, Y+6	; 0x06
    36b8:	fd 80       	ldd	r15, Y+5	; 0x05
    36ba:	0c 81       	ldd	r16, Y+4	; 0x04
    36bc:	1b 81       	ldd	r17, Y+3	; 0x03
    36be:	aa 81       	ldd	r26, Y+2	; 0x02
    36c0:	b9 81       	ldd	r27, Y+1	; 0x01
    36c2:	ce 0f       	add	r28, r30
    36c4:	d1 1d       	adc	r29, r1
    36c6:	0f b6       	in	r0, 0x3f	; 63
    36c8:	f8 94       	cli
    36ca:	de bf       	out	0x3e, r29	; 62
    36cc:	0f be       	out	0x3f, r0	; 63
    36ce:	cd bf       	out	0x3d, r28	; 61
    36d0:	ed 01       	movw	r28, r26
    36d2:	08 95       	ret

000036d4 <_exit>:
    36d4:	f8 94       	cli

000036d6 <__stop_program>:
    36d6:	ff cf       	rjmp	.-2      	; 0x36d6 <__stop_program>
